<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🎉 Missionary&#39;s Blog 😆</title>
  
  <subtitle>Missionary 中国 👋</subtitle>
  <link href="https://missionodd.github.io/atom.xml" rel="self"/>
  
  <link href="https://missionodd.github.io/"/>
  <updated>2022-03-24T08:15:41.557Z</updated>
  <id>https://missionodd.github.io/</id>
  
  <author>
    <name>Missionary</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并发编程| 深理解volatile+锁升级+DCL单例+线程池调优</title>
    <link href="https://missionodd.github.io/2022/03/23/concurrent-programming/"/>
    <id>https://missionodd.github.io/2022/03/23/concurrent-programming/</id>
    <published>2022-03-23T04:50:37.000Z</published>
    <updated>2022-03-24T08:15:41.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>一是保证可见性。<br>二是禁止指令重排序。<br>可见性，是让其他线程可见，一般我们是多核CPU，一旦volatile修饰的变量被一个CPU修改，修改完的值需要立即推送到主存，推送过程要经过一个总线。那么，我们说的可见性就是体现在总线这一层上。因为，我们其他的CPU一直在嗅探总线的数据流通，在缓存一致性的保障下， 能够嗅探到数据的修改，然后，如果自己的缓存行有这条数据，就置为失效。<br>如果下次有线程对该数据读或写，那么它会先从主存拉取数据保存到CPU自己的缓存行里边，然后再做进一步处理。<br>就是嗅探和MESI缓存一致性协议共同保证了CPU层的可见性。<br>总线如何知道volatile修饰呢？关键用了lock 前缀的指令，有两层含义。一个是将数据的修改推送到主存，一个是lock指令过控制总线的时候，其他CPU会嗅探lock指令，然后置缓存行失效。</p><p>禁止指令重排序<br>首先，它是禁止在编译阶段，Class结构中方法表的属性表的Code属性，存放着JVM指令，在编译期时，volatile就完成了一个内存屏障的编译。<br>对于volatile的写，写前加入storeStore屏障，保证写写顺序，写后加入storeLoad，保证先写后读顺序；对于volatile的读，在第一个读后加入loadLoad屏障，保证读读顺序，读后loadStore，保证先读后写顺序，StoreLoad这是个全能型屏障，开销很大，同时具有其他3个屏障的效果。执行该屏障的花销比较昂贵，因为处理器通常要把当前的写缓冲区的内容全部刷新到[内存]中（Buffer Fully Flush，一般不会单独使用。</p><blockquote><p>引申：<br>final 域的写之后，构造函数 return 之前，插入一个 StoreStore 屏障。<br>在 初次读 final 域操作的前面插入一个 LoadLoad 屏障</p></blockquote><p>特殊情况下，可以保证原子性。<br>如果是单条JVM指令字节码，可以保证原子性；如果是多条JVM指令字节码，不能保证原子性；（建议别深入，怕深问到指令出入栈）<br>如果是对 flag = true的读写，可保证，因为读和写都是1条指令字节码。<br>如果a++，不保证，这里涉及了3条JVM指令字节码，iload 读取a，iadd 进行a+1，istore 写a。</p><p>下面这个其他人的答案，有点含糊不理解：<br>read load use 作为一种读原子操作<br>assign store write 作为一种写原子操作<br>主存值read到执行引擎，执行引擎值load到一个栈存副本变量，栈存值use 到执行引擎，以便计算处理；<br>执行引擎值 assign到栈存副本变量，栈存副本值store到主存，主存值write 到主存的变量，以便共享；</p><p>原子操作避免 读过程 或 写过程 在中间操作被打断。<br>虽然use 和assign存在 被打断的可能，但工作内存和主内存，可以依旧相等。<br>    因此在多线程内，适合flag赋值，不适合a++等非原子操作，运算结果a会对中间加数a产生依赖。</p><blockquote><p><strong>Java内存模型即Java Memory Model，简称JMM。</strong><br><strong>JMM定义了Java 虚拟机(JVM)在计算机内存(RAM)中的工作方式。JVM 是整个计算机虚拟模型，所以 JMM 是隶属于 JVM 的。</strong><br>一、JVM构成：<br><strong>1、类加载器（ClassLoader）</strong>:在 JVM 启动时或者在类运行将需要的 class 加载到JVM 中。<br><strong>2、执行引擎</strong>：负责执行 class 文件中包含的字节码指令.<br><strong>3、内存区（也叫运行时数据区）</strong>：是在 JVM 运行的时候操作所分配的内存区。<br><strong>（1）、方法区(MethodArea)</strong>：用于存储类结构信息的地方，包括常量池、静态常量、构造函数等。虽然 JVM 规范把方法区描述为堆的一个辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。<br><strong>（2）、java 堆(Heap)</strong>：存储 java 实例或者对象的地方。这块是 GC 的主要区域。从存储的内容我们可以很容易知道，方法和堆是被所有 java 线程共享的。<br><strong>（3）、java 栈(Stack)</strong>：java 栈总是和线程关联在一起，每当创一个线程时，JVM 就会为这个线程创建一个对应的 java 栈在这个 java 栈中,其中又会包含多个栈帧，每运行一个方法就建一个栈帧，用于存储局部变量表、操作栈、方法返回等。每一个<br>方法从调用直至执行完成的过程，就对应一栈帧在 java 栈中入栈到出栈的过程。所以 java 栈是线程有的。<br><strong>（4）、程序计数器(PCRegister)</strong>：用于保存当前线程执行的内存地址。由于 JVM 程序是多线程执行的（线程轮流切换），所以为了保证程切换回来后，还能恢复到原先状态，就需要一个独立计数器，记录之前中断的地方，可见程序计数器也是线程私有的。<br><strong>（5）、本地方法栈(Native MethodStack)</strong>：和 java 栈的作用差不多，只不过是为 JVM 使用到 native 方法服务的。<br><strong>4、本地方法接口</strong>：主要是调用 C 或 C++实现的本地方法及回调结果。<br><strong>开线程影响哪块内存？</strong><br>每当有线程被创建的时候，JVM 就需要为其在内存中分配虚拟机栈和本地方法栈来记录调用方法的内容，分配程序计数器记录指令执行的位置，这样的内存消耗就是创建线程的内存代价。<br>Java 线程之间的通信总是隐式进行，并且采用的是共享内存模型。这里提到的共享内存模型指的就是 Java 内存模型(简称 JMM)，JMM 决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。总之，JMM 就是一组规则，这组规则意在解决在并发编程可能出现的线程安全问题，并提供了内置解决方案（happen-before 原则）及其外部可使用的同步手段(synchronized/volatile 等)，确保了程序执行在多线程环境中的应有的原子性，可视性及其有序性。</p></blockquote><p>比较：<br>synchronized  一定条件是重量级+可重用锁<br>作用到普通方法上，静态方法上，代码块。<br>普通方法是对象锁，静态方法是当前class锁，代码块看它的指定；</p><p>对单个值读写，<br>读多写少，用volatile，缓存行直接读；<br>读少写多，用sychronized作用到读写方法。<br>volatile锁总线，CPU嗅探，伪共享问题，总线风暴问题；<br>sychronized只会线程的block状态，有用户态和内核态的上下文切换，有一个线程执行的记忆，这个过程耗资源耗时间，所以提出CAS。如果写过程短，CPU执行非常快，线程blocked会非常短。</p><p>总结<br>重量级锁能提高程序的吞吐量。</p><p>volatile挖到操作系统的内存管理，可以看：<br><a href="https://missionodd.github.io/2022/01/26/distributed-volatile-series/">https://missionodd.github.io/2022/01/26/distributed-volatile-series/</a><br>Class文件结构可以看：<br><a href="https://missionodd.github.io/2022/02/01/jvm-notes/">https://missionodd.github.io/2022/02/01/jvm-notes/</a></p><hr><h2 id="Q：synchronized-和-lock-的区别？"><a href="#Q：synchronized-和-lock-的区别？" class="headerlink" title="Q：synchronized 和 lock 的区别？"></a>Q：synchronized 和 lock 的区别？</h2><p>1，基本使用，关键字；接口<br>    lock接口有6个方法：lock，unlock，trylock非阻塞加锁，trylock(time)非阻塞可超时加锁，lockInterruptibly可中断加锁；<br>    Rentrantlock 实现<br>2，隐式加锁，显式加锁<br>    lock在try里，unlock在finally里<br>3，作用方法上多种方式，lock只能作用到代码块<br>对于synchronized<br>    普通方法，静态方法，方法块上有什么不同。<br>    代码块反编译同步指令，monitorenter，monitorexit；<br>    一定有两个出口，正常和异常。<br>    方法上会有ACC_SYNCHRONIZED访问标志。</p><p>4，lock 支持非阻塞式加锁（信号量），支持可超时加锁，支持可中断加锁；<br>不阻塞，少一次上下文切换。可超时可中断，更灵活；</p><p>5，从底层原理，synchronized一定条件下 采用对象监视器monitor，lock采用AQS；<br>Object 的monitor，线程竞争失败，调用wait方法释放锁，会放到等待队列，等待唤醒，再进行锁竞争，会放到同步队列。</p><p>6，synchronized在进行加锁解锁或通知等待时，只有一个同步队列Entry Set 一个等待队列Wait Set；<br>lock有一个同步队列Entry Set，多个等待队列Wait Set；<br>创建一个condition就多一个等待队列<br>7，锁竞争，synchronized只支持非公平锁，lock支持公平锁和非公平锁；<br>对于在排队的A线程，新来的线程B，AB竞争机会相同，对A不公平；如果A总是被插队，A总是在排队，A就是饥饿线程。<br>对于在排队的A线程，新来的线程B，B在队列末端排队，对A公平。</p><p>8，等待唤醒机制，sychronized与Object进行配合，使用notifyAll方法操作；lock需要用contdition接口配合，也是wait/notify机制，只是方法名不同await/signalAll。<br>如果线程获取锁，并condition的await方法，线程去哪？<br>在await方法前，线程加入condition的等待队列，不需要CAS，直接加，此时持有当前锁，说明自己竞争成功。当调用await后，它会进行锁释放。<br>场景：线程A获取锁后，调用wait，A被唤醒，继续执行释放了，A经历了什么？<br>wait前，A提前加入condition的等待队列尾部，不需CAS；当A在队列头部，就是被唤醒，就会进行一轮线程竞争，如果竞争失败，会加入到锁的同步队列尾部，需要CAS；A排队到头部，被唤醒，看公平锁还是非公平锁，如果是非公平锁，可能还会保持一段时间饥饿，如果是公平锁，直接获取锁，直接跳转wait方法释放，直到把锁释放。</p><figure class="image-box">                <img src="image-20220305082139330.png" alt="image-20220305082139330" title class>                <p>image-20220305082139330</p>            </figure><p>9，个性化定制方面，AQS是使用模板方法模式，可以自定义lock。<br>lock下的读写锁ReentrantReadWriteLock，能支持并发读，是共享排他锁。<br><del>AQS的可重写方法：tryacquireShared /tryreleaseshared，tryacquire/tryrelease等，不展开了</del></p><blockquote><p>每个对象都与一个<strong>monitor</strong> 相关联。当且仅当拥有所有者时（被拥有），monitor才会被锁定。执行到monitorenter指令的线程，会尝试去获得对应的monitor，如下：</p><blockquote><p>每个对象维护着一个记录着被锁次数的计数器, 对象未被锁定时，该计数器为0。线程进入monitor（执行monitorenter指令）时，会把计数器设置为1.</p><p>当同一个线程再次获得该对象的锁的时候，计数器再次自增.</p><p>当其他线程想获得该monitor的时候，就会阻塞，直到计数器为0才能成功。</p></blockquote></blockquote><h2 id="锁升级详解"><a href="#锁升级详解" class="headerlink" title="锁升级详解"></a>锁升级详解</h2><blockquote><p><strong>synchronized锁有四种状态，无锁，偏向锁，轻量级锁，重量级锁</strong></p></blockquote><blockquote><p><strong>无锁，偏向锁，轻量级锁（CAS）都是在用户空间完成</strong><br><strong>重量级锁是需要向内核申请的</strong></p></blockquote><p>简单的讲（简单概括这里可忽略不用看）：<br><strong>当线程A启动后，获得了对象的锁，此时线程A的线程ID将保存到对象的对象头中，对象头中的偏向锁标志位变为1。此时如果第二个线程B想访问这个对象，线程A、B之间就存在一个竞争的关系，但是此时偏向锁是偏向于线程A的，即A是优先的，偏向锁将会升级为轻量级锁，以此来保证持有对象锁的的线程A运行。此时线程B将会进行CAS，CAS也叫做自旋锁，B会去检查对象的锁是否还是属于A的，如果是，那B将会继续自选，直到对象锁被释放，B马上就会获取对象的锁。但是假如长时间无法获取到对象的锁，CAS是会消耗CPU的性能的，尤其当许多个线程竞争同一个对象的锁时，CPU资源占用会大大提高，此时锁将会再次升级，对象锁将升级为重量级锁。此时，所有竞争的线程将进入阻塞队列，等待cpu的调度。</strong><br><figure class="image-box">                <img src="200B5CB0-C1CD-4BAB-B6D0-0F9571CA6BE7_20220306170653.png?v=1&type=image&token=V1:3a9aOLmt56Y9r0-FQjdOX46UTQordIh0AVMM9wUpw3I" alt="32位" title class>                <p>32位</p>            </figure></p><figure class="image-box">                <img src="7D5886D5-B82C-4991-BB30-A941167F9C49_20220306165657.png?v=1&type=image&token=V1:-L4TERytUf4m7oc5qmaAP0u8qsvL9-ami3kxpq7ZVYc" alt="64位" title class>                <p>64位</p>            </figure><p>看图，具体展开：<br>32位系统下，<br>当我们创建对象的时候，它对象头里Markword有25位hashcode，4位分代年龄，1位偏向锁标记，2位锁标记位。</p><p><del>对象头的其他，32位的指向元空间的类指针，不一定存在的32位对象数组长度，这里不展开。</del></p><p>如果对象进行new关键字，对象头有无25位hashcode？<br>仅仅new对象，如果没有显式或隐式调用hashcode方法，该标记位并没有真实标记hashcode。就是说，只有调用Object类hashcode，才会有标记，比如存入Hashmap，否则是0。</p><p>分代年龄，没有经过minorgc，就是0。</p><p>偏向锁位：<br>无锁状态，偏向锁位 0<br>偏向锁态，偏向锁位 1</p><p>无锁状态升级为偏向锁状态<br>想要成为偏向锁态，markword中无hashcode记录，这是一个前提。<br>让23位线程ID+2位epoch 占据了无锁态的所谓25位hashcode位。</p><p>锁标志位：<br>标记是什么锁状态。具体看图</p><p><strong>偏向锁：</strong><br>单线程操作环境，不存在锁竞争，偏向锁有一个非常好的性能，<code>偏向锁</code>会直接往markword里贴上线程ID，表示锁住了，<strong>每次只需检查线程ID是否偏向自己，好处是：没有CAS自旋和操作系统调用这些耗时的锁竞争机制</strong>。<br><strong>如果出现其他线程竞争，也不一定升级锁</strong>。比如线程A在对象已贴上线程ID，线程B发现被贴上A线程ID，就会检查线程A的存活状态，如果线程A已在临界区外，线程B先把对象置为匿名偏向锁状态，<code>‘宁为玉碎，不为瓦全’</code>，再准备CAS无锁竞争，如果竞争成功，线程B把对象置为偏向自己。如果竞争失败，比如线程C进来并且CAS抢到(截胡)，C正在执行同步代码，此时B仍不放弃，还要做一个更高级的争取操作，线程B会进行<code>偏向锁撤销</code>的stw复杂操作：B线程挂起，等待线程C到达全局安全点后就把C暂停，线程C的栈会被遍历，找里边的偏向锁对象记录Lock Record，看看线程C是否还锁着。如果找到Lock Record则说明线程C还在临界区，否则线程C不存活。接下来，<br>简化地说：线程B撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。<br>具体而言：<br>如果线程C还存活且线程正在执行同步代码块中的代码，则直接升级为轻量级锁<br>如果线程C未存活，或者未执行同步代码块中的代码，则进行校验是否触发过批量重偏向：<br>1 没触发<strong>重偏向</strong>，则撤销偏向锁，将markword升级为轻量级锁（无锁状态），再进行CAS竞争真正成为轻量级锁<br>2 触发了<strong>重偏向</strong>，设置为匿名偏向锁状态，CAS将偏向锁重新指向新线程。</p><p>那么，最后就会导致3种情况：</p><p>一是对象升级为轻量级锁，但起初只是锁位标记00，前30位置为00，没有指向锁记录栈帧，此时算是无锁状态；后续再CAS自旋竞争锁处理真正成为轻量级锁。</p><p>二是对象重新偏向到线程B。</p><p>涉及到<strong>批量重偏向</strong>和<strong>批量撤销</strong>的操作。<br>除了对象markword有epoch计数器，class信息中也有epoch值，class的epoch维护两个阈值，批量重偏向阈值是20，批量撤销阈值40。</p><p>比如：同一个类创建40对象，线程1对40对象进行同步块的初始的加锁并保持执行，线程2对40个对象操作而引起了偏向锁撤销，首先会把前19个对象进行偏向锁撤销为匿名偏向锁，每次撤销class的epoch会+1，之后达到class批量重偏向阈值20，JVM认为class偏向锁有倾错问题，触发批量重偏向，后20到40对象通过CAS直接偏向线程B，这就是批量重偏向的过程，这里class计数器没有增长。线程3，执行20-40做锁撤销，撤销class计数器继续增长，达到class批量撤销阈值40，JVM这个类的竞争激烈，标记该class为偏向不可用，在之后创建41个对象时，会直接把锁标记置00膨胀为轻量级锁，这就是批量撤销过程。</p><p>此外，触发批量重偏向阈值20后，还配合一个time超时阈值25s，如果超时未达40的批量撤销阈值，重置class的epoch，下次重新计数20-39的范围。</p><p>三是直接将该类置为不可使用偏向锁。<br>这个就是批量撤销开启之后。</p><p>偏向锁升级为轻量级锁：<br>先把偏向锁标记置00，线程ID+Epoch置为00，是无所状态。由下一次争抢完成升级。</p><p>下面是流程图和代码，跟文字描述会有出入<br><figure class="image-box">                <img src="image-20220324153550084.png" alt="偏向锁" title class>                <p>偏向锁</p>            </figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> BiasedLocking::<span class="function">Condition <span class="title">revoke_bias</span><span class="params">(oop obj, bool allow_rebias, bool is_bulk, JavaThread* requesting_thread)</span> </span>&#123;</span><br><span class="line">  markOop mark = obj-&gt;mark();</span><br><span class="line">  <span class="comment">// 如果对象不是偏向锁，直接返回 NOT_BIASED</span></span><br><span class="line">  <span class="keyword">if</span> (!mark-&gt;has_bias_pattern()) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::NOT_BIASED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  uint age = mark-&gt;age();</span><br><span class="line">  <span class="comment">// 构建两个 mark word，一个是匿名偏向模式（101），一个是无锁模式（001）</span></span><br><span class="line">  markOop   biased_prototype = markOopDesc::biased_locking_prototype()-&gt;set_age(age);</span><br><span class="line">  markOop unbiased_prototype = markOopDesc::prototype()-&gt;set_age(age);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  JavaThread* biased_thread = mark-&gt;biased_locker();</span><br><span class="line">  <span class="keyword">if</span> (biased_thread == NULL) &#123;</span><br><span class="line">     <span class="comment">// 匿名偏向。当调用锁对象原始的 hashcode() 方法会走到这个逻辑</span></span><br><span class="line">     <span class="comment">// 如果不允许重偏向，则将对象的 mark word 设置为无锁模式</span></span><br><span class="line">    <span class="keyword">if</span> (!allow_rebias) &#123;</span><br><span class="line">      obj-&gt;set_mark(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断偏向线程是否还存活</span></span><br><span class="line">  bool thread_is_alive = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">// 如果当前线程就是偏向线程</span></span><br><span class="line">  <span class="keyword">if</span> (requesting_thread == biased_thread) &#123;</span><br><span class="line">    thread_is_alive = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 遍历当前 jvm 的所有线程，如果能找到，则说明偏向的线程还存活</span></span><br><span class="line">    <span class="keyword">for</span> (JavaThread* cur_thread = Threads::first(); cur_thread != NULL; cur_thread = cur_thread-&gt;next()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cur_thread == biased_thread) &#123;</span><br><span class="line">        thread_is_alive = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果偏向的线程已经不存活了</span></span><br><span class="line">  <span class="keyword">if</span> (!thread_is_alive) &#123;</span><br><span class="line">    <span class="comment">// 如果允许重偏向，则将对象 mark word 设置为匿名偏向状态，否则设置为无锁状态</span></span><br><span class="line">    <span class="keyword">if</span> (allow_rebias) &#123;</span><br><span class="line">      obj-&gt;set_mark(biased_prototype);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj-&gt;set_mark(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线程还存活则遍历线程栈中所有的 lock record</span></span><br><span class="line">  GrowableArray&lt;MonitorInfo*&gt;* cached_monitor_info = get_or_compute_monitor_info(biased_thread);</span><br><span class="line">  BasicLock* highest_lock = NULL;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cached_monitor_info-&gt;length(); i++) &#123;</span><br><span class="line">    MonitorInfo* mon_info = cached_monitor_info-&gt;at(i);</span><br><span class="line">    <span class="comment">// 如果能找到对应的 lock record，说明偏向所有者正在持有锁</span></span><br><span class="line">    <span class="keyword">if</span> (mon_info-&gt;owner() == obj) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="comment">// 升级为轻量级锁，修改栈中所有关联该锁的 lock record</span></span><br><span class="line">      <span class="comment">// 先处理所有锁重入的情况，轻量级锁的 displaced mark word 为 NULL，表示锁重入</span></span><br><span class="line">      markOop mark = markOopDesc::encode((BasicLock*) NULL);</span><br><span class="line">      highest_lock = mon_info-&gt;lock();</span><br><span class="line">      highest_lock-&gt;set_displaced_header(mark);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (highest_lock != NULL) &#123; <span class="comment">// highest_lock 如果非空，则它是最早关联该锁的 lock record</span></span><br><span class="line">    <span class="comment">// 这个 lock record 是线程彻底退出该锁的最后一个 lock record</span></span><br><span class="line">    <span class="comment">// 所以要，设置 lock record 的 displaced mark word 为无锁状态的 mark word</span></span><br><span class="line">    <span class="comment">// 并让锁对象的 mark word 指向当前 lock record</span></span><br><span class="line">    highest_lock-&gt;set_displaced_header(unbiased_prototype);</span><br><span class="line">    obj-&gt;release_set_mark(markOopDesc::encode(highest_lock));</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 走到这里说明偏向所有者没有正在持有锁</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (allow_rebias) &#123;</span><br><span class="line">       <span class="comment">// 设置为匿名偏向状态</span></span><br><span class="line">      obj-&gt;set_mark(biased_prototype);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 将 mark word 设置为无锁状态</span></span><br><span class="line">      obj-&gt;set_mark(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br></pre></td></tr></table></figure><blockquote><p>注：每次进入同步块（即执行monitorenter）的时候都会以从高往低的顺序在栈中找到第一个可用的Lock Record，并设置偏向线程ID；每次解锁（即执行monitorexit）的时候都会从最低的一个Lock Record移除。所以如果能找到对应的Lock Record说明偏向的线程还在执行同步代码块中的代码。</p></blockquote><blockquote><p><strong>批量重偏向</strong>和<strong>批量撤销</strong>如何理解，我用转岗问题举例：<br>有40个员工（对象锁），3个部门（线程）。<br>1) 线程1: 1-40都入职部门1了（有偏向的线程1了）<br>2) 线程2：1-19都离职（锁撤销）后又跳槽到部门2，HR们看转岗一出一进麻烦，改为以后想活水就直接在员工档案上改部门吧，一年内一次活水机会，结果，20-40都快速活水了（可重偏向）（Thread Id直接换了） // 到达BiasedLockingBulkRebiasThreshold（20）次数后。<br>3) 线程3：不到一年，20-40又都离职（锁撤销）后又跳槽到部门3，HR们觉得转岗频率太高了，滚蛋，以后都玩完，转岗门槛拉高（设置为不可偏向状态，正在运行的锁对象会被撤销）// 到达BiasedLockingBulkRevokeThreshold（40）次数<br>4) 以后新入职的员工41，就规定了较高的转岗门槛（new出来就是轻量级锁）。只能等待各部门主动去要你。</p><p>PS: 活水是指依靠公司内部的转岗机制，实现跳槽换部门。</p></blockquote><p><strong>轻量锁</strong>：<br>多线程竞争获取这个锁时，由于该锁已经是偏向锁，当发现对象头 MarkWord 中的线程 ID 不是自己的线程 ID，会CAS尝试获得锁，如果持有锁的线程在全局安全点检查时，不需要再使用该锁了则获取成功，程序继续执行，反之则获取锁失败，撤销偏向状态01变为无锁00，升级为轻量级锁，即自旋锁。</p><p>此时，将锁对象markWord中32位修改成指向自己线程栈中Lock Record的指针（CAS抢）执行在用户态，消耗CPU的资源。此时，锁标记位00.<br>JDK1.6引入了聪明的<strong>自适应自旋锁</strong>。能减少长任务的自旋次数。<br>他的自旋次数是会变的，我用大白话来讲一下，就是线程如果上次自旋成功了，那么这次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么这次自旋也很有可能会再次成功。反之，如果某个锁很少有自旋成功，那么以后的自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。</p><p>轻量级锁的加锁过程：<br>线程A进入同步块，如果同步对象偏向锁状态为无锁状态，虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，里边存储锁对象目前的Mark Word的拷贝，存放拷贝的地方称之为 Displaced Mark Word。然后轻量级加锁时，拷贝对象头中的Mark Word复制到锁记录中；<br>之后，虚拟机将使用CAS操作尝试将object的Mark Word中的32位更新为指向线程A的Lock Record的指针，并将线程A的Lock record里的owner指针指向object的markWord，意在完成线程A与object的绑锁。此时，线程A持有锁。<br>此时线程B进来尝试CAS更新，<br>如果更新成功，那么线程B就拥有了该对象的锁，并且对象Mark Word的锁标志位置为“00”，即表示此对象处于轻量级锁定状态。<br>如果这个更新操作失败了，JVM首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是，说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。<br>此时为了提高获取锁的效率，线程B会不断地循环去获取锁，尝试CAS, 这个循环是有次数限制的，比如10次，如果在循环结束之前CAS操作成功，那么线程B就获取到锁；<br>如果循环结束依然获取不到锁, 则线程B获取锁失败, 对象的MarkWord中的记录会被修改为指向互斥量（重量级锁）的指针。之后，锁标志的状态值变为10，然后线程B被挂起，后面来的线程也会直接被挂起。在这个状态下，未抢到锁的线程都会进入 Monitor，之后会被阻塞在 _WaitSet 队列中。</p><p>此时，线程A的displaced mark word和原来对象的markword不一样了。</p><p>解锁<br>也是通过CAS操作来进行的，如果对象的Mark Word仍然<code>指向着线程A</code>的<code>锁记录</code>，那就用CAS操作把对象当前的Mark Word和线程中复制的Displaced Mark Word<code>替换回来</code>。</p><p>因为线程B把对象 markword改成重量级锁，那么线程A<code>替换失败</code>，那么就把自己栈桢的Displaced Mark Word拷贝到对象头的<strong>Monitor</strong>对象的header变量，并且<strong>Monitor</strong>对象的owner变量指向自己。保证displaced mark word不丢失。</p><p><strong>重量级锁</strong>：<br>CAS发生10次后，轻量级锁升级为重量级锁，把锁指针指向重量级锁Object的monitor。</p><p>在Java虚拟机(HotSpot)中，Monitor对象其实就是ObjectMonitor对象，这个对象是一个C++对象，定义在虚拟机源码中。</p><p>回顾Monitor机制。<br>场景：线程A获取锁后，调用wait，A被唤醒，继续执行释放了，A经历了什么？<br>wait前，A提前加入等待队列WaitSet尾部，不需CAS；当A在队列头部，就是被唤醒，就会进行一轮线程竞争，如果竞争失败，会加入到锁的同步队列EntrySet尾部，需要CAS；当A排队到同步队列头部，被唤醒，看公平锁还是非公平锁，如果是非公平锁，可能还会保持一段时间饥饿，如果是公平锁，直接获取锁，直接跳转wait方法释放，直到把锁释放。当然，synchronized是非公平锁，公平锁情况并没有出现。</p><figure class="image-box">                <img src="image-20220305082139330.png" alt="image-20220305082139330" title class>                <p>image-20220305082139330</p>            </figure><figure class="image-box">                <img src="image-20220324082854210.png" alt="image-20220324082854210" title class>                <p>image-20220324082854210</p>            </figure><h3 id="synchronized可重入"><a href="#synchronized可重入" class="headerlink" title="synchronized可重入"></a>synchronized可重入</h3><p>synchronized是可重入锁，那么它是如何实现可重入的呢？其实上面详细的过程已经说过了，这里再总结一下（之前的判断逻辑就省略掉了）：</p><p>偏向锁：检查markWord中的线程ID是否是当前线程，如果是的话就获取锁，继续执行代码；<br>轻量级锁：检查markWord中指向lockRecord的指针是否是指向当前线程的lockRecord，是的话继续执行代码；<br>重量级锁：检查_owner属性，如果该属性指向了本线程，_count属性+1，并继续执行代码。</p><p>总结<br>synchronized的执行过程：</p><ol><li>检测Mark Word里面是不是当前线程的ID，如果是，表示当前线程处于偏向锁</li><li>如果不是，则使用CAS将当前线程的ID替换Mard Word，如果成功则表示当前线程获得偏向锁，置偏向标志位1</li><li>如果失败，则说明发生竞争，撤销偏向锁，进而升级为轻量级锁。</li><li>当前线程使用CAS将对象头的Mark Word替换为锁记录指针，如果成功，当前线程获得锁</li><li>如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</li><li>如果自旋成功则依然处于轻量级状态。</li><li>如果自旋失败，则升级为重量级锁。</li></ol><p>上面几种锁都是JVM自己内部实现，当我们执行synchronized同步块的时候jvm会根据启用的锁和当前线程的争用情况，决定如何执行同步操作；</p><p>在所有的锁都启用的情况下线程进入临界区时会先去获取偏向锁，如果已经存在偏向锁了，则会尝试获取轻量级锁，启用自旋锁，如果自旋也没有获取到锁，则使用重量级锁，没有获取到锁的线程阻塞挂起，直到持有锁的线程执行完同步块唤醒他们；</p><p>synchronized锁升级实际上是把本来的悲观锁变成了 在一定条件下 使用无锁(同样线程获取相同资源的偏向锁)，以及使用乐观(自旋锁 cas)和一定条件下悲观(重量级锁)的形式。</p><p>偏向锁:适用于单线程适用锁的情况，如果线程争用激烈，那么应该禁用偏向锁。</p><p>轻量级锁：适用于竞争较不激烈的情况(这和乐观锁的使用范围类似)</p><p>重量级锁：适用于竞争激烈的情况</p><p><strong>锁优化</strong></p><p>以上介绍的锁不是我们代码中能够控制的，但是借鉴上面的思想，我们可以优化我们自己线程的加锁操作；</p><p><strong>锁消除</strong></p><p>锁消除用大白话来讲，就是在一段程序里你用了锁，但是jvm检测到这段程序里不存在共享数据竞争问题，也就是变量没有逃逸出方法外，这个时候jvm就会把这个锁消除掉</p><p>我们程序员写代码的时候自然是知道哪里需要上锁，哪里不需要，但是有时候我们虽然没有显示使用锁，但是我们不小心使了一些线程安全的API时，如StringBuffer、Vector、HashTable等，这个时候会隐形的加锁。比如下段代码：</p><pre><code>public void sbTest(){    StringBuffer sb= new StringBuffer();    for(int i = 0 ; i &lt; 10 ; i++){        sb.append(i);    }    System.out.println(sb.toString());}</code></pre><p>上面这段代码，JVM可以明显检测到变量sb没有逃逸出方法sbTest()之外，所以JVM可以大胆地将sbTest内部的加锁操作消除。</p><p><strong>减少锁的时间</strong></p><p>不需要同步执行的代码，能不放在同步快里面执行就不要放在同步快内，可以让锁尽快释放；</p><p><strong>减小锁的粒度</strong></p><p>它的思想是将物理上的一个锁，拆成逻辑上的多个锁，增加并行度，从而降低锁竞争。它的思想也是用空间来换时间（如ConcurrentHashMap、LinkedBlockingQueue、LongAdder）；</p><p><strong>锁粗化</strong></p><p>大部分情况下我们是要让锁的粒度最小化，锁的粗化则是要增大锁的粒度; 在以下场景下需要粗化锁的粒度：<br>假如有一个循环，循环内的操作需要加锁，我们应该把锁放到循环外面，否则每次进出循环，都进出一次临界区，效率是非常差的；</p><p><strong>使用读写锁</strong></p><p>ReentrantReadWriteLock 是一个读写锁，读操作加读锁，可以并发读，写操作使用写锁，只能单线程写。</p><h2 id="单例模式的原因"><a href="#单例模式的原因" class="headerlink" title="单例模式的原因"></a>单例模式的原因</h2><p>双重校验锁DCL ——double check lock<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeDoubleCheckedLocking</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Instance instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SafeDoubleCheckedLocking<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Instance();<span class="comment">//instance为volatile，现在没问题了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1.懒汉实现惰性加载资源。</p><ol start="2"><li>volatile修饰，设置内存屏障。错误说法：<del>强制指令执行顺序，先分配内存空间，再创建对象，最后引用指向该对象。</del><br>正确：在这行代码的new指令前加入StoreStore屏障，在new指令后加入StoreLoad屏障，保证new指令内部的三步：分配内存空间，创建对象，引用指向该对象的完成，才有外部读操作，也就是if空判断的读取。<br>总体效果就是一个线程对volatile的读，优先于其他线程对volatile的写。<br>挖重点，StoreLoad是全能屏障，总线会有Lock前缀指令，确保写操作的主存刷新以及CPU缓存失效。</li><li>static修饰，定义属于类变量，保证单例</li><li>第一个判断null，过滤synchronized锁的性能消耗</li><li>同步块，设置临界区，同时间只允许一个线程完成对象的创建。</li><li>第二个判断null，防止多线程进入第一个判断null，而导致多对象的创建。</li></ol><blockquote><p>Q: 过去DCL不安全的原因？<br>JVM1.4前，允许指令混乱情况。final：一个线程构造函数为final修饰变量赋值，另一个线程可能获取final的初始化0值；volatile：只保证读可见性，不保证写的顺序</p></blockquote><blockquote><p>Q: 不用volatile，先临时变量，再赋值到单例变量，是否能解决指令重排？<br> 不能，JVM只是潜在的reorder推手之一，CPU和缓存也会导致重排</p></blockquote><blockquote><p>Q: 新版本volatile如何保证DCL安全？<br>设置内存屏障，防止指令重拍，其中store-load屏障是保证读写顺序，实现volatile上的happens-before语义，即一个线程对volatile变量的写，先于其他线程对该变量的同时读。屏障的结果就是原来只保证volatile字段本身的可见性，现在保证本身以及所有相关字段的可见性，代价就是造成访问volatile字段的更大性能开销。</p></blockquote><blockquote><p>Q：是否可以用final实现DCL？<br>能。<br>a.对final字段的写必然先于其它线程装载该final字段的共享引用。（final字段必须被正确地赋值后其它线程才能读取到它）<br>b. 构造函数执行完毕后，对 final 字段的所有写以及通过这些 final 字段间接可及的变量变为“冻结”，所有在冻结之后获得对这个对象的引用的线程都会保证看到所有冻结字段的冻结值。（所有线程对final及其间接字段有一致的可见性）<br>c. 初始化 final 字段的写将不会与构造函数关联的冻结后面的操作一起重排序。（构造函数内部，对某个final字段而言，它的冻结点之前的操作必然先于冻结点之后的操作）</p></blockquote><blockquote><p> 再来说一下final域的重排规则：</p><ol><li>写final的重排规则：<br>JMM禁止编译器把final域的写重排序到构造函数之外。<br>在final域的写之后，插入一个StoreStore屏障。<br>也就是说确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了。</li><li>读final的重排规则：<br>在一个线程中，初次读对象引用与初次读该对象包含的final域，JMM禁止处理器重排序这两个操作（注意，这个规则仅仅针对处理器）。<br>在读final域操作的前面插入一个LoadLoad屏障。<br>也就是说确保：在读一个对象的final域之前，一定会先读包含这个final域的对象的引用。</li><li>如果final域是引用类型，那么增加如下约束：<br>在构造函数内对一个final引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。<br>就是确保在构造函数外把这个被构造对象的引用赋值给一个引用变量之前，final域已经完全初始化并且赋值给了当前构造对象的成员域，至于初始化和赋值这两个操作则不确保先后顺序。）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> T value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalWrapper</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> FinalWrapper&lt;Helper&gt; helperWrapper;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      FinalWrapper&lt;Helper&gt; wrapper = helperWrapper;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (helperWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  helperWrapper = <span class="keyword">new</span> FinalWrapper&lt;Helper&gt;(<span class="keyword">new</span> Helper());</span><br><span class="line">              &#125;</span><br><span class="line">              wrapper = helperWrapper;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> wrapper.value;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Q: DCL是否是实现单例的最佳方案？是否有代替？<br>不是。DCL的目的是懒加载和提高性能，但现代JMM加强volatile保证可靠，但副作用是性能开销变大，且加上了同步块的开销。</p></blockquote><p>完美方案：<br>推荐通过内部类实现惰性加载：<br>有一个大前提，JVM保证类的加载过程是线程互斥。<br>第一个调用getInstance，instance只被创建1次，且赋值给instance的内存已初始化完毕，避免reorder，此外，该方法第一次使用互斥机制，解决同步块带来的性能问题；<br>当然，只有第一次调用getInstance时才让instance加载，所以是惰性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;      </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">             …          </span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonContainer</span></span>&#123;</span><br><span class="line">             <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();          </span><br><span class="line">&#125;          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> SingletonContainer.instance;          </span><br><span class="line">&#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://blog.csdn.net/doraeimo/article/details/5714239" target="_blank" rel="noopener">https://blog.csdn.net/doraeimo/article/details/5714239</a></p><h2 id="线程池参数调优—雨露均沾，保绩效"><a href="#线程池参数调优—雨露均沾，保绩效" class="headerlink" title="线程池参数调优—雨露均沾，保绩效"></a>线程池参数调优—雨露均沾，保绩效</h2><p>通过压测，符合最终场景，调整参数。<br>如何进行初次压测时，线程池参数配置？<br>分两种场景：<br>一当前服务器，只为当前线程池服务。也就是说，线程池能够占用服务器的所有资源，比如Tomcat的IO池，并行Steam流。依据处理逻辑，是CPU密集还是IO密集。CPU密集就选CPU数+1，IO密集就选CPU数的2N+1，N越大，可以加2加3。根据一轮压测结果，做一个参数的合理调整。<br>二是存在微服务和多接口，比如一个场景：5个接口：2个重要，3个降级，高并发压力下就会对3个接口进行降级，保障2个重要尽可能分配到更多服务器资源。在一个重要接口里，需要创建线程池，提高单接口处理速度，这个时候，不能只看CPU核数，线程池设置参数需要具体一个依据：<br>首先，一个真正高并发项目，它的监控是非常完备的，首先拿到线上高并发压力下该服务所有接口的访问比例。比如刚提到5个接口，2000条请求打到服务里边，5个接口分别<strong>承载着不同比例的访问量</strong>，比如2:3:1:1:1。比如，在比3这一块，它有资格至少占用服务资源的3/8。它不能太大，否则占用过多而让其他线程无路可走。<br>那么此时，基本可确定maxPool<strong>最大线程数参数</strong>，占服务器线程资源的3/8。<br>至于整体服务器峰值最大承载多少线程，参照CPU核数以及QPS来说。比如QPS100，相当于1s内服务器内当前几个CPU线程能承载起100个请求线程，因为处理速度够快。所以，要衡量整体服务器最大QPS，即当前服务器的<strong>同一时刻活跃的线程数</strong>。当前活跃线程数可粗略理解为这是基于业务需求场景的资源数最大值。再根据3/8，可以确定接口最大分配线程参数的值，100*3/8约等于40。</p><p>接下来，考虑<strong>核心线程数</strong>。初次压测时，设置为与最大线程数一般大，看能否撑住。撑住就尝试调小到资源不浪费，否则撑不住，要对任务排队队列Q设置，Q是存储排队的任务。Q不推荐无界队列，这相当于最大线程数失效，违背设计线程池的初衷，而且高并发导致Q的无限积压而OOM。<strong>Q设置为有界队列</strong>，这个界的依据又是什么呢？在生产上，像抢购秒杀都会有<strong>一个高峰访问时段</strong>，那么在压测的时候，需要模拟一个生产上的高峰访问时段。比如1小时抢购活动，就要至少持续1小时的压测。在无Q等待情况压测，大概算一下在分布式环境下的一个节点1小时该接口能够承载的最大值，如进来10w，只处理8w，失败2w，2w适当上调50%作为有界队列上限，为了访问节点倾斜的问题，如果均匀可改为10%，如果有节点<strong>访问尖刺</strong>就要调到尖刺最高位左右。要知道，实际的队列上界一般很大。</p><p>这几个初次调整后，<strong>开始多轮压测</strong>，看是否达到性能需求目的。可适当调小线程数，避免浪费无用的线程资源，因为，后续要涉及接口降级和线程池导致高可用问题。一步步调到最好，这是最理想的。<br>但往往可能，没有达到预期，刚刚已经给3/8最大资源量，还不够。第一点，<strong>再次调高队列存储上限</strong>，前提是业务能够接受这种等待慢，先不要想增加同时线程数，而是通过任务空间缓冲，保持当前接口稳定运行，且不影响其他接口。第二点，不接受Q过大，想尽快处理任务，那么，要从单机单接口的<strong>代码的并发性调高</strong>，从吞吐量和RT入手，比如，DB访问是瓶颈，使用缓存；第三方接口是瓶颈，使用异步MQ处理；秒杀业务，开Gzip压缩和做静态页面。第三点，已竭尽所有，<strong>只能线程数适当调大一点</strong>。但不能太大，如果以当前接口利益为中心，而毁坏其他接口持有服务器资源的权利，这是比较糟糕的。所以，在对重要接口的线程数调大的同时，要对其他接口做<strong>降级处理</strong>，相当于降级接口去牺牲它的服务器资源，分摊给重要接口。<br>但其实，这做法不要做，应该向上级<strong>申请加节点</strong>，通过集群分摊。<br>因为，调大线程数，是让其他接口冒着风险。其他的接口设置线程数小了，很有可能走到抛异常的饱和策略，这样，它抛出异常比例升高，造成接口的熔断或降级。<br>这本来够用的服务资源，由于设置线程池参数不合理而导致异常熔断或降级，AC，年终绩效没有了，必背锅。线程数调得过大，这事更大，你占用了额外的资源，导致别的接口的请求积压。</p><p>至于，keepAlive空闲线程存活时间，只是复用性的优化，根据测试，看有无触及阻塞队列阈值，如果频繁触及，说明业务总需要非核心线程，适当调大存活时间。一般默认即可，因为我已经确定当前最大线程数绝不会影响到服务的其他接口资源，它的调整优化作用非常有限。</p><p>饱和策略，大多数业务抛异常，记录日志，熔断或降级处理，做重试机制。</p><p>最后，理解以上这些，那么我们可以合理配置hystrix或sentinel。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;volatile&quot;&gt;&lt;a href=&quot;#volatile&quot; class=&quot;headerlink&quot; title=&quot;volatile&quot;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;p&gt;一是保证可见性。&lt;br&gt;二是禁止指令重排序。&lt;br&gt;可见性，是让其他线程可见，一般我们是多核</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="高并发" scheme="https://missionodd.github.io/categories/技术/高并发/"/>
    
    <category term="并发编程" scheme="https://missionodd.github.io/categories/技术/高并发/并发编程/"/>
    
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="高并发" scheme="https://missionodd.github.io/tags/高并发/"/>
    
  </entry>
  
  <entry>
    <title>面经 | 基础面+调优经验，高P7开发一面摘录笔记</title>
    <link href="https://missionodd.github.io/2022/02/15/p7-interview-skills-1/"/>
    <id>https://missionodd.github.io/2022/02/15/p7-interview-skills-1/</id>
    <published>2022-02-15T07:50:37.000Z</published>
    <updated>2022-02-28T02:22:02.318Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8e81d129e67d7343713e3638802cb414e2ad220c263a1fe7852eaa9fd8019f6d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="文章私密：Please enter the password to read.">文章私密：Please enter the password to read.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密的文章,请联系博主获得阅读权限.&lt;/br&gt;</summary>
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="面经" scheme="https://missionodd.github.io/categories/技术/面经/"/>
    
    
    <category term="面经" scheme="https://missionodd.github.io/tags/面经/"/>
    
    <category term="java" scheme="https://missionodd.github.io/tags/java/"/>
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL| MYSQL优化思路+知识点梳理</title>
    <link href="https://missionodd.github.io/2022/02/14/mysql-notes/"/>
    <id>https://missionodd.github.io/2022/02/14/mysql-notes/</id>
    <published>2022-02-14T05:50:37.000Z</published>
    <updated>2022-03-17T15:44:12.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>多数来自王校长MYSQL系列<br>笔记优点：从调优角度去挖知识</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>调优为主线，进行贯穿，再引申。<br>从mysql初期设计表开始考虑调优，<strong>控制单行数据的大小</strong>。<br>不能像初学者，直接来一个varchar(255)，过于浪费空间。<br>varchar不像char定长，它首先额外存储1或2字节的长度，再存储一个变长的数据。<br>存储就不得不讲B+树。</p><p><strong>B+树是mysql索引数据的存储数据结构</strong>。<br>先以<strong>聚簇索引</strong>为例，以主键进行索引树，非叶子存储索引，叶子存储整行的数据，比如bigint类型自增，除了存储本身8字节整型，还加上一个6字节的向下指针，对于bigint类型主键，非叶子节点的每一条数据需要至少占用14字节，（tips：B-是开区间）比如，ID 1，真正的节点存储格式80 00 00 01，ID 3 为80 00 00 03，这是8字节，指针来说，是6字节。根节点是16kb的内存页，16kb*1024/14约等于1170索引数据，第二层有1170节点，每个节点有1170个ID+指针，那么，第三层就是1170^2，大概1百万叶子节点，叶子节点存储的是所有数据。<br>那么，如果1条mysql数据，没有好好规划它的大小。如果1行有16kb，那么mysql只能存储1百万条数据，就是1个内存页只有1行数据，这是非常恐怖。如果是1行1kb ，那么，1个内存页存储16行，那么，1百多万乘16，可以存储1千6百万，差不多2千万条数据。</p><p>这里，3层B+树出现一个3次IO索引。每次IO索引时间复杂度O(logn)其实就是用了二分查找，这是B+树查询快的原因之一。刚刚讲到，有一个内存页1行数据的IO，这查效率是相对慢，这就涉及到加载内存页的问题，16kb内存页加载出来，这算1次IO。首先，一层16kb内存页加载完成后，再进行二分查找，定位ID范围，然后指向二层，此时，又要加载16kb内存页，在这里边，又要定位ID范围去加载第三层，三层又要加载16kb内存页，再二分查找最终定位数据。当然，1和2层一般回缓存预热，减少查询IO。但是，如果1行16kb，查询多行，IO次数依然较大。<br>控制1行数据大小，这就是B+树的<strong>高扇出性</strong>。</p><p>为什么不用二叉树？不用hash表？B树也不怎么用？<br>B树，<strong>每一个节点都要存储数据</strong>。从根节点开始存储数据，这时候，如果1kb数据，最多15条，再加上16指针，指向16个二层节点，二层节点又16个指针，三层就大概是16的平方，369个叶子。三层B树，撑死就这么多。如果2千万条数据，那么mysql一直IO内存页，再二分查找，非常要命。<br>二叉树呢，原因一样。B树起码是个多叉树，还不如B树。<br>那HashMap呢，在不冲突情况是O(1)，而树的索引，查询是O(logn)。为什么不用hash表？<br>第一点，<strong>不支持模糊查询</strong>，也没有最左匹配原则<br>第二点，<strong>不支持范围查询</strong>，一个个离散hash，太恐怖了。<br>第三点，hash冲突不可避免。</p><p>为什么不用跳表？<br>跳表是一种链表的优化，查询O(logn)。<br>主要是mysql的存储介质是磁盘，链式结构是存放内存。<br>mysql数据是块形式，是16kb内存页，在内存页定位数据。链表是一个个node节点，节点只有1条数据，磁盘IO更多，而且磁盘无法对链表预读。<br>B+树数据分布更均匀，每一条查询速度一样，更平衡稳定。<br>跳表数据分布不均匀，查询数据经过路径长度是不一样的。</p><p>B+树有一个最左前缀原则<br>能够支持模糊查询，比如查找同姓的，王1，王2，王3直接遍历叶子内存页；<br>能够支持范围查询，比如查找ID范围，从1到100直接遍历叶子内存页；</p><p><strong>聚簇索引</strong>，是每一张表都有的主键ID<br><strong>辅助索引</strong>，是自己设的索引，每个辅助索引都有一棵叶子是索引值+主键的树  </p><p><strong>联合索引</strong>，多个字段连起来的索引，如果没有主键ID，可以是辅助索引；</p><p>如何在表里边定义索引？<br>要看字段的随机度，随机度越高，定义为索引的索引效率越高。<br>举个反例，如果存储1000万人，性别只有男女，也就是只有01两种情况，这个字段定位性太差，一下子定位到差不多500万的范围，建议不加，因为加索引优化不大，而且还会增加插入数据时的一个索引负担。<br>如果是日期，随机性很高了，怎么看离散呢，命令show index，然后看cardinality（扣低内了体）的值，接近1，说明离散越高，就适合索引。当然，这最终还是对应我们的业务 来说。</p><p>cardinality的值，多说一下，它是通过采样算法，会实时变化的。</p><p><strong>覆盖索引</strong>，它其实不是索引，它是一种效果，没有树，指查询无需回表的索引。关键在于select的字段，是否都在辅助索引的叶子中。如果是select * ，那它回经历辅助索引三层，然后聚簇索引三层<br>，这个过程就是回表，发送了6次IO，差距就上来了。</p><p>索引前缀：把文本前缀作为索引，增加长文本查询效率。</p><h3 id="Q：什么情况索引失效？"><a href="#Q：什么情况索引失效？" class="headerlink" title="Q：什么情况索引失效？"></a>Q：什么情况索引失效？</h3><p>记忆：LOL+-*/ not null  function convert join<br>Like  不匹配最左前缀的模糊查询，比如，以%开头<br>Or    不匹配最左前缀的Or，or作为condition的连接符，当前后两个条件都是索引不失效，但凡有一个不为索引就会失效。</p><p>Lian联合查询，不匹配最左前缀的and联合查询，ab联合索引，如果不以a为首部作为查询，就会索引失效。</p><p>+-*/ 条件字段加减乘除计算，索引失效，比如，age年龄-1=10，失效。</p><p>not 非不等于，!=，&lt;&gt;，is not，取反集就会失效。</p><p>null 字段is null 和 is not null，不一定失效，索引允许null，但是B+树索引不会存有bull值，比如 age is not null，可以走索引，而且还有优化器可优化。为避免失效，字段尽可能设置not null，如果需表示null，尽量设默认值，使索引完全能够构建到B+树。</p><p>function 对字段使用内置函数，比如dateadd(propName, -1) =2022.1.28，失效。</p><p>convert 字段转换，比如：员工ID是varchar类型，查询用了 id = 12345，这就发生varchar转int，因此，要加上单引号。</p><p>join 连表看情况，如果id类型不一样，那就会失效。</p><p>我是就是我，不一样的版本不一样的我。</p><p>select * from table where A&gt;3。A是辅助索引。<br>mysql5.5，一般是全表扫描，不会用A辅助索引，三次IO。这里考虑了离散读的问题，从辅助索引三次IO，拿到所有ID，再从聚簇索引发生超过三次IO拿数据，至少6次IO，有特别离散的5个ID，就有3 + 1+5+5=11次IO。<br>它有一个阈值衡量，比如小于20w数据或小于总量一半，辅助索引失效，聚集索引进行一次三次IO之后，从叶子全表扫描。大于20W数据，利用辅助索引进行离散读。</p><p>mysql5.6+，引入<strong>MRR优化</strong>，解决离散读。立马辅助索引3次IO找ID，存入缓存后排序，再进入聚集索引。如果ID间隔不大，就进行叶子顺序扫描，如果ID间隔大，就二分查找。<br>顺序磁盘IO，比随机IO，可能提高10倍。</p><p>在计算机中，随机io的速度比顺序的io的速度慢很多，因为在一个柱面中，随机io必然会造成磁头的随机旋转，从而产生一定量的磁盘io，而顺序io则可降低到最低。</p><figure class="image-box">                <img src="6E93E449-CEDB-431F-9F78-ADB219D3FC91_20220303211957.png?v=1&type=image&token=V1:geO33iNjY-_a2JB32jzPvAkcUhKneA_8zPt3utACWRg" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><p>索引下推：先在辅助索引过滤掉所有能够过滤的，再一次回表。</p><h2 id="Mysql锁"><a href="#Mysql锁" class="headerlink" title="Mysql锁"></a>Mysql锁</h2><h3 id="MVCC概念"><a href="#MVCC概念" class="headerlink" title="MVCC概念"></a>MVCC概念</h3><p>一致性非锁定读，也叫多版本并发控制。<br>一句话，基于自己的回滚机制，为并发场景读的优化，为了达到读操作不需要被锁定的效果，加快mysql读取。<br>底层基于undo log回滚日志和一致性视图。<br>接下来，讲一下mysql不同隔离级别的MVCC表现。<br>从低到高分别是 read uncommitted读未提交，read committed 读已提交，repeatable read可重复读，串行化读。<br>默认是可重复读。<br>已三条线程来举例子，A，B修改线程，C读线程。</p><p>A，C同时对1条数据读写，C开启事务，A去修改，A在修改前生成一版快照，就是undo log，A修改完成，并且提交。目前又两个版本，B又对数据改，又对生成一版快照提交，此时有三个版本。<br>C线程再读，C线程访问哪部分？<br>在可重复读情况：<br>C读的是最原始版本。</p><p>在读已提交情况：<br>C读的是最新B提交的版本。</p><p>在读未提交情况：<br>A线程改，生成版本undo log 后，未提交。<br>C读的是未提交的A中间状态的数据。<br>这是无所谓版本控制了，是一种即时读取。<br>读取没有持久化的脏数据，是脏读。</p><p>在串行化情况：<br>理解为无论读写操作，都会锁表，操作是严格串行，无所谓版本控制。</p><p>读已提交，事务隔离了吗？<br>没有隔离，AB的修改，影响了C的读取，违背了事务隔离性。</p><p>那么，可重复读，C的读不会收到其他事务影响，实现事务的隔离性。</p><p>对于读未提交，没有持久化的中间状态的脏数据也能读取，这就是脏读。<br>现在我们几乎不会碰到脏读，除非，隔离级别改为读未提交。</p><p>对于读已提交，如果C一个事务中在A修改前后读取两次，发现两次读取结果不一样，这就是不可重复读。<br>如果A改为删除，C一个事务中在A删除前后的读取两次，发现第二次读不了，这就幻读。</p><p>我认为，不可重复和幻读本质相邻。</p><p>对于重复读，通过行锁解决不可重读，再配合间隙锁解决幻读。</p><p>对于串行化，用表锁，不会出现以上问题。</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>一种是锁本条记录，一种是锁范围。<br>共享锁：事务共享读。<br>排他锁：限制一个事务改<br>多个事务能同时获得某一行的共享税，这叫锁兼容。<br>若事务需要获得某一行的排他锁，就要等待所有共享锁及排他锁的释放，这是锁不兼容。</p><p>InnoDB有三种行锁的算法：<br>Record Lock：普通的单个行锁，总会锁住索引记录，如果没有索引，就会锁隐式主。</p><p>Gap Lock 间隙锁，锁一个范围，不包括记录本身。<br>next-key lock：左右两边的GAP Lock + Record Lock，锁一个包括本身的范围，对于行查询都采用这种方式。</p><p>InnoDB的[next-key lock]本身的设计方案就是左开右闭的，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where c2 = 10 for update;</span><br></pre></td></tr></table></figure><p>next-key lock则锁定的是 c2=10 这条记录本身，以及其[索引节点]上 c2=10 前面的那个gap。</p><p>但在RR隔离级别中，为了避免发生幻读，需要把所有可能插入 c2=10 这个值的位置都加上锁，所以对 c2 =10 后面的gap也会加锁。</p><p>当查询的索引含有唯一标识属时，Next key Lock 会降级为Record Lock，仅锁本身。</p><p>索引上的等值查询，未命中，所在的Net-Key Lock，退化为GAP Lock 。</p><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><p> 从插入场景开始讲，<br> mysql 插入会 记录持久化日志redolog，如果mysql非常高并发插入，会有什么性能瓶颈？<br> 首先，面临最大的性能瓶颈，就是ID自增长。ID不重复，就是数据安全，说明有锁，就涉及到block阻塞。<br> 5.1.22之前，所有插入有个auto increase locking，它是一个轻量级锁，innodb提供了是自增长计数器，它是保证计数器线程安全。插入sql提交前进行锁的释放，他不需要等事务提交后才锁释放，这算提高mysql性能：事务提交涉及到mysql持久化的问题，一旦持久化，就要消耗磁盘写入的时间，如果提交后才释放，就是要等待加上持久化时间。5.1.22之后，把id子增长，调整为三种模式。一种是原始的轻量级锁，二是默认策略，分两种情况：如果已知插入数据数量，比如10条，采用了更轻量的互斥量，如果自增长计数器是0，可知最终是10，只需要把1-10分配给10条数据，中间无需block阻塞。对于未知的插入数量，则采用原始的一插入一block的方式；三是无论如何都用互斥量，这会导致ID不连续，将威胁到mysql主从同步问题，不同节点ID不一样了。如果不考虑主从同步，可以用。</p><p>主从同步，有两个策略 ：一是rbr，row形式，记录每一行最后更变样子的语句，二是sbr，statement形式。如果用statement，会记录插入语句，那么在从服务器，执行未知插入数量的语句，互斥量形式插入，ID不连续，可能ID不一致。</p><p>在持久化redo log之前，会存入redobuff log 一个缓冲型日志，在commit时才会fsync磁盘刷新，flush同步到磁盘，然后最终到磁盘。</p><p>问题来了，1000万条每一commit一次造成刷盘，有性能问题，也会影响磁盘寿命。这个盘刷其实做了3种策略：一是每次提交刷盘，这是最好的，二是每一秒定期刷盘，是执行sql语句的线程在做，相当于1000万条只有一次刷盘，有一定延迟，可能存在数据丢失；<br>三是从不刷新，没有redo log，宕机就无法恢复。</p><p>redo log 记录的是内存页的实际数据，bin log 只是语句层面的数据，它不是用于恢复逻辑。</p><p>我们最好是在代码层面，将多条数据变成同一条语句进行插入，一次性提交。如果数据过大，可以分批batch每2000条插入。这样commit的量小，性能提升可达10倍以上，因为盘刷有性能瓶颈，磁盘1秒撑不住1千次刷。</p><p>binlog，用于主从数据同步，包括pit同步。</p><p>undo log，有两个功能，一个是回滚，有个undo段，理解为有几个阶段的回滚快照，以实现MVCC。</p><p>总结<br>MVCC结合undo来说，以及不同事物级别的表现，提到redo log，结合mysql插入性能，就要联系ID自增和提交刷盘。</p><hr><h2 id="其他的问题"><a href="#其他的问题" class="headerlink" title="其他的问题"></a>其他的问题</h2><h3 id="Q：执行计划？"><a href="#Q：执行计划？" class="headerlink" title="Q：执行计划？"></a>Q：执行计划？</h3><p>我们一一来介绍,并说明每个属性有哪些可选值,以及每个可选值的意思。</p><ul><li><p>id: 表示查询中select操作表的顺序,按顺序从大到依次执行</p></li><li><p>select_type :<br>该表示选择的类型,常见可选值有: SIMPLE(简单的), PRIMARY(最外层) ，SUBQUERY(子查询中的第一个select查询)</p></li><li><p>type :<br>该属性表示访问类型,有很多种访问类型。<br>最常见的其中包括以下几种: ALL(全表扫描), index(索引扫描),range(范围扫描),ref (非唯一索引扫描),eq_ref(唯一索引扫描,),(const)常数引用, 访问速度依次由慢到快。</p><p>其中 : range(范围)常见与 between and …, 大于 and 小于这种情况。<br>提示 : 慢SQL是否走索引,走了什么索引,也就可以通过该属性查看了。</p></li><li><p>table :<br>表示输出行数据所在表</p></li><li><p>possible_keys :<br>顾名思义,该属性给出了,该查询语句,可能走的索引,(如某些字段上索引的名字)这里提供的只是参考,而不是实际走的索引,也就导致会有possible_Keys不为null,key为空的现象。</p></li><li><p>key : 显示MySQL实际使用的索引,其中就包括主键索引(PRIMARY),或者自建索引的名字。</p></li><li><p>key_len : 表示索引所使用的字节数，</p></li><li><p>ref :<br>连接匹配条件,如果走主键索引的话,该值为: const, 全表扫描的话,为null值</p></li><li><p>rows :<br>扫描行数,也就是说，需要扫描多少行,采能获取目标行数,一般情况下会大于返回行数。通常情况下,rows越小,效率越高, 大部分SQL优化，都是在减少这个值的大小。</p><p>注意: 理想情况下扫描的行数与实际返回行数理论上是一致的,但这种情况及其少,如关联查询,扫描的行数就会比返回行数大大增加)</p></li><li><p>Extra 这个属性非常重要,该属性中包括执行SQL时的真实情况信息,如上面所属,使用到的是”using where”，表示使用where筛选得到的值,常用的有: “Using temporary”: 使用临时表 “using filesort”: 使用文件排序</p></li></ul><p>Q：为什么要做主从同步？</p><ol><li>读写分离，使数据库能支撑更大的并发。</li><li>在主服务器上生成实时数据，而在从服务器上分析这些数据，从而提高主服务器的性能。</li><li>数据备份，保证数据的安全。</li></ol><p>Q: 用过processlist吗？<br>show processlist 或 show full processlist 可以查看当前 MySQL 是否有压力，正在运行的 sql，有没有慢 SQL 正在执行。</p><p>Q: 讲一下MySQL架构？<br>MySQL主要分为 Server 层和存储引擎层：<br> <strong>Server 层</strong>：主要包括连接器、查询缓存、分析器、优化器、执行器等，所有跨存储引擎的功能都 在这一层实现，比如存储过程、触发器、视图，函数等，还有一个通用的日志模块 binglog 日志模 块。<br> <strong>存储引擎</strong>： 主要负责数据的存储和读取。 server 层通过api与存储引擎进行通信。<br> Server 层基本组件<br> <strong>连接器</strong>：<br>当客户端连接 MySQL 时，server层会对其进行身份认证和权限校验。<br> <strong>查询缓存</strong>:<br> 执行查询语句的时候，会先查询缓存，先校验这个 sql 是否执行过，如果有缓存这个 sql，就会直接返回给客户端，如果没有命中，就会执行后续的操作。<br> <strong>分析器</strong>:<br> 没有命中缓存的话，SQL 语句就会经过分析器，主要分为两步，词法分析和语法分析，先 看 SQL 语句要做什么，再检查 SQL 语句语法是否正确。<br> <strong>优化器</strong>：<br>   优化器对查询进行优化，包括重写查询、决定表的读写顺序以及选择合适的索引等，生成 执行计划。<br>  <strong>执行器</strong>：<br>   首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限， 就会根据执行计划去调用引擎的接口，返回结果。</p><h3 id="Q：大表怎么优化？"><a href="#Q：大表怎么优化？" class="headerlink" title="Q：大表怎么优化？"></a>Q：大表怎么优化？</h3><p> 某个表有近千万数据，查询比较慢，如何优化？<br> 当MySQL单表记录数过大时，数据库的性能会明显下降，一些常见的优化措施如下： <strong>限定数据的范围</strong>。比如：用户在查询历史信息的时候，可以控制在一个月的时间范围内； <strong>读写分离</strong>： 经典的数据库拆分方案，主库负责写，从库负责读； 通过分库分表的方式进行优化，主要有<strong>垂直拆分</strong>和<strong>水平拆分</strong>。</p><h3 id="Q-一条语句的执行过程？"><a href="#Q-一条语句的执行过程？" class="headerlink" title="Q:一条语句的执行过程？"></a><strong>Q:一条语句的执行过程？</strong></h3><p><strong>查询语句：</strong></p><ul><li><p>先检查该语句是否有权限，如果没有权限，直接返回错误信息，如果有权限，在 MySQL8.0 版本以前，会先查询缓存，以这条 sql 语句为 key 在内存中查询是否有结果，如果有直接缓存，如果没有，执行下一步。</p></li><li><p>通过分析器进行词法分析，提取 sql 语句的关键元素，比如提取上面这个语句是查询 select，提取需要查询的表名为 tb_student，需要查询所有的列，查询条件是这个表的 id=’1’。然后判断这个 sql 语句是否有语法错误，比如关键词是否正确等等，如果检查没问题就执行下一步。</p></li><li><p>接下来就是优化器进行确定执行方案，上面的 sql 语句，可以有两种执行方案：</p><p><code>a.先查询学生表中姓名为“张三”的学生，然后判断是否年龄是</code> <code>18`</code>。`</p><p><code>b.先找出学生中年龄</code> <code>18</code> <code>岁的学生，然后再查询姓名为“张三”的学生。</code></p><p>那么优化器根据自己的优化[算法]进行选择执行效率最好的一个方案（优化器认为，有时候不一定最好）。那么确认了执行计划后就准备开始执行了。</p></li><li><p>进行权限校验，如果没有权限就会返回错误信息，如果有权限就会调用数据库引擎接口，返回引擎的执行结果。</p></li><li><p>更新语句执行过程</p></li><li><p>更新语句执行流程如下：分析器、权限校验、执行器、引擎、redo log(prepare 状态)、binlog、redo log(commit状态)</p><p>更新语句：</p><p>update user set name=’大彬’whereid = 1;</p><ol><li>先查询到 id 为1的记录，有缓存会使用缓存</li><li>拿到查询结果，将 name 更新为 大彬，然后调用引擎接口，写入更新数据，innodb 引擎将数据保存在内存中，同时记录 redo log，此时 redo log 进入 prepare 状态，然后告诉执行器，执行完成了，随时可以提交。</li><li>执行器收到通知后记录 binlog，然后调用引擎接口，提交 redo log 为提交状态。</li><li>更新完成。</li></ol></li></ul><h3 id="Q-：重做日志刷新到磁盘的策略有几种，有什么优劣？"><a href="#Q-：重做日志刷新到磁盘的策略有几种，有什么优劣？" class="headerlink" title="Q ：重做日志刷新到磁盘的策略有几种，有什么优劣？"></a>Q ：重做日志刷新到磁盘的策略有几种，有什么优劣？</h3><p>innodb_flush_log_at_trx_commit用来控制重做日志刷新到磁盘的策略。 n 该参数的默认值为1，表示事务提交时必须调用一次fsync操作。还可以设置该参数的值为0和2。 n 0表示事务提交时不进行写入重做日志操作，这个操作仅在master thread中完成，而在master thread中每1秒会进行 一次重做日志文件的fsync操作。 n 2表示事务提交时将重做日志写入重做日志文件，但仅写入文件系统的缓存中，不进行fsync操作。在这个设置下， 当MySQL数据库发生宕机而操作系统不发生宕机时，并不会导致事务的丢失。而当操作系统宕机时，重启数据库后 会丢失未从文件系统缓存刷新到重做日志文件那部分事务</p><p>举例： 插入50万条数。正确方法：innodb_flush_log_at_trx_commit = 1，将50万条数据在一个事务或者多个事务中分派提交，减少fsync次 数</p><h3 id="Q：purge-操作有什么作用-MySQL-篇-delete和update操作可能并不直接删除原有的数据。"><a href="#Q：purge-操作有什么作用-MySQL-篇-delete和update操作可能并不直接删除原有的数据。" class="headerlink" title="Q：purge 操作有什么作用 MySQL 篇 delete和update操作可能并不直接删除原有的数据。"></a>Q：purge 操作有什么作用 MySQL 篇 delete和update操作可能并不直接删除原有的数据。</h3><p>delete和update操作可能并不直接删除原有的数据。</p><p>例如， DELETE FROM t WHERE a=1; 表t上列a有聚集索引，列b上有辅助索引。对于上述的delete操作，仅是将主键列等于1的记录delete flag设 置为1，记录并没有被删除，即记录还是存在于B+树中。其次，对辅助索引上a等于1，b等于1的记录同样 没有做任何处理。而真正删除这行记录的操作其实被“延时”了，最终在purge操作中完成。 purge用于最终完成delete和update操作。这样设计是因为InnoDB存储引擎支持MVCC，所以记录不能在事 务提交时立即进行处理。这时其他事物可能正在引用这行，故InnoDB存储引擎需要保存记录之前的版本。 而是否可以删除该条记录通过purge来进行判断。若该行记录已不被任何其他事务引用，那么就可以进行真 正的delete操作。可见，purge操作是清理之前的delete和update操作，将上述操作“最终”完成。而实际执行 的操作为delete操作，清理之前行记录的版本。</p><h3 id="Q：说说主从复制的工作原理"><a href="#Q：说说主从复制的工作原理" class="headerlink" title="Q：说说主从复制的工作原理"></a>Q：说说主从复制的工作原理</h3><p>1）主服务器（master）把数据更改记录到二进制日志（binlog）中。</p><p> 2）从服务器（slave）把主服务器的二进制日志复制到自己的中继日志（relay log）中。</p><p> 3）从服务器重做中继日志中的日志，把更改应用到自己的数据库上，以达到数据的最终一致性</p><p>复制的工作原理并不复杂，其 实就是一个完全备份加上二进 制日志备份的还原。不同的是 这个二进制日志的还原操作基 本上实时在进行中。这里特别 需要注意的是，复制不是完全 实时地进行同步，而是异步实 时。这中间存在主从服务器之 间的执行延时，如果主服务器 的压力很大，则可能导致主从 服务器延时较大。</p><p>从服务器有2个线程，一个是I/O线程，负责读取主服务器的二进制日志，并将其保存为中继日志；另一个是SQL 线程，复制执行中继日志。</p><h3 id="Q：主从复制bin-log-日志有几种记录方式"><a href="#Q：主从复制bin-log-日志有几种记录方式" class="headerlink" title="Q：主从复制bin log 日志有几种记录方式"></a>Q：主从复制bin log 日志有几种记录方式</h3><p>变更操作将根据选定的格式类型写入 binlog 文 件，目前支持三种 format：</p><p> statement-based Replication（SBR） ：master将SQL statements语句写入binlog，slave 也将 statements 复制到本地执行；简单 而言，就是在 master 上执行的 SQL 变更语句，也同样在 slaves 上执行。SBR 模式是 MySQL 最早支持的类型，也是 Replication 默 认类型。</p><p>row-based Replication（RBR）： master将每行数据的变更信息写入binlog，每条 binlog 信息表示一行（row）数据的变更内容， 对于 slaves 而言将会复制 binlog 信息，然后单条或者批量执行变更操作；</p><p> mix-format Replication：混合模式，在这种模式下，master将根据根据存储引擎、变更操作类型等，从SBR、RBR中来选择更合 适的日志格式，默认为 SBR；具体选择那种格式，这取决于变更操作发生的存储引擎、statement 的类型以及特征，优先选择 “数 据一致性” 最好的方式（RBR），然后才兼顾性能，比如 statement 中含有 “不确定性” 方法或者批量变更，那么将选择 RBR 方式， 其他的将选择 SBR 以减少 binlog 的大小。我们建议使用 mix 方式。</p><p>SBR 和 RBR 都有各自的优缺点，对于大部分用而言，mix 方式在兼顾数据完整性和性能方面是最佳的选择</p><h3 id="Q：-主从复制有几种方式？"><a href="#Q：-主从复制有几种方式？" class="headerlink" title="Q： 主从复制有几种方式？"></a>Q： 主从复制有几种方式？</h3><p>异步复制</p><p>MySQL 默认的复制策 略，Master 处理事务过 程中，将其写入 Binlog 就会通知 Dump thread 线程处理，然后完成事 务的提交，不会关心是 否成功发送到任意一个 slave 中。</p><p>半同步复制</p><p>Master处理事务过程中，提交完事务后，必须 等至少一个 Slave 将收到的 binlog 写入 relay log 返回 ack 才能继续执行处理用户的事务。</p><p>增强半同步复制</p><p>强半同步和半同步不同是，等待 ACK 时 间不同 rpl_semi_sync_master_wait_point = AFTER_SYNC（唯一区别） 半同步的问题是因为等待 ACK 的点是 Commit 之后，此时 Master 已经完成数据 变更，用户已经可以看到最新数据，当 Binlog 还未同步到 Slave 时，发生主从切 换，那么此时从库是没有这个最新数据的， 用户又看到老数据。 增强半同步将等待 ACK 的点放在提交 Commit 之前，此时数据还未被提交，外 界看不到数据变更，此时如果发送主从切 换，新库依然还是老数据，不存在数据不 一致的问题。</p><h3 id="Q：Innodb-和-mylsam-存储引擎的区别"><a href="#Q：Innodb-和-mylsam-存储引擎的区别" class="headerlink" title="Q：Innodb 和 mylsam 存储引擎的区别"></a>Q：Innodb 和 mylsam 存储引擎的区别</h3><ol><li><p>是否支持行级锁 : MyISAM 只有表级锁 (table-level locking)，而 InnoDB 支持行级锁 (rowlevel locking) 和表级锁 , 默认为行级锁。</p></li><li><p>是否支持事务和崩溃后的安全恢复： MyISAM 强调的是性能，每次查询具有原子性 , 其执 行速度比 InnoDB 类型更快，但是不提供事务支持。但是 InnoDB 提供事务支持事务，外部 键等高级数据库功能。具有事务 (commit)、回滚 (rollback) 和崩溃修复能力 (crash recovery capabilities) 的事务安全 (transaction-safe (ACID compliant)) 型表。</p></li><li>是否支持外键： MyISAM 不支持，而 InnoDB 支持。</li><li>是否支持 MVCC：仅 InnoDB 支持。应对高并发事务 , MVCC 比单纯的加锁更高效 ;MVCC 只在 READ COMMITTED 和 REPEATABLE READ 两个隔离级别下工作 ;MVCC 可以使用乐观 (optimistic) 锁和悲观 (pessimistic) 锁来实现 ; 各数据库中 MVCC 实现并不统一</li></ol><p>来源：河北王校长</p><h3 id="手动用begin开启事务，然后执行update语句，再然后执行commit语句，那上面的update更新流程之前-哪些是update语句执行之后做的，哪些是commit语句执行之后做的"><a href="#手动用begin开启事务，然后执行update语句，再然后执行commit语句，那上面的update更新流程之前-哪些是update语句执行之后做的，哪些是commit语句执行之后做的" class="headerlink" title="手动用begin开启事务，然后执行update语句，再然后执行commit语句，那上面的update更新流程之前 哪些是update语句执行之后做的，哪些是commit语句执行之后做的?"></a><strong>手动用begin开启事务，然后执行update语句，再然后执行commit语句，那上面的update更新流程之前 哪些是update语句执行之后做的，哪些是commit语句执行之后做的?</strong></h3><blockquote><p>事实上，redo log在内存中有一个<code>redo log buffer</code>,binlog 也有一个<code>binlog cache</code>.所以在手动开启的事务中，你执行sql语句，其实是写到<code>redo log buffer</code>和<code>binlog cache</code>中去的(肯定不可能是直接写磁盘日志，一个是性能差一个是回滚的时候不可能去回滚磁盘日志吧)，然后当你执行commit的时候，首先要将redo log的提交状态由prepare改为commit状态，然后就要把<code>binlog cache</code>刷新到binlog日志(可能也只是flush到操作系统的page cache，这个就看你的mysql配置)，<code>redo log buffer</code>刷新到redo log 日志(刷新时机也是可以配置的一共有三种)。 如果你回滚的话，就只用把<code>binlog cache</code>和<code>redo log buffer</code>中的数据清除就行了。</p></blockquote><h3 id="在update过程中，mysql突然宕机，会发生什么情况"><a href="#在update过程中，mysql突然宕机，会发生什么情况" class="headerlink" title="在update过程中，mysql突然宕机，会发生什么情况?"></a>在update过程中，mysql突然宕机，会发生什么情况?</h3><ol><li>如果redolog写入了，处于prepare状态，binlog还没写入，那么宕机重启后，redolog中的这个事务就直接回滚了。</li><li>如果redolog写入了，binlog也写入了，但redolog还没有更新为commit状态，那么宕机重启以后，mysql会去检查对应事务在binlog中是否完整。如果是，就提交事务；如果不是，就回滚事务。 (redolog处于prepare状态，binlog完整启动时就提交事务，为啥要这么设计? 主要是因为binlog写入了，那么就会被从库或者用这个binlog恢复出来的库使用，为了数据一致性就采用了这个策略)，redo log和binlog是通过xid这个字段关联起来的。</li></ol><p>作者：暂停丶算不算放弃<br>链接：<a href="https://www.nowcoder.com/discuss/810539?source_id=profile_create_nctrack&amp;channel=-1" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/810539?source_id=profile_create_nctrack&amp;channel=-1</a><br>来源：牛客网</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;多数来自王校长MYSQL系列&lt;br&gt;笔记优点：从调优角度去挖知识&lt;/p&gt;
&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="中间件" scheme="https://missionodd.github.io/categories/技术/中间件/"/>
    
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="mysql" scheme="https://missionodd.github.io/tags/mysql/"/>
    
    <category term="优化" scheme="https://missionodd.github.io/tags/优化/"/>
    
  </entry>
  
  <entry>
    <title>面经 | 结合业务，步步深入，P8架构师二面摘录笔记</title>
    <link href="https://missionodd.github.io/2022/02/12/p8-interview-skills-2/"/>
    <id>https://missionodd.github.io/2022/02/12/p8-interview-skills-2/</id>
    <published>2022-02-12T07:50:37.000Z</published>
    <updated>2022-02-28T02:22:02.866Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6e9e70a41feb4d37023116c731924cbc770114a763dedfbeb79eb62bc55b7ba5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="文章私密：Please enter the password to read.">文章私密：Please enter the password to read.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密的文章,请联系博主获得阅读权限.&lt;/br&gt;</summary>
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="面经" scheme="https://missionodd.github.io/categories/技术/面经/"/>
    
    
    <category term="面经" scheme="https://missionodd.github.io/tags/面经/"/>
    
    <category term="java" scheme="https://missionodd.github.io/tags/java/"/>
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 | 网络知识问答梳理</title>
    <link href="https://missionodd.github.io/2022/02/10/network/"/>
    <id>https://missionodd.github.io/2022/02/10/network/</id>
    <published>2022-02-10T05:50:37.000Z</published>
    <updated>2022-03-17T14:30:03.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p><strong>序列化就是将对象转换成二进制数据的过程，以方便传输或存储。而反序列就是将二进制转换为对象的过程。</strong><br>比如 网络传输 必须是二进制，但调用方请求的出入参数都是对象。就需要转换过程，如JSON对象和二进制互转，这个过程就是序列化和反序列化。<br>JDK 原生序列化。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>无状态，双向传输基于TCP/IP，灵活，明文传输不安全</p><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>1xx 提示信息 2xx 成功 3xx 重定向 4xx客户端请求错误 5xx服务器错误<br>302 重定向<br>401 权限不足，需要授权<br>403  资源拒绝访问，需要登录<br>502 网关错误<br>503 超时</p><h4 id="常见字段"><a href="#常见字段" class="headerlink" title="常见字段"></a>常见字段</h4><p>Host  指定服务器域名<br>Content-Length 长度<br>Connection：keep-alive  长连接</p><h4 id="HTTP1-1"><a href="#HTTP1-1" class="headerlink" title="HTTP1.1"></a>HTTP1.1</h4><p>早起1.0 每次请求都要一次TCP三次握手；<br>1.为了解决该问题，1.1 提出了长连接，<br>通过header 配置Connection：keep-alive ，建立CS持久连接，<br>减少建立和断开的额外开销；<br>2.长连接引入，使得管道pipeline网络传输成为可能，客户端可实现连续发请求，无需等待响应的阻塞其他的请求。但是，服务器依然按照顺序回应，必须一个一个处理回应，如果前面回应慢，引起 队头阻塞。</p><p>1.1性能一般般，需要HTTP的优化。</p><h4 id="HTTPS-解决HTTP什么问题？"><a href="#HTTPS-解决HTTP什么问题？" class="headerlink" title="HTTPS 解决HTTP什么问题？"></a>HTTPS 解决HTTP什么问题？</h4><p>解决明文传输的问题，HTTPS 在HTTP与TCP层之间加入 SSL/TLS 协议。一是把信息加密，解决窃听风险，二是校验机制，解决篡改信息风险，三是身份认证，解决冒充网站风险。</p><p>具体来说，HTTPS是 如何解决呢？<br>一个是混合加密，采用对称加密和非对称加密结合，保证信息密文<br>对称加密：只有一个密钥，运算快，密钥保密，无法安全密钥交换。<br>非对称加密：两个密钥，公钥任意分发，私钥保密，能交换密钥但速度慢。</p><p>建立通信前，非对称；通信过程，对称</p><p>二是摘要算法，用于签名，为数据生成唯一的指纹，校验数据完整性，防篡改。<br>摘要算法一般是不可逆的 ，散列函数与md5与sha系列。客户端在发送前，会通过摘要算法对明文计算，算出一个摘要指纹，把【摘要+明文】加密；在发送后，服务器解密得到【摘要+明文】，用同一个摘要算法对明文计算，算出摘要，并比对传过来的摘要是否想等。</p><p>三是数字证书<br>客户端先向服务器索取公钥，然后用公钥机密，传入服务器给私钥解密。<br>虽然摘要算法保证了数据不被篡改，但是，如何保证公钥不被篡改？<br>这个需要第三方权威机构CA，颁发数字证书，将服务器公钥放在数字证书。只要证书可信，公钥就是可信。<br>CA机构是分级的，树型，最顶是根CA，必须相信。<br>如何申请？<br>我们首先要知道，CA有自己的私钥，每个客户端都内置<br>已信任的CA的公钥。<br>1，服务器吧自己公钥注册给CA，<br>2，CA用自己私钥给公钥签名并颁发数字帐户上，<br>3，第一次客户端请求服务器，会拿到数字证书，会使用事先已内置浏览器或OS的CA公钥，校验数字证书真实性。<br>4，认证证书后，就获取服务器的公钥，加密报文数据，给服务私钥解密。</p><p>Q：HTTPS是如何建立连接的？期间交互了什么？<br>SSL/TLS 协议流程：<br>基本流程：C向S索取公钥，双方协商生成会话密钥，双方密钥通信。<br>前两步就是握手阶段。<br>详细流程：<br>握手四次通信：<br>1，ClientHello：客户端发送加密通信请求，这一步，客户端主要向服务端发送：TLS版本，客户端随机数（用于生产会话密钥），支持的加密算法列表</p><p>2， SeverHello，服务器回应：1，确认TLS版本，若浏览器不支持，关闭加密通信；2，服务端随机数（用于生产会话密钥），3，确认加密算法列表，4，数字证书。</p><p>3，客户端回应<br>首先通过客户端CA公钥校验证书，取出公钥，加密报文，向服务器发送：随机数（会被服务器公钥加密），加密通信算法改变通知（表示之后都是会话密钥通信），握手结束通知（表示客户端握手阶段结束，这里还会把数据做个摘要，发送给服务端校验）</p><ol start="4"><li>服务器的最后响应<br>这个过程产生3个随机数，通过加密算法的协商后，计算出本次通信的会话密钥。然后，向客户端发送最后端消息：<br>1，加密算法改变通知（之后都是会话密钥通信）；<br>2，服务端握手结束通知，表示服务端握手已结束（这里同时会把数据做个摘要，给客户端校验）。</li></ol><p>接下来就是，用会话密钥加密的HTTP请求。</p><h4 id="HTTP1-1-HTTP2-0-HTTP3-演变；"><a href="#HTTP1-1-HTTP2-0-HTTP3-演变；" class="headerlink" title="HTTP1.1 /HTTP2.0/HTTP3 演变；"></a>HTTP1.1 /HTTP2.0/HTTP3 演变；</h4><p>首先，将HTTP1.1 相比HTTP1.0 增加 TCP长连接，支持管道传输，节省了频繁建立和断开TCP的性能开销，减少多次请求等待的响应时间。<br>但是，有1.1的问题有三个：<br>一是数据太大，只压缩body，占用带宽；<br>二是队头阻塞，服务器顺序响应，一旦响应过慢，导致后续阻塞。<br>三是单向请求，不适应服务器推送场景。</p><p>那么，针对这些问题，HTTP2 进行改进：<br>一是头部压缩，如果头相同或相似，协议会自己消除重复，这是HPACK算法，实现原理是：客户端和服务端同时维护一张头表信息，所有字段都会存入这个表，生成一个索引号，只传输索引号即可，提高速度；<br>二是纯二进制格式，1.1 只是文本，头和主体用空格隔开，2.0头帧和数据帧都是二进制，也是提高传输速度。<br>三是数据流发送，不再像1.1顺序发送顺序响应，而是对数据包做标记，指出它属于哪个回应，同一连接发送连续数据包，每个请求或回应的所有数据包，统称为stream流。</p><p>三是数据流<br>每个数据流都标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数， 服务器发出的数据流编号为偶数</p><p>客户端还可以<strong>指定数据流的优先级</strong>。优先级高的请求，服务器就先响应该请求。</p><p>四是多路复用<br>http2在一个连接里并发处理请求或回应，不再是按照顺序对应，不需排队，就没有队头阻塞问题。</p><p>五是服务器推送<br>增加新功能，不再是请求-答应模式，而是服务器主动推送消息。<br>比如，初始化HTML是，可以主动推送静态JS，CS到客户端，减少延迟等待。就是Server Push，可减少了多个RTT。</p><p>http2 缺陷：<br>多个HTTP请求复用1个TCP连接，下层的TCP协议不知道有多少个HTTP请求；<br>一旦丢包，触发TCP重传机制，此时，HTTP必须等待丢的包被重新传回来，这样阻塞了所有HTTP请求。</p><p>HTTP3 改成了UDP！<br>UDP不管顺序，不管丢包，不会出现队头阻塞，也不会出现丢包全部重传问题。</p><p>UDP不可靠，那么怎么实现类似TCP可靠呢？<br>QUIC协议保证。当某个流发生丢包，会阻塞这个流，其他流不受影响。然后是TLS1.3 把6次TCP+TLS握手合并为3次QUIC。<br>QUIC是一个UDP之上的伪TCP+TLS+HTTP2的多路复用协议。</p><h2 id="Q：一次请求发生了什么？"><a href="#Q：一次请求发生了什么？" class="headerlink" title="Q：一次请求发生了什么？"></a>Q：一次请求发生了什么？</h2><p>一是对URL解析，来确定是发送给WEB服务器请求。<br>包括协议头，服务器host，uri路径。<br>二是查询真真实IP，使用DNS服务器解析。在发送消息前，委托系统查询DNS服务器域名的真实IP。DNS服务器具有树状的层级，根域服务器保存所有域名，顶级域名服务器更少，只保存com或cn后缀的，权威域名保存更少，同时服务器数量也更多。<br>解析过程：客户端发出DNS请求，询问IP，在本地DNS服务器找，如果有自己返回IP，如果没有，委托根域名，根域名委托对应的顶级域名服务器，顶级域名服务器委托对应的权威域名服务器。权威域名服务器找到IP，告诉本地DNS缓存。</p><p>三是协议栈 封装<br><figure class="image-box">                <img src="3786F82F-6457-4550-A5A9-F1596205ABCA_20220228150247.png?v=1&type=image&token=V1:oAbMgcxeh4dd0mWA7fwzOxMQAo_vAQ8ncn8Cu-rEqrw" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><br>通过DNS获取IP后，就可以把HTTP的传输工作交给OS的协议栈。<br>协议栈的内部分为几部分，分别承担不同工作，上下关系有一定规则，上面会向下委托公，下面收到委托并执行。</p><p>应用程序通过调用socket 库，来委托协议栈工作，协议栈的上方分别是收发数据的TCP和UDP协议，下方是IP协议控制网络包的收发操作，在互联网上传数据时，数据会被切成一块块的网络包，而将网络包发送给对方的操作就是有IP负责。</p><p>IP包括ICMP协议 和ARP协议。<br>ICMP时告知网络包传输过程中产生的错误和各种控制信息。<br>ARP 是根据IP地址查询相应的以太网MAC地址。</p><p>IP下面是网卡驱动程序，负责控制网卡硬件。最下是网卡硬件，真正的网络信号的收发操作</p><p>四，细看，可靠传输TCP<br>先讲讲TCP，序号解决包乱序，校验和解决完整性，窗口大小声明窗口大小，解决两端流量处理能力的控制。此外，拥塞控制，控制发送的速度。</p><p>在 HTTP 传输数据之前，首先需要 TCP 建立连接，TCP 连接的建立，通常称为<strong>三次握手</strong>。</p><p>这个所谓的「连接」，只是双方计算机里维护一个状态机，在连接建立的过程中，双方的状态变化时序图就像这样。</p><ul><li><p>一开始，客户端和服务端都处于  <code>CLOSED</code>  状态。先是服务端主动监听某个端口，处于  <code>LISTEN</code>  状态。</p></li><li><p>然后客户端主动发起连接  <code>SYN</code>，之后处于  <code>SYN-SENT</code>  状态。</p></li><li><p>服务端收到发起的连接，返回  <code>SYN</code>，并且  <code>ACK</code>  客户端的  <code>SYN</code>，之后处于  <code>SYN-RCVD</code>  状态。</p></li><li><p>客户端收到服务端发送的  <code>SYN</code>  和  <code>ACK</code>  之后，发送  <code>ACK</code>  的  <code>ACK</code>，之后处于  <code>ESTABLISHED</code>  状态，因为它一发一收成功了。</p></li><li><p>服务端收到  <code>ACK</code>  的  <code>ACK</code>  之后，处于  <code>ESTABLISHED</code>  状态，因为它也一发一收了。</p></li></ul><p>所以三次握手目的是<strong>保证双方都有发送和接收的能力</strong>。</p><p>查看连接命令： netstat - napt 命令</p><h3 id="TCP-分割数据"><a href="#TCP-分割数据" class="headerlink" title="TCP 分割数据"></a>TCP 分割数据</h3><p>如果HTTP消息过长，超过了MSS的长度。<br>TCP 就要把HTTP的数据拆解一块块的数据发送，而不是一次性发送。</p><ul><li><code>MTU</code>：一个网络包的最大长度，以太网中一般为  <code>1500</code>  字节。</li></ul><ul><li><code>MSS</code>：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。</li></ul><p>数据会被拆为MSS长度的单位，并加上TCP头，然后交给IP模块发送数据。</p><p>TCP会有两个端口，一个是浏览器监听 的短裤，随机，一个是服务器监听的80或443</p><figure class="image-box">                <img src="1ADA371D-52C5-44D6-9231-F5087EA7028A_20220228214150.png?v=1&type=image&token=V1:W1SnXQS3hWpVDWnHs53IsS8_HVJPDaPjIDjB3kjENfE" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><p>双方建立连接后，TCP报文的数据部分就是存放HTTP头+数据，组装好TCP报文之后，要交给下面的网络层处理</p><h3 id="远程定位-—-IP"><a href="#远程定位-—-IP" class="headerlink" title="远程定位 —- IP"></a>远程定位 —- IP</h3><p>TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托 IP 模块将数据封装成<strong>网络包</strong>发送给通信对象。</p><blockquote><p>假设客户端有多个网卡，就会有多个 IP 地址，那 IP 头部的源地址应该选择哪个 IP 呢？</p></blockquote><p>当存在多个网卡时，在填写源地址 IP 时，就需要判断到底应该填写哪个地址。这个判断相当于在多块网卡中判断应该使用哪个一块网卡来发送包。</p><p>这个时候就需要根据<strong>路由表</strong>规则，来判断哪一个网卡作为源地址 IP。</p><h3 id="两点传输-—-MAC"><a href="#两点传输-—-MAC" class="headerlink" title="两点传输 — MAC"></a>两点传输 — MAC</h3><p>在 MAC 包头里需要<strong>发送方 MAC 地址</strong>和<strong>接收方目标 MAC 地址</strong>，用于<strong>两点之间的传输</strong>。</p><p>一般在 TCP/IP 通信里，MAC 包头的<strong>协议类型</strong>只使用：</p><ul><li><p><code>0800</code>  ：IP 协议</p></li><li><p><code>0806</code>  ：ARP 协议</p></li></ul><p>先得搞清楚应该把包发给谁，这个只要查一下<strong>路由表</strong>就知道了。在路由表中找到相匹配的条目，然后把包发给  <code>Gateway</code>  列中的 IP 地址就可以了。</p><blockquote><p>既然知道要发给谁，按如何获取对方的 MAC 地址呢？</p></blockquote><p>不知道对方 MAC 地址？不知道就喊呗。</p><p>此时就需要  <code>ARP</code>  协议帮我们找到路由器的 MAC 地址。</p><ul><li><p>先查询 ARP 缓存，如果其中已经保存了对方的 MAC 地址，就不需要发送 ARP 查询，直接使用 ARP 缓存中的地址。</p></li><li><p>而当 ARP 缓存中不存在对方 MAC 地址时，则发送 ARP 广播查询。如果对方和自己处于同一个子网中，那么就可以得到对方回应的 MAC 地址。</p><figure class="image-box">                <img src="A2E4BDD3-A5A6-44FA-8DFB-1E15722CE355_20220228221916.png?v=1&type=image&token=V1:RuUiMFuU-xJwTZUlj7ESjyJf8vlHyb066kLrMrfYN4s" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><h4 id="出口—-网卡"><a href="#出口—-网卡" class="headerlink" title="出口— 网卡"></a>出口— 网卡</h4><p>IP 生成的网络包只是存放在内存中的一串二进制数字信息，没有办法直接发送给对方。因此，我们需要将<strong>数字信息转换为电信号</strong>，才能在网线上传输，也就是说，这才是真正的数据发送过程。<br>负责执行这一操作的是<strong>网卡</strong>，要控制网卡还需要靠<strong>网卡驱动程序</strong>。</p></li></ul><p>网卡驱动从 IP 模块获取到包之后，会将其<strong>复制</strong>到网卡内的缓存区中，接着会其<strong>开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列FCS</strong>。</p><h4 id="送别者—-交换机"><a href="#送别者—-交换机" class="headerlink" title="送别者—-交换机"></a>送别者—-交换机</h4><p>交换机的设计是将网络包<strong>原样</strong>转发到目的地。交换机工作在 MAC 层，也称为<strong>二层网络设备</strong>。</p><p>首先，电信号到达网线接口，交换机里的模块进行接收，接下来交换机里的模块将电信号转换为数字信号。</p><p>然后通过包末尾的 <code>FCS</code> 校验错误，如果没问题则放到缓冲区。这部分操作基本和计算机的网卡相同，但交换机的工作方式和网卡不同。</p><p>计算机的网卡本身具有 MAC 地址，并通过核对收到的包的接收方 MAC 地址判断是不是发给自己的，如果不是发给自己的则丢弃；相对地，交换机的端口不核对接收方 MAC 地址，而是直接接收所有的包并存放到缓冲区中。因此，和网卡不同，<strong>交换机的端口不具有 MAC 地址</strong>。</p><p>将包存入缓冲区后，接下来需要查询一下这个包的接收方 MAC 地址是否已经在 MAC 地址表中有记录了。</p><p>交换机的 MAC 地址表主要包含两个信息：</p><ul><li><p>一个是设备的 MAC 地址，</p></li><li><p>另一个是该设备连接在交换机的哪个端口上。</p></li></ul><p><strong>交换机根据 MAC 地址表查找 MAC 地址，然后将信号发送到相应的端口</strong>。</p><p>当 MAC 地址表找不到指定的 MAC 地址会怎么样？</p><p>这种情况下，交换机无法判断应该把包转发到哪个端口，只能将包转发到除了源端口之外的所有端口上，无论该设备连接在哪个端口上都能收到这个包。<strong>只有相应的接收者才接收包，而其他设备则会忽略这个包</strong>。</p><h4 id="出境大门-—-路由器"><a href="#出境大门-—-路由器" class="headerlink" title="出境大门 — 路由器"></a>出境大门 — 路由器</h4><p>路由器是基于IP设计，俗称三层网路设备，各个端口都有MAC地址和IP地址；<br>而交换机是基于以太网设计，俗称二层网络设备，端口不具备MAC地址。</p><p>当转发包时，首先路由器端口会接收发给自己的以太网包，然后<strong>路由表</strong>查询转发目标，再由相应的端口作为发送方将以太网包发送出去。</p><p>首先，电信号到达网线接口部分，路由器中的模块会将电信号转成数字信号，然后通过包末尾的 <code>FCS</code> 进行错误校验。</p><p>如果没问题则检查 MAC 头部中的<strong>接收方 MAC 地址</strong>，看看是不是发给自己的包，如果是就放到接收缓冲区中，否则就丢弃这个包。</p><p>完成包接收操作之后，路由器就会<strong>去掉</strong>包开头的 MAC 头部。</p><p><strong>MAC 头部的作用就是将包送达路由器</strong>，其中的接收方 MAC 地址就是路由器端口的 MAC 地址。因此，当包到达路由器之后，MAC 头部的任务就完成了，于是 MAC 头部就会<strong>被丢弃</strong>。</p><p>接下来，路由器会根据 MAC 头部后方的 <code>IP</code> 头部中的内容进行包的转发操作。</p><p>接下来就会进入包的<strong>发送操作</strong>。</p><p>首先，我们需要根据<strong>路由表的网关列</strong>判断对方的地址。</p><ul><li><p>如果网关是一个 IP 地址，则这个IP 地址就是我们要转发到的目标地址，<strong>还未抵达终点</strong>，还需继续需要路由器转发。</p></li><li><p>如果网关为空，则 IP 头部中的接收方 IP 地址就是要转发到的目标地址，也是就终于找到 IP 包头里的目标地址了，说明<strong>已抵达终点</strong>。</p></li></ul><p>知道对方的 IP 地址之后，接下来需要通过  <code>ARP</code>  协议根据 IP 地址查询 MAC 地址，并将查询的结果作为接收方 MAC 地址。</p><p>路由器也有 ARP 缓存，因此首先会在 ARP 缓存中查询，如果找不到则发送 ARP 查询请求。</p><p>网络包完成后，接下来会将其转换成电信号并通过端口发送出去。这一步的工作过程和计算机也是相同的。</p><p>发送出去的网络包会通过<strong>交换机</strong>（城门）到达下一个路由器。由于接收方 MAC 地址就是下一个路由器的地址，所以交换机会根据这一地址将包传输到下一个路由器。（服务器内网）</p><p>接下来，下一个路由器会将包转发给再下一个路由器，经过层层转发之后，网络包就到达了最终的目的地。</p><p>不知你发现了没有，在网络包传输的过程中，<strong>源 IP 和目标 IP 始终是不会变的，一直变化的是 MAC 地址</strong>，因为需要 MAC 地址在以太网内进行<strong>两个设备</strong>之间的包传输。</p><h3 id="互相扒皮—-服务器-与-客户端"><a href="#互相扒皮—-服务器-与-客户端" class="headerlink" title="互相扒皮— 服务器 与 客户端"></a>互相扒皮— 服务器 与 客户端</h3><p>应用层 HTTP<br>传输层 TCP<br>网络层 IP<br>链路层 以太网MAC<br>从高到低封装，从低到高拆解。</p><p>当 扒开 TCP 的头，里面有序列号，需要看一看这个序列包是不是我想要的，如果是就放入缓存中然后返回一个 ACK，如果不是就丢弃。TCP头部里面还有端口号， HTTP 的服务器正在监听这个端口号。</p><p>于是，服务器自然就知道是 HTTP 进程想要这个包，于是就将包发给 HTTP 进程。</p><p>———————<br>服务器的 HTTP 进程看到，原来这个请求是要访问一个页面，于是就把这个网页封装在 HTTP 响应报文里。</p><p>HTTP 响应报文也需要穿上 TCP、IP、MAC 头部，不过这次是源地址是服务器 IP 地址，目的地址是客户端 IP 地址。</p><p>穿好头部衣服后，从网卡出去，交由交换机转发到出城的路由器，路由器就把响应数据包发到了下一个路由器，就这样跳啊跳。</p><p>最后跳到了客户端的城门把手的路由器，路由器扒开 IP 头部发现是要找城内的人，于是把包发给了城内的交换机，再由交换机转发到客户端。</p><p>客户端收到了服务器的响应数据包后，同样也非常的高兴，客户能拆快递了！</p><h3 id="扩展-ping原理-ICMP协议"><a href="#扩展-ping原理-ICMP协议" class="headerlink" title="扩展 ping原理 ICMP协议"></a>扩展 ping原理 ICMP协议</h3><p>也就是<strong>互联网控制报文协议</strong>，<code>ICMP</code> 主要的功能包括：<strong>确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等。</strong></p><h2 id="细说-TCP"><a href="#细说-TCP" class="headerlink" title="细说 TCP"></a>细说 TCP</h2><p>首先，介绍TCP 头部格式。<br><figure class="image-box">                <img src="797DA83E-0574-4D7F-82CC-3440F36357D5_20220228224408.png?v=1&type=image&token=V1:XWMOSp193u83j6GshiGPmz4BIwQWv6PlX8pyz8iT894" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure></p><p>序列号：在建立连接时由计算机生成的随机数作为初始值，通过SYN包传输给接收端，每一次累加该数据字节的大小，解决乱序问题。</p><p>确认应答号：指下一次期望收到的数据的序列号，用来解决不丢包问题。</p><p>控制位：确认答应，异常断开，chu，结束</p><h3 id="Q：为什么需要-TCP-协议？TCP-工作在哪一层？"><a href="#Q：为什么需要-TCP-协议？TCP-工作在哪一层？" class="headerlink" title="Q：为什么需要 TCP 协议？TCP 工作在哪一层？"></a>Q：为什么需要 TCP 协议？TCP 工作在哪一层？</h3><figure class="image-box">                <img src="858E392E-2252-4CEA-A6B2-87A10AC1A95D_20220228225120.png?v=1&type=image&token=V1:OVmGFxz0wgPu7a6SeFkKHnHEzk7UBhhYa7LWsxI8GDs" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><p>因为 TCP 是一个工作在<strong>传输层</strong>的<strong>可靠</strong>数据传输的服务，它能确保接收端接收的网络包是<strong>无损坏、无间隔、非冗余和按序的。</strong></p><p><code>IP</code> 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。</p><h3 id="Q：什么是-TCP-？"><a href="#Q：什么是-TCP-？" class="headerlink" title="Q：什么是 TCP ？"></a>Q：什么是 TCP ？</h3><p>TCP 是<strong>面向连接的、可靠的、基于字节流</strong>的传输层通信协议。</p><ul><li><p><strong>面向连接</strong>：一定是「一对一」才能连接，不能像 UDP 协议 可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；</p></li><li><p><strong>可靠的</strong>：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；</p></li><li><p><strong>字节流</strong>：消息是「没有边界」的，所以无论我们消息有多大都可以进行传输。并且消息是「有序的」，当「前一个」消息没有收到的时候，即使它先收到了后面的字节已经收到，那么也不能扔给应用层去处理，同时对「重复」的报文会自动丢弃。</p></li></ul><h3 id="Q：什么是TCP连接？"><a href="#Q：什么是TCP连接？" class="headerlink" title="Q：什么是TCP连接？"></a>Q：什么是TCP连接？</h3><p>简单来说就是，<strong>用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括Socket、序列号和窗口大小称为连接。</strong></p><h3 id="Q：如何唯一确定一个TCP连接？"><a href="#Q：如何唯一确定一个TCP连接？" class="headerlink" title="Q：如何唯一确定一个TCP连接？"></a>Q：如何唯一确定一个TCP连接？</h3><p>TCP 四元组可以唯一的确定一个连接，四元组包括如下：</p><ul><li><p>源地址</p></li><li><p>源端口</p></li><li><p>目的地址</p></li><li><p>目的端口</p></li></ul><h3 id="Q：有一个-IP-的服务器监听了一个端口，它的-TCP-的最大连接数是多少？"><a href="#Q：有一个-IP-的服务器监听了一个端口，它的-TCP-的最大连接数是多少？" class="headerlink" title="Q：有一个 IP 的服务器监听了一个端口，它的 TCP 的最大连接数是多少？"></a>Q：有一个 IP 的服务器监听了一个端口，它的 TCP 的最大连接数是多少？</h3><p>服务器通常固定在某个本地端口上监听，等待客户端的连接请求。</p><p>因此，客户端 IP 和 端口是可变的，其理论值计算公式如下:<br>最大TCP连接数 = 客户端IP数 x 客户端端口数<br>对于IPv4，2的32次方IP ，2的16次方端口，最大TCP连接数是2的48次方。</p><p>这是理论值，实际上：<br>Linux 文件描述符限制，socket是fd文件，打开句柄 1024，这个可调。<br>另一个是内存限制，每个TCP连接占用一定的内存。</p><h3 id="Q：UDP和TCP区别与场景？"><a href="#Q：UDP和TCP区别与场景？" class="headerlink" title="Q：UDP和TCP区别与场景？"></a>Q：UDP和TCP区别与场景？</h3><p>UDP 不提供控制机制，利用IP提高的无连接通信<br>UDP 协议简单，头部8字节，分别是 16位源端口，16位目标端口，16位包长度，16位校验和</p><p>区别：<br>1，连接<br>TCP面向连接，传输数据前先建立连接<br>UDP无连接<br>2，服务对象<br>TCP连接一对一<br>UDP一对一，一对多，多对多广播<br>3，可靠性<br>TCP可靠，校验和保证无差错，确认答应号保证不丢失，序号保证不重复，顺序性，<br>UDP不可靠，只是尽最大努力交付<br>4，拥塞控制，流量控制<br>TCP拥塞控制和流量控制，保证数据传输多安全性；<br>UPD即使网络非常堵塞，也不影响UDP发送速率<br>5，首部开销<br>TCP首部长度较长，不包括【选项】，20字节；<br>UDP首部只有8字节</p><p>6，应用场景<br>TCP：FTP文件传输 HTTP/HTTPS<br>UDP：DNS，视频，音频，广播通信</p><h3 id="Q：为什么-UDP-头部没有「首部长度」字段，而-TCP-头部有「首部长度」字段呢？"><a href="#Q：为什么-UDP-头部没有「首部长度」字段，而-TCP-头部有「首部长度」字段呢？" class="headerlink" title="Q：为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？"></a>Q：为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？</h3><p>原因是 TCP 有<strong>可变长</strong>的「选项」字段，而 UDP 头部长度则是<strong>不会变化</strong>的，无需多一个字段去记录 UDP 的首部长度。</p><p>选项 常见：MSS最长报文大小</p><h3 id="Q：为什么是3次握手？不是两次，四次？"><a href="#Q：为什么是3次握手？不是两次，四次？" class="headerlink" title="Q：为什么是3次握手？不是两次，四次？"></a>Q：为什么是3次握手？不是两次，四次？</h3><p>相信大家比较常回答的是：“因为三次握手才能保证双方具有接收和发送的能力。”但是，回答过于片面。<br>首先，了解TCP连接的连接概念。</p><ul><li>用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括<strong>Socket、序列号和窗口大小</strong>称为连接。</li></ul><p>那么，重要的是<strong>为什么三次握手才可以初始化Socket、序列号和窗口大小并建立 TCP 连接</strong></p><p>接下来，我从3个方面回答：</p><ul><li><p>三次握手才可以阻止历史重复连接的初始化（主要原因）</p></li><li><p>三次握手才可以同步双方的初始序列号</p></li><li><p>三次握手才可以避免资源浪费</p></li></ul><p>原因一：避免历史连接<br>简单来说，三次握手的<strong>首要原因是为了防止旧的重复连接初始化造成混乱</strong>。</p><p>如果旧SYN报文比当前SYN报文先抵达到服务端，服务端会返回SYN+ACK，客户端根据自身上下问题，判断是旧连接，那么客户端发送RST报文，表示中断这一次连接。舍弃之前的，重新开始新的SYN。</p><p>如果是两次握手，服务端就不能判断出历史连接而中断。</p><ul><li><p>如果是历史连接（序列号过期或超时），则第三次握手发送的报文是  <code>RST</code>  报文，以此中止历史连接；</p></li><li><p>如果不是历史连接，则第三次发送的报文是  <code>ACK</code>  报文，通信双方就会成功建立连接；</p></li></ul><p>原因二：同步双方初始序列号<br>TCP协议双方，都必须维护一个序列号，序列号是可靠传输的关键：可以去重，可以顺序接收，可以表示哪些数据包已经被对方接收。</p><p>第一次客户端发送初始序列号SYN，服务端需要ACK回应，同时发生自己的出生序列号SYN，客户端当然也要回应接收。<br>这样来回，次确保双方初始序列号被对方知晓。</p><p>原因三：避免资源浪费</p><p>如果只有两次握手，服务器ACK不知道客户端是否已经接收，这就导致服务端每次收到SYN就主动建立一个连接，这就有个问题，如果客户端SYN传输被网络阻塞，而引起了超时重发，之后阻塞的SYN也终于发送到服务端，意味着服务端接收了2次相同的SYN，服务器会重复处理请求，造成重复分配资源。</p><p>小结：三次握手是为了防止历史连接的 建立，帮助双方初始化序列号，减少重复资源的开销。<br>两次握手无法做到以上这些，四次握手显得多余。</p><h3 id="Q：为什么客户端和服务端的初始序列号ISN不相同？"><a href="#Q：为什么客户端和服务端的初始序列号ISN不相同？" class="headerlink" title="Q：为什么客户端和服务端的初始序列号ISN不相同？"></a>Q：为什么客户端和服务端的初始序列号ISN不相同？</h3><p>报文延迟，复制重发，丢失等造成不同连接之间互相影响，客户端和服务端初始化序列号不同，是为了兼容这些问题环境。</p><h3 id="Q：IP层会分片，TCP为什么要MSS？"><a href="#Q：IP层会分片，TCP为什么要MSS？" class="headerlink" title="Q：IP层会分片，TCP为什么要MSS？"></a>Q：IP层会分片，TCP为什么要MSS？</h3><p>首先介绍MTU 和 MSS。<br>MTU： 一个网络包的最大长度，以太网中一般位1500字节。<br>MSS：一个减去IP 和TCP 头部的网络包数据的最大长度</p><p>如果仅TCP报文交给IP分片，IP层超过一个MTU大小的数据发送，就要进行分片，把数据分片成若干片，保证每一个分片都小于MTU。分片后，由目标主机的IP层重新组装，再交给TCP传输层。</p><p>这里存在一个隐患，如果一个IP分片丢失，就需要整个IP报文的所有分片重传，因为IP层没有超时重传机制，那么，它由传输层TCP来负责超时和重传，接收方发现缺失，不会响应ACK，而是等对方超时后，重发整个TCO报文。</p><p>这样，非常无效率。</p><p>所以，TCP建立连接时，双方协商MSS值，当TCP层发现数据超过MSS时，就会先分片，他肯定不会大于MTU。IP自然不用分片。</p><p>经过TCP层分片后，如果TCP分片丢失，超时重发只是发送一个MSS单位的分片，大大增加重传的效率？</p><h3 id="Q：SYN攻击是什么？如何避免？"><a href="#Q：SYN攻击是什么？如何避免？" class="headerlink" title="Q：SYN攻击是什么？如何避免？"></a>Q：SYN攻击是什么？如何避免？</h3><p>就是在三次握手过程，攻击者伪造不同IP一直发送SYN报文，服务端接收后，就进入SYN_RCVD状态，且服务端发送ACK+SYN报文无回应，久而久之就会占满SYN接收队列（未连接队列），使得服务器不能正常给用户连接。</p><p>如何避免？<br>一是修改Linux内核参数，控制队列大小和饱和策略。<br>比如，限制SYN_RCVD状态连接的最大个数，超出处理能力时，采取丢弃策略。</p><p>二是启动sync cookies<br>首先，正常情况下：</p><ul><li><p>当服务端接收到客户端的 SYN 报文时，会将其加入到内核的「 SYN 队列」；</p></li><li><p>接着发送 SYN + ACK 给客户端，等待客户端回应 ACK 报文；</p></li><li><p>服务端接收到 ACK 报文后，从「 SYN 队列」移除放入到「 Accept 队列」；</p></li><li><p>应用通过调用  <code>accept()</code>  socket 接口，从「 Accept 队列」取出的连接。</p></li><li><p>如果accept方法调用过慢时，就会导致「 Accept 队列」被占满。</p></li><li>如果应用程序过慢时，就会导致「 Accept 队列」被占满。</li></ul><p>但开启sync cookies 后</p><ul><li><p>当 「 SYN 队列」满之后，后续服务器收到 SYN 包，不进入「 SYN 队列」；</p></li><li><p>计算出一个  <code>cookie</code>  值，再以 SYN + ACK 中的「序列号」返回客户端，</p></li><li><p>服务端接收到客户端的应答报文时，服务器会检查这个 ACK 包的合法性。如果合法，直接放入到「 Accept 队列」。</p></li><li><p>最后应用通过调用  <code>accpet()</code>  socket 接口，从「 Accept 队列」取出的连接。</p></li></ul><h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><p>客户端发送首部FIN=1 的TCP报文，即FIN报文，之后进入FIN等待1状态。<br>服务端接收后响应ACK，进入等待关闭状态。<br>客户端接收ACK后，进入FIN等待2状态<br>等服务处理后面，再发送FIN报文，然后进入等待最后ACK状态。<br>客户端收到后，会一个ACK，进入时间等待状态TIME_WAIT。<br>服务器收到后，关闭连接。<br>服务端经过2MSL时间后，关闭连接。</p><p>每个方向都需要FIN 和 ACK，这里需要注意，TIME_WAIT是主动关闭连接才有</p><h4 id="Q：-为什么四次挥手？"><a href="#Q：-为什么四次挥手？" class="headerlink" title="Q： 为什么四次挥手？"></a>Q： 为什么四次挥手？</h4><p>因为双方都需要分开发送一个FIN 和分开响应一个ACK，来告知和确认。</p><h4 id="Q：为什么TIME-WAIT等待是2MSL？"><a href="#Q：为什么TIME-WAIT等待是2MSL？" class="headerlink" title="Q：为什么TIME_WAIT等待是2MSL？"></a>Q：为什么TIME_WAIT等待是2MSL？</h4><p>MSL是最大报文生存时间，它是任何报文在网络上生存的最长时间。<br>顺便一提，TTL是经过路由的跳数。MSL要大于等于TTL消耗位0的时间。</p><p>TIME_WAIT持续2倍MSL，在Linux中是60s，说白来，这其实是要等报文一来一回的时间。<br>比如，如果对方没有接收到最后ACK，超时重传FIN报文，然后我接收到FIN报文，ACK与重传FIN 正好一来一回，2MSL足够时间让我接收重传的FIN报文，之后，我重发ACK，2MSL重新计时。</p><h4 id="Q：为什么需要TIME-WAIT？"><a href="#Q：为什么需要TIME-WAIT？" class="headerlink" title="Q：为什么需要TIME_WAIT？"></a>Q：为什么需要TIME_WAIT？</h4><p>原因一 ： 防止旧连接的数据包<br>比如，双方关闭连接后，服务端的相同端口号的TCP连接被重用。<br>如果TIME_WAIT没有或过短，上一次由服务器发送，但被网络阻塞的报文，会现在发送过来给一个新的客户端，导致数据错乱。<br>等待2MSL时间，保证服务器所有数据包自然死亡。</p><p>原因二：保证连接正确关闭：<br>TIME-WAIT 作用是<strong>等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭。</strong></p><p>如果TIME_WAIT没有或过短，</p><ul><li><p>客户端四次挥手的最后一个  <code>ACK</code>  报文如果在网络中被丢失了，此时如果客户端  <code>TIME-WAIT</code>  过短或没有，则就直接进入了  <code>CLOSE</code>  状态了，那么服务端则会一直处在  <code>LASE-ACK</code>  状态。</p></li><li><p>当客户端发起建立连接的  <code>SYN</code>  请求报文后，服务端会发送  <code>RST</code>  报文给客户端，连接建立的过程就会被终止。</p></li></ul><h4 id="Q：TIME-WAIT-过多有什么危害？"><a href="#Q：TIME-WAIT-过多有什么危害？" class="headerlink" title="Q：TIME_WAIT 过多有什么危害？"></a>Q：TIME_WAIT 过多有什么危害？</h4><ul><li><p>第一是内存资源占用；</p></li><li><p>第二是对端口资源的占用，一个 TCP 连接至少消耗一个本地端口；</p></li></ul><h4 id="Q：-如何优化TIME-WAIT？"><a href="#Q：-如何优化TIME-WAIT？" class="headerlink" title="Q： 如何优化TIME_WAIT？"></a>Q： 如何优化TIME_WAIT？</h4><p>一是可以<strong>复用处于 TIME_WAIT 的 socket 为新的连接所用</strong>。<br>使用这个选项，还有一个前提，需要打开对 TCP 时间戳的支持，即</p><p>这个时间戳的字段是在 TCP 头部的「选项」里，用于记录 TCP 发送方的当前时间戳和从对端接收到的最新时间戳。</p><p>由于引入了时间戳，我们在前面提到的  <code>2MSL</code>  问题就不复存在了，因为重复的数据包会因为时间戳过期被自然丢弃。</p><p>温馨提醒：<code>net.ipv4.tcp_tw_reuse</code>要慎用，因为使用了它就必然要打开时间戳的支持  <code>net.ipv4.tcp_timestamps</code>，<strong>当客户端与服务端主机时间不同步时，客户端的发送的消息会被直接拒绝掉</strong>。小林在工作中就遇到过。。。排查了非常的久</p><p>二是当系统中处于 TIME_WAIT 的连接<strong>一旦超过一个值时，系统就会将所有的 TIME_WAIT 连接状态重置。</strong>，问题更多</p><p>三是我们可以通过设置 socket 选项，来设置调用 close 关闭连接行为。</p><h4 id="Q：如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#Q：如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="Q：如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>Q：如果已经建立了连接，但是客户端突然出现故障了怎么办？</h4><p>TCP 有一个机制是<strong>保活机制</strong>。这个机制的原理是这样的：</p><p>定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。</p><h2 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h2><figure class="image-box">                <img src="88C54A0C-F18F-40A7-80F3-578C2C001BB3_20220301030128.png?v=1&type=image&token=V1:Yz1FxBY8R886pfetwNkycQ_fy2Zif_dTF5s4IPh4cbw" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><ul><li><p>服务端和客户端初始化  <code>socket</code>，得到文件描述符；</p></li><li><p>服务端调用  <code>bind</code>，将绑定在 IP 地址和端口;</p></li><li><p>服务端调用  <code>listen</code>，进行监听；</p></li><li><p>服务端调用  <code>accept</code>，等待客户端连接；</p></li><li><p>客户端调用  <code>connect</code>，向服务器端的地址和端口发起连接请求；</p></li><li><p>服务端  <code>accept</code>  返回用于传输的  <code>socket</code>  的文件描述符；</p></li><li><p>客户端调用  <code>write</code>  写入数据；服务端调用  <code>read</code>  读取数据；</p></li><li><p>客户端断开连接时，会调用  <code>close</code>，那么服务端  <code>read</code>  读取数据的时候，就会读取到了  <code>EOF</code>，待处理完数据后，服务端调用  <code>close</code>，表示连接关闭。</p></li></ul><p>这里需要注意的是，服务端调用  <code>accept</code>  时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。</p><p>所以，监听的 socket 和真正用来传送数据的 socket，是「两个」 socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong>。</p><p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</p><h3 id="Q：-listen-时候参数-backlog-的意义？"><a href="#Q：-listen-时候参数-backlog-的意义？" class="headerlink" title="Q： listen 时候参数 backlog 的意义？"></a>Q： listen 时候参数 backlog 的意义？</h3><p>Linux内核中会维护两个队列：</p><ul><li><p>未完成连接队列（SYN 队列）：接收到一个 SYN 建立连接请求，处于 SYN_RCVD 状态；</p></li><li><p>已完成连接队列（Accpet 队列）：已完成 TCP 三次握手过程，处于 ESTABLISHED 状态；</p></li></ul><figure class="image-box">                <img src="E5A16EFC-F8E5-413F-A373-A9AE832AB3EA_20220301030414.png?v=1&type=image&token=V1:IrGEHjzfy7HoFoFVvIODOCSedyypxsuKtA6k7XErHQs" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><p>在 Linux 内核 2.2 之后，backlog 变成 accept 队列，也就是已完成连接建立的队列长度，<strong>所以现在通常认为 backlog 是 accept 队列。</strong></p><h4 id="Q：什么是-TCP-半连接队列和全连接队列？"><a href="#Q：什么是-TCP-半连接队列和全连接队列？" class="headerlink" title="Q：什么是 TCP 半连接队列和全连接队列？"></a>Q：<strong>什么是 TCP 半连接队列和全连接队列？</strong></h4><p>在 TCP 三次握手的时候，Linux 内核会维护两个队列，分别是：</p><p>半连接队列，也称 SYN 队列；全连接队列，也称 accepet 队列；服务端收到客户端发起的 SYN 请求后，<strong>内核会把该连接存储到半连接队列</strong>，并向客户端响应 SYN+ACK，接着客户端会返回 ACK，服务端收到第三次握手的 ACK 后，<strong>内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到 accept 队列，等待进程调用 accept 函数时把连接取出来</strong>。</p><p><img src="3b87e950352ac65c20611873e5e4751793138a62.jpeg" alt="img"></p><h3 id="Q：accept-发送在三次握手的哪一步？"><a href="#Q：accept-发送在三次握手的哪一步？" class="headerlink" title="Q：accept 发送在三次握手的哪一步？"></a>Q：accept 发送在三次握手的哪一步？</h3><figure class="image-box">                <img src="2F2DCEA4-F84A-44B5-B5FD-F3F1F9292894_20220301030519.png?v=1&type=image&token=V1:E9Nf8kAwwyq1S2JJ4Qqf53TxBVbnze5R7dw2mCAKtEA" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><h3 id="Q：客户端调用-close-了，连接是断开的流程是什么？"><a href="#Q：客户端调用-close-了，连接是断开的流程是什么？" class="headerlink" title="Q：客户端调用 close 了，连接是断开的流程是什么？"></a>Q：客户端调用 close 了，连接是断开的流程是什么？</h3><figure class="image-box">                <img src="FF99FD84-160C-451C-9D75-9BA45177F732_20220301030633.png?v=1&type=image&token=V1:Gby9jS5wb0Zu6mRJVZlZ6LovpSaNhvuwrtvx92VrAoM" alt="输入图片描述" title class>                <p>输入图片描述</p>            </figure><p>————————————————</p><h4 id="Q-没有开启TCP-keepalive保活，-一直没有数据交互；进程崩溃-和主机崩溃的区别？"><a href="#Q-没有开启TCP-keepalive保活，-一直没有数据交互；进程崩溃-和主机崩溃的区别？" class="headerlink" title="Q: -   没有开启TCP keepalive保活， 一直没有数据交互；进程崩溃 和主机崩溃的区别？"></a>Q: -   没有开启TCP keepalive保活， 一直没有数据交互；进程崩溃 和主机崩溃的区别？</h4><p>如果有保活机制</p><ul><li><p>如果<strong>对端程序是正常工作</strong>的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 <strong>TCP 保活时间会被重置</strong>，等待下一个 TCP 保活时间的到来。</p></li><li><p>如果<strong>对端主机崩溃，或对端由于其他原因导致报文不可达</strong>。当 TCP 保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，<strong>TCP 会报告该 TCP 连接已经死亡</strong>。</p></li></ul><p>没有的话：</p><p>如果客户端主机崩溃了，服务端是<strong>无法感知到的</strong>，在加上服务端没有开启 TCP keepalive，又没有数据交互的情况下，<strong>服务端的 TCP 连接将会一直处于 ESTABLISHED 连接状态</strong>，直到服务端重启进程</p><p>kill -9 来模拟进程崩溃的情况，发现<strong>在 kill 掉进程后，服务端会发送 FIN 报文，与客户端进行四次挥手</strong>。<br>如果其中一方的进程发生了崩溃，这个过程操作系统是可以感知的到的，于是就会发送 FIN 报文给对方，然后与对方进行 TCP 四次挥手。</p><ul><li><p>第一种，客户端主机宕机，又迅速重启，会发生什么？</p></li><li><p>第二种，客户端主机宕机，一直没有重启，会发生什么？</p></li></ul><p>客户端主机宕机，又迅速重启</p><p>在客户端主机宕机后，服务端向客户端发送的报文会得不到任何的响应，在一定时长后，服务端就会触发<strong>超时重传</strong>机制，重传未得到响应的报文。</p><p>客户端主机宕机，一直没有重启</p><p>这种情况，服务端超时重传报文的次数达到一定阈值后，内核就会判定出该 TCP 有问题，然后通过 Socket 接口告诉应用程序该 TCP 连接出问题了</p><h2 id="滑动窗口机制"><a href="#滑动窗口机制" class="headerlink" title="滑动窗口机制"></a>滑动窗口机制</h2><p>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。 TCP会话的双方都各自维护一个发送窗口和一个接收窗口。接收窗口大小取决于应用、系统、硬件的限制。发送窗口则取决于对端通告的接收窗口。接收方发送的确认报文中的window字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将接收方的确认报文window字段设置为 0，则发送方不能发送数据。</p><figure class="image-box">                <img src="image-20210921112213523.png" alt="img" title class>                <p>img</p>            </figure><p>TCP头包含window字段，16bit位，它代表的是窗口的字节容量，最大为65535。这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。接收窗口的大小是约等于发送窗口的大小。</p><h2 id="详细讲一下拥塞控制？"><a href="#详细讲一下拥塞控制？" class="headerlink" title="详细讲一下拥塞控制？"></a>详细讲一下拥塞控制？</h2><p>防止过多的数据注入到网络中。 几种拥塞控制方法：慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p><figure class="image-box">                <img src="%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.jpg" alt="img" title class>                <p>img</p>            </figure><h3 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h3><p>把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。每经过一个传输轮次，拥塞窗口 cwnd 就加倍。 为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。</p><p> 当 cwnd &lt; ssthresh 时，使用慢开始<a href>算法</a>。</p><p> 当 cwnd &gt; ssthresh 时，停止使用慢开始<a href>算法</a>而改用拥塞避免<a href>算法</a>。</p><p> 当 cwnd = ssthresh 时，既可使用慢开始<a href>算法</a>，也可使用拥塞控制避免<a href>算法</a>。</p><h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>让拥塞窗口cwnd缓慢地增大，每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长。</p><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送 方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始<a href>算法</a>。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生 拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><p>有时个别报文段会在网络中丢失，但实际上网络并未发生拥塞。如果发送方迟迟收不到确认，就会产生超时，就会误认为网络发生了拥塞。这就导致发送方错误地启动慢开始，把拥塞窗口cwnd又设置为1，因而降低了传输效率。</p><p>快重传<a href>算法</a>可以避免这个问题。快重传<a href>算法</a>首先要求接收方每收到一个失序的报文段后就立即发出重复确认，使发送方及早知道有报文段没有到达对方。</p><p>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待重传计时器到期。由于发送方尽早重传未被确认的报文段，因此采用快重传后可以使整个网络吞吐量提高约20%。</p><h3 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h3><p>当发送方连续收到三个重复确认，就会把慢开始门限ssthresh减半，接着把cwnd值设置为慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免<a href>算法</a>，使拥塞窗口缓慢地线性增大。</p><p>在采用快恢复<a href>算法</a>时，慢开始<a href>算法</a>只是在TCP连接建立时和网络出现超时时才使用。 采用这样的拥塞控制方法使得TCP的性能有明显的改进。</p><p>常见重传机制：</p><p>超时重传</p><p>快速重传</p><p>SACK</p><p>D-SACK</p><h1 id="TCP-重传、滑动窗口、流量控制、拥塞控制发愁图解"><a href="#TCP-重传、滑动窗口、流量控制、拥塞控制发愁图解" class="headerlink" title="TCP 重传、滑动窗口、流量控制、拥塞控制发愁图解"></a>TCP 重传、滑动窗口、流量控制、拥塞控制发愁图解</h1><p><a href="https://mp.weixin.qq.com/s/Tc09ovdNacOtnMOMeRc_uA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Tc09ovdNacOtnMOMeRc_uA</a></p><h1 id="精炼版"><a href="#精炼版" class="headerlink" title="精炼版"></a>精炼版</h1><p><a href="https://mp.weixin.qq.com/s/plkDQ4YCawcLOr5In_L8TQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/plkDQ4YCawcLOr5In_L8TQ</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化和反序列化&quot;&gt;&lt;a href=&quot;#序列化和反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化和反序列化&quot;&gt;&lt;/a&gt;序列化和反序列化&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;序列化就是将对象转换成二进制数据的过程，以方便传输或存储。而反序列就是将二进</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="计算机网络" scheme="https://missionodd.github.io/categories/技术/计算机网络/"/>
    
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="计算机网络" scheme="https://missionodd.github.io/tags/计算机网络/"/>
    
  </entry>
  
  <entry>
    <title>Redis | 底层数据结构 | 主从复制</title>
    <link href="https://missionodd.github.io/2022/02/10/redis-principle-cluster/"/>
    <id>https://missionodd.github.io/2022/02/10/redis-principle-cluster/</id>
    <published>2022-02-10T05:50:37.000Z</published>
    <updated>2022-03-16T15:30:45.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><h4 id="讲讲Redis的5种数据结构的理解"><a href="#讲讲Redis的5种数据结构的理解" class="headerlink" title="讲讲Redis的5种数据结构的理解"></a>讲讲Redis的5种数据结构的理解</h4><p>5种，字符串，列表，哈希表对象，集合set，有序集合zset。<br>Redis对象有统一的数据结构，RedisObj，里面包含对象类型，对象底层实现数据结构标识encoding，指向底层结构的指针。</p><p>先说<strong>字符串</strong>：<br>底层是名为SDS的结构，有buf字节数组，对应长度，未使用空间长度。好处是：<br>1.O(1)定位长度，<br>2.对\0兼容的二进制安全，<br>3.追加字符串，可利用未使用空间，减少内存重新分配空间次数；<br>4.空间不够时，通过自动分配新空间而不会像strcat函数引起缓冲区溢出：小于1MB，按2倍扩容，扩容阈值为1MB。<br>5.用5种不同大小的SDS，灵活保存，节省内存看空间。</p><ol start="6"><li>空间节省还体现在编译优化上，我们先了解，编译器会有一个字节数对齐的工作，以更好地让CPU对内存的规整读写。SDS取消字节对齐，压缩空间。比如，结构体有char，int，对齐下是4+4字节，压缩后1+4字节。</li></ol><p>不过，空间只增不减，需要手动调API惰性释放</p><p><strong>列表</strong><br>双向链表或压缩列表，3.2后用quicklist，50后用了listpack<br>双向链表<br>表头：头节点指针，尾节点指针，长度<br>节点：前驱指针，后驱指针，值指针</p><p>插入多时会比数组好，但不连续内存存储，产生空间碎片，无法利用CPU缓存；多出存储头尾节点的空间开销；</p><p><strong>压缩列表</strong><br>内存紧凑列表，没有所谓对齐空闲，很好利用CPU缓存；<br>表头3个，整体字节数，尾部偏移量，节点数，表尾1个，8位1结束标记；<br>节点内部：上个节点长度，当前节点类型及长度，节点数据</p><p>这种设计，大大节省内存空间。<br>举例：<br>列表中存储字符串，如果用双链表，<strong>每个节点有三个指针，加上SDS的2个长度的存储，再加上字符串本身</strong>。32位操作系统，一个指针6-7字节左右，三指针占<strong>18字节</strong>；<br>如果字符串是个位数，基本每个整数占用1个字节，加起来20个字节左右，不包含字符串本身。<br>当<strong>开启压缩列表</strong>，存储结构变化，它会按照序列化的形式存储，每个节点除了存储字符串本身，<strong>只需存2个整数，一个是前一个节点的字符串长度，另一个是当前节点字符串类型长度。</strong>若它是个位数长度，只需每个整数只占1个字节，总之，字符串本身加上两个字节的额外开销，跟之前字符串加上20字节的额外开销，差了N陪。这样，开启压缩列表，每项存储节省18字节。在此情况，做内存节省，适当将redis里的列表长度的阈值调整，<strong>默认512调整到2048或1024</strong>，不建议特别大。这样满足更长列表的列表压缩，节省更多空间。</p><p>但是，压缩列表会产生一定的性能消耗<br>一是读写过程需要编码解码；<br>二是连锁更新问题。新增或修改元素时，一旦空间不够了，压缩列表就会重新分配。特别是插入元素较大，会导致后续的上个节点长度的整型记录发生连锁空间变大，即后续所有空间都要重新分配，造成访问压缩列表的性能下降。<br>比如，前节点原本长度小于254字节，prevlen上节点长度只需1字节空间保存，如果前节点增大超过253，prevlen上节点长度要用5字节保存，而这，又导致当前节点的增大，同样，下一个节点为了记录当前节点长度，也要增大，这是一个多米诺牌的效应。</p><p>结论是，压缩列表保存小数据和几乎不变的数据，控制在连锁更新能够接受的尺度。</p><p><strong>哈希桶 Hash</strong><br>底层是压缩列表 + 字典，新版本有变化，压缩列表改为listpack<br>压缩列表已经讲过，这里主要是用来存储键key。<br>字典的结构是：2个ht哈希表，ht指向dictEntry哈希节点数组，数组元素指向dictEntry哈希节点链表；<br>1.先说哈希节点，内有key，v，next三个指针，v是联合体结构，里面val有两种含义，一种是8字节指针，一种是8字节长度整型或浮点数，无指向，空间节省优化。</p><p>2.采用数组+链表，是解决哈希冲突的链式哈希法。一个ht哈希表内部有数组，数组大小，掩码，节点数量；set的时候，通过key.hash对掩码与运输，定位数组桶位，头插法插入链表。</p><p>3.扩容缩容时的渐进式rehash。与hasmap不同，rehash执行过程分散到crud过程，减少单次set操作的性能开销。利用两个ht哈希表实现，一个ht用于存储旧数据；另一个空ht用于扩缩容数组。当达到负载因子阈值，空ht会扩容2倍，新数据进入到在新数组，同时，旧数据在每次crud时分批分次迁移。这是一种归并思想。</p><p><strong>集合（sadd）</strong><br>底层是整数集合或字典<br>字典已经介绍过。<br>下面介绍<br>整数集合intset<br>内部有：元素编码，数量，数组<br>优点：</p><ol><li>连续内存空间，规整的元素大小划分，减少空间碎片</li><li>升级操作，针对不同规格的类型，选择编码合适的集合。当新元素超过当前编码，比如int16集合中新增int32，会对整个集合进行一个大小的升级。好处是节省内存资源。</li></ol><p>不过，只增不减。</p><p><strong>有序集合（Zset）</strong><br>底层是压缩列表或跳表。新版压缩列表改为listpack。</p><p>跳表<br>一个带有层级关系的有序双向链表。<br>主要介绍三个参数，层级，分值，跨度。<br>每个节点有随机层级，不同层级有不同跨度的指向关系，越高层级跨度越大。利用浮点数分值的有序性，实现一种下楼梯式地层层检索，似二分查询，沿途跳过过多少节点，就是节点跨度。<br>还有前进指针和后退指针，后推指针用于从尾到头的检索。<br>好处是，查询效率下降一定小于log（N），且保持顺序性。</p><p>能够实现排行榜。</p><p>3.2版本的<br>quicklist<br>跟链表类似，区别是节点val采用了压缩列表指针，并额外存储字节大小，元素个数，能控制压缩列表的大小或者元素个数，规避潜在的连锁更新风险，并没有完全解决</p><p>5.0版本的<br>listpack<br>为了解决连锁更新问题，listpack代替压缩列表，舍弃前一个节点长度。<br>结构是：表头： 字节数，元素数量，表尾：结束标识<br>节点：编码，数据，编码+数据总长度。</p><h2 id="Redis-3种高级结构"><a href="#Redis-3种高级结构" class="headerlink" title="Redis 3种高级结构"></a>Redis 3种高级结构</h2><p>bitmaps<br>01数组，实际上String类型上的一组面向bit操作的集合。<br>用于活跃用户统计，布隆过滤器</p><p>HyperLogLogs<br>是用来做基数统计的算法，HyperLogLogs 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><p>底层是散列出1w多个6bit的桶。类似bitmaps</p><p>实现滑动时间的UV数据统计</p><p>GEO<br>地理坐标<br>使用了GeoHash编码后，经纬度[120,40]就被编码成了1110011101，这个值就可以作为key对应的score值，把二维变成一维。</p><p>pipeline<br>网络管道技术，降低RT次数。<br> pipeline打包命令发送，节省网络时间。pipeline不是原子操作。<br> pipeline都会将数据顺序的传送顺序地返回（redis 单线程）</p><p>脚本<br> 大量 pipeline 应用场景可通过  <strong>Redis 脚本</strong>（Redis 版本 &gt;= 2.6）得到更高效的处理，后者在服务器端执行大量工作。脚本的一大优势是可通过最小的延迟读写数据，让读、计算、<strong>写等操作变得非常快（pipeline 在这种情况下不能使用，因为客户端在写命令前需要读命令返回的结果</strong>）。</p><h2 id="数据库空间"><a href="#数据库空间" class="headerlink" title="数据库空间"></a>数据库空间</h2><p>数据库空间是16隔DB，包括键-值空间和键-过期时间的字典。</p><h2 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h2><p>每一个键定时删除，CPU开销大；<br>每一次查询检查的惰性删除，容易内存泄露；<br>设置时间定期一次性检查删除，需要合理的频率和执行时长；<br>默认惰性+定期</p><p>RDB AOF对过期键的处理：<br>不同点：二者在主从服务器保持数据一致性载入文件对过期键的方式不同。<br>RDB文件，1.主服务器运行时载入会判断过期键不载入；2.从服务器运行时载入不会判断全载入，因为在主从服务器保持数据一致性时会先删除从服务器数据。<br>AOF文件，1.主服务器运行时载入判断过期键会在AOF文件中追加一条del命令；2.从服务器对过期键暂不处理，因为在主从服务器保持数据一致性时，主服务器统一发送del命令，从服务器才会处理过期键;AOF文件处理过期键是由主服务期统一管理。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>用引用计数器，因为没有循环引用。</p><h2 id="AOF持久化日志"><a href="#AOF持久化日志" class="headerlink" title="AOF持久化日志"></a>AOF持久化日志</h2><p>只记录写命令操作，追加方式；<br>先执行成功再记录<br>好处：<br>一是避开额外的检查开销<br>二是不会阻塞当前写操作命令执行；<br>风险：<br>一是非原子操作，未及时刷盘导致丢失<br>二是redis单线程写日志，受限于IO压力，可能给下一个命令造成阻塞</p><p>这都给写硬盘的时机有关</p><h3 id="三种写回策略"><a href="#三种写回策略" class="headerlink" title="三种写回策略"></a>三种写回策略</h3><p>写入过程：命令追加至AOF缓存区，然后write调用拷贝至内核缓冲区，等待内核刷盘，什么时候刷盘，由内核决定<br>Redis刷盘的3种策略：<br>Always：总是，每次同步<br>Everysec：每隔一秒<br>No：转交给系统控制</p><p>要么减少数据丢失，要么阻塞主进程，高可靠，高性能只能选其一；</p><p>系统刷盘函数：fsync（）</p><h3 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h3><p>为了解决AOF日志过大问题，AOF会读取当前数据库所有数据，生成新的AOF文件，再进行旧AOF日志一次性覆盖。</p><p>AOF重写由<strong>子进程</strong>完成，避免阻塞主线程。<br>不使用线程是因为，多线程内存共享，修改 共享数据，需要加锁保证数据安全，降低性能。父子进程的采用数据副本，通过fork，系统把父进程的页表复制给子进程，页表是记录虚拟内存映射关系，不会物理复制。也就是说，虚拟空间不同，物理空间相同。<br>这样，实现内存共享，不过只标记为可读。当父子任意一方进行写一个页表项，CPU就会触发违反权限导致的缺页中断机制，会进行一部分页表项的物理复制，并重新调整映射，该过程就是写时复制：写操作时，才会对在写的物理内存复制。防止整体内存复制过长而引发父进程写阻塞当问题。<br>当然，复制进程页表，父进程会阻塞，但页表其实很小，开销不大。对在写的物理内存复制也会阻塞，这要数据量大小。如果是个bigkey，就有阻塞风险。</p><p>如果AOF重写过程中，主进程写入导致两块物理内存不一致，怎么办呢？<br>增加AOF重写缓冲区：重写AOF期间，写命令写入到”AOF缓冲区“与”AOF重写缓冲区“。<br>AOF文件重写工作完成后，此时还没覆盖旧AOF日志，会向主进程发送信号，这是进程之间的异步通信方式。</p><p>主进程接收到信号，把AOF重写缓冲区追加到新的AOF中，再把旧AOF日志覆盖。这个过程是阻塞的</p><p>整个过程，进程页表复制，写时复制，信号接收处理，都是阻塞的。其他情况不阻塞。</p><h2 id="RDB-快照-默认"><a href="#RDB-快照-默认" class="headerlink" title="RDB 快照  默认"></a>RDB 快照  默认</h2><p>所谓快照，就是记录一瞬间的东西，好比拍一张照片。</p><p>RDB记录某一个瞬间的二进制内存数据，是全量快照，而AOF是命令日志</p><p>好处是Redis要恢复数据时，RDB效率更高。</p><p>提供了两个命令：<br>save 和 bgsave： 区别是是否在主进程执行。<br>开启以后，会定期执行保存，这是比较重的操作，这个频率要控制。</p><p>缺点：<br>发送宕机时，RDB记录旧的数据，比秒级AOF丢失更多。</p><p>执行快照时，数据能被修改吗？<br>可以，使用bgsave，也是子进程写时复制技术。<br>能同步刚修改的数据吗？<br>不同步，只能交由下一次bgsave操作。</p><h2 id="RDB和AOF-混合文件持久化"><a href="#RDB和AOF-混合文件持久化" class="headerlink" title="RDB和AOF 混合文件持久化"></a>RDB和AOF 混合文件持久化</h2><p>为了高可用和高性能，控制持久化好频率。</p><p>混合持久化工作在 <strong>AOF 日志重写过程</strong>。</p><p>当开启了混合持久化时，在 AOF 重写日志时，<code>fork</code>出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程处理的操作命令会被记录在重写缓冲区里，重写缓冲区里的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。</p><p>也就是说，使用了混合持久化，AOF 文件的<strong>前半部分是 RDB 格式的全量数据，后半部分是 AOF 格式的增量数据</strong>，不再有AOF全量数据。</p><p>这样的好处在于，重启 Redis 加载数据的时候，由于前半部分是 RDB 内容，这样<strong>加载的时候速度会很快</strong>。</p><p>加载完 RDB 的内容后，才会加载后半部分的 AOF 内容，这里的内容是 Redis 后台子进程重写 AOF 期间，主线程处理的操作命令，可以使得<strong>数据更少的丢失</strong>。</p><h2 id="缓存三个异常问题"><a href="#缓存三个异常问题" class="headerlink" title="缓存三个异常问题"></a>缓存三个异常问题</h2><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>大量缓存失效，同一时间过期或者Redis 宕机。<br>导致Mysql压力剧增，引发系统崩溃。</p><p>解决：<br>如果是缓存过期：<br>在设置缓存时，提前过期时间散列化，增加随机数；</p><p>如果访问缓存不存在，使用互斥锁，保证一个时间内只有一个请求来构建缓存。其他请求等待完成。当然，要设置超时时间，防止长时间阻塞。但锁开销大。</p><p>主备双key，一个主key，有过期时间；一个备key，永久缓存。<br>但，更新缓存需要同时更新主备双key。</p><p>定期程序更新，缓存不设置过期时间。<br>但，导致缓存紧张，引发淘汰策略。<br>解决上面可以用：<br>一是线程不仅要定期更新缓存，还要频繁检查缓存是否有效，就是把BD和缓存对比检查，有被淘汰的，就马上读取DB更新缓存。几乎实时，不然只查到空值。不推荐</p><p>二是消息队列，发现数据淘汰后，通过消息队列发送一条消息到后台线程，后台线程接收消息，先检查缓存是否存在，再读取DB更新到缓存。</p><p>在业务上线，要把缓存先加载，这就是所谓缓存预热。</p><p>如果是Redis 宕机<br>首先，最好集群化保证高可用，进行一个主从节点的复制。<br>再一个是，构建限流，熔断机制。<br>为了减少业务的影响，触发请求限流，只允许少部分请求进入，等待重启Redis并缓存预热后，再解除限流。<br>还有就是，启动熔断机制，暂停业务应用对缓存服务的访问，直接返回服务不可用错误。等Redis恢复，再允许访问。这主要保证除了Redis缓存外，其他的整体的服务依然可用。</p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>频繁访问的热点数据过期，大量高并发请求直接访问数据库，造成数据库被冲垮。这问题算是缓存雪崩的一个子集：<br>解决：<br>互斥锁：未查到缓存时，保证一个时间内只有一个业务对一个缓存构建，其他请求该缓存，要么等待要么返回默认值/null</p><p>不设置过期时间，后台异步更新缓存，或者热点数据准备过期前，通知后台线程更新以及重新设置过期时间。</p><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>访问的数据不在缓存，也不在数据库。<br>一是校验请求合法性，二是返回空值或默认值，三是布隆过滤器。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h5 id="Q：redis-到底是单线程-还是-多线程？"><a href="#Q：redis-到底是单线程-还是-多线程？" class="headerlink" title="Q：redis 到底是单线程 还是 多线程？"></a>Q：redis 到底是单线程 还是 多线程？</h5><p>Redis 是单线程模型，这是指【从网络IO处理到实际的读写命令处理】都是单个线程完成的。有些命令是可用用后台子进程执行，比如快照生产，AOF重写。</p><p>严格意义上说，Redis4.0后并不是单线程，除了主线程之外，后台线程在处理一些比较长的操作，比如垃圾回收，无用连接的释放，大Key大删除。</p><p>在Redis6.0后，采用了多线程等待Socket读些，最终执行读写命令的过程依然在主线程。</p><h5 id="Q：为什么处理操作命令的过程在单线程呢？"><a href="#Q：为什么处理操作命令的过程在单线程呢？" class="headerlink" title="Q：为什么处理操作命令的过程在单线程呢？"></a>Q：为什么处理操作命令的过程在单线程呢？</h5><p>这样，Redis  不存在CPU瓶颈，主要受限于内存和网络。<br>如果采用多线程读写命令，虽然提高并发性能，但却引入了程序执行顺序的不确定性，带来并发读写的一系列问题， 增加系统复杂度，还有个线程的切换，甚至加锁解锁，死锁造成的性能消耗。</p><h5 id="Q：AOF重写缓冲区会被占满吗？"><a href="#Q：AOF重写缓冲区会被占满吗？" class="headerlink" title="Q：AOF重写缓冲区会被占满吗？"></a>Q：AOF重写缓冲区会被占满吗？</h5><p>理论不会，缓冲区维护着一些内存块的双向链表，每个节点指向对应aofblock空间。</p><h5 id="Q：为什么AOF重写和RDB生成要开启子进程而不是线程？"><a href="#Q：为什么AOF重写和RDB生成要开启子进程而不是线程？" class="headerlink" title="Q：为什么AOF重写和RDB生成要开启子进程而不是线程？"></a>Q：为什么AOF重写和RDB生成要开启子进程而不是线程？</h5><p>因为如果使用线程，多线程之前就会共享内存。那么修改共享数据，需要加锁，锁会阻塞主线程。</p><p>子进程的方式，可以利用写时复制的技术，不用加锁。</p><h5 id="Q：什么情况才会save？"><a href="#Q：什么情况才会save？" class="headerlink" title="Q：什么情况才会save？"></a>Q：什么情况才会save？</h5><p>当 Redis 内存数据高达几十 G，甚至上百 G 的时候，<strong>如果用 bgsave 进行 RDB 快照的话，在创建子进程的时候，会因为复制太大的页表而导致 Redis 阻塞在  <code>fork()</code>  函数，主线程无法继续执行，相当于停顿了</strong>。</p><p>所以针对这种情况建议用 save。</p><p>虽然 save 会一直阻塞 Redis 直到快照生成完毕，但是它这个阻塞并不是意味着停顿了，而是在执行生成快照的程序，只是期间主线程无法处理接下来的读写命令。</p><h5 id="Q：混合持久化如何区分开？"><a href="#Q：混合持久化如何区分开？" class="headerlink" title="Q：混合持久化如何区分开？"></a>Q：混合持久化如何区分开？</h5><p>头部有有个REDIS 表明锁RDB内容，中间遇到RDB结束标记，然后再解析AOF格式。</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>避免单点故障，最好做集群化，做主从备份。<br>多台服务器要保存同一份数据，就要保持数据一致性。<br>Redis 提供了主从复制模式，且主从之间，采用读写分离。</p><p>客户端写操作：<br>对所有的数据写入只在主服务上进行，然后，讲最新的数据同步到从服务器，这样，主从服务器的数据保持一致；<br>客户端读操作：<br>通过负载均衡策略，可以在任意一台服务器读取。</p><h4 id="第一次同步"><a href="#第一次同步" class="headerlink" title="第一次同步"></a>第一次同步</h4><p>一是从服务器输入命令： replicaof  主IP+端口<br>建立连接，协商同步；<br>二是主服务器同步数据到从服务器，全量复制：主服务期生成并发送RDB文件，从接收后先清除，再载入。为了保证数据一执行，新写入的命令写到replication buffer 缓冲区中。<br>三是主服务器发送新写操作命令给从服务器；<br>将 replication buffer 缓冲区里所记录的写操作命令发送给从服务器，然后从服务器重新执行这些操作。</p><p>主从服务器再完成第一次同步后，会维护一个TCP连接。</p><p>后续主服务器可以通过这个连接继续将写操作命令传播给从服务器，然后从服务器执行该命令，使得与主服务器的数据库状态相同。</p><p>而且这个连接是长连接的，目的是避免频繁的 TCP 连接和断开带来的性能开销。</p><p>上面的这个过程被称为<strong>基于长连接的命令传播</strong>，通过这种方式来保证第一次同步后的主从服务器的数据一致性。</p><h4 id="分摊主服务器的压力"><a href="#分摊主服务器的压力" class="headerlink" title="分摊主服务器的压力"></a>分摊主服务器的压力</h4><p>刚刚讲到，第一次会有生成RDB文件和传输RDB文件两个耗时操作。<br>特别是从服务器非常多，数据量非常大，有两个问题：<br>一是fork阻塞主线程，redis无法正常速度处理读写请求；<br>二是RDB占用主服务网络带宽，也会影响命令请求的速度；</p><p>这个时候，需要设置助手，主从架构分成树状架构。从不仅可以接收主服务器的同步数据，自己也可以同时作为主服务器形式将数据同步给从服务器。</p><p>这种方式，把同步压力分摊到多个服务器。</p><h4 id="增量复制"><a href="#增量复制" class="headerlink" title="增量复制"></a>增量复制</h4><p>主从服务器再完成第一次同步后，会基于长连接进行命令传播。<br>这有个问题，就是网络的不稳定性。<br>一旦网络断开，就无法保持数据一致性。<br>2.8之前，断开恢复会进行一次全量复制，这种开销是很恐怖的。<br>从2.8开始，从服务器会采用增量复制，继续同步，也就是只会把网络断开期间主服务器接收到的写操作命令，同步给从服务器。</p><p>主要有3步：<br>1从服务器在恢复网络后，会发送psync命令到主服务器，与第一次有区别，offset参数不是-1<br>2主服务器收到命令后，然后用continue响应命令告诉从服务器，要 采用增量复制的方式同步数据；<br>3然后主服务器将从服务器断线期间，所执行的写命令发送给从服务器，然后从服务器执行这些命令。</p><h5 id="Q：主服务器如何知道要传输哪些增量数据发送给从服务器？"><a href="#Q：主服务器如何知道要传输哪些增量数据发送给从服务器？" class="headerlink" title="Q：主服务器如何知道要传输哪些增量数据发送给从服务器？"></a>Q：主服务器如何知道要传输哪些增量数据发送给从服务器？</h5><p>依靠两个东西：<br>repl_backlog_buff环形缓冲区，用于主从服务器断连后，从中找到差异的数据；<br>replication offset，标记上面的那个缓冲区的同步进度，主从服务器都有各自的偏移量，主服务器使用master_repl_offset来记录自己写到的位置，从服务器使用slave_repl_offset 来记录自己 读到的位置</p><h5 id="Q：repl-backlog-buff缓冲区是什么时候写入的呢？"><a href="#Q：repl-backlog-buff缓冲区是什么时候写入的呢？" class="headerlink" title="Q：repl_backlog_buff缓冲区是什么时候写入的呢？"></a>Q：repl_backlog_buff缓冲区是什么时候写入的呢？</h5><p>在主服务器进行命令传播时，不仅会将写命令发送从服务器，还会将写命令写入到repl_backlog_buff 缓冲区里，因此，这个缓冲区里会保存着最近传播到写命令</p><p>当网络断开后，当从服务器重新连上主服务器时，从服务器会通过psync命令将自己的复制偏移量，slave_repl_ofset发送给主服务器，主服务根据自己的master_repl_offset和slave_repl_offset 之间的差距，然后决定对从服务器执行哪种同步操作：<br>如果从服务器要读取的数据数据在缓冲区，采用增量同步；<br>否则，采用全量同步。</p><p><strong>当主服务器在 repl_backlog_buffer 中找到主从服务器差异（增量）的数据后，就会将增量的数据写入到 replication buffer 缓冲区，这个缓冲区我们前面也提到过，它是缓存将要传播给从服务器的命令。</strong></p><p>repl_backlog_buffer 缓行缓冲区的默认大小是 1M，并且由于它是一个环形缓冲区，所以当缓冲区写满后，主服务器继续写入的话，就会覆盖之前的数据。</p><p>因此，当主服务器的写入速度远超于从服务器的读取速度，缓冲区的数据一下就会被覆盖。</p><p>那么在网络恢复时，如果从服务器想读的数据已经被覆盖了，主服务器就会采用全量同步，这个方式比增量同步的性能损耗要大很多。</p><h5 id="Q：如何解决覆盖问题？"><a href="#Q：如何解决覆盖问题？" class="headerlink" title="Q：如何解决覆盖问题？"></a>Q：如何解决覆盖问题？</h5><p>因此，为了避免在网络恢复时，主服务器频繁地使用全量同步的方式，我们应该调整下 repl_backlog_buffer 缓冲区大小，尽可能的大一些，减少出现从服务器要读取的数据被覆盖的概率，从而使得主服务器采用增量同步的方式。</p><p>那 repl_backlog_buffer 缓冲区具体要调整到多大呢？</p><p>repl_backlog_buffer 最小的大小可以根据这面这个公式估算。</p><p>second* write_size_per_second</p><p>我来解释下这个公式的意思：</p><ul><li><p>second 为从服务器断线后重新连接上主服务器所需的平均 时间(以秒计算)。</p></li><li><p>write_size_per_second 则是主服务器平均每秒产生的写命令数据量大小。</p></li></ul><p>举个例子，如果主服务器平均每秒产生 1 MB 的写命令，而从服务器断线之后平均要 5 秒才能重新连接主服务器。</p><p>那么 repl_backlog_buffer 大小就不能低于 5 MB，否则新写地命令就会覆盖旧数据了。</p><p>当然，为了应对一些突发的情况，可以将 repl_backlog_buffer 的大小设置为此基础上的 2 倍，也就是 10 MB。</p><p>关于 repl_backlog_buffer 大小修改的方法，只需要修改配置文件里下面这个参数项的值就可以。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>主从复制共有三种模式：<strong>全量复制、基于长连接的命令传播、增量复制</strong>。</p><p>主从服务器第一次同步的时候，就是采用全量复制，此时主服务器会两个耗时的地方，分别是生成 RDB 文件和传输 RDB 文件。为了避免过多的从服务器和主服务器进行全量复制，可以把一部分从服务器升级为「经理角色」，让它也有自己的从服务器，通过这样可以分摊主服务器的压力。</p><p>第一次同步完成后，主从服务器都会维护着一个长连接，主服务器在接收到写操作命令后，就会通过这个连接将写命令传播给从服务器，来保证主从服务器的数据一致性。</p><p>如果遇到网络断开，增量复制就可以上场了，不过这个还跟 repl_backlog_size 这个大小有关系。</p><p>如果它配置的过小，主从服务器网络恢复时，可能发生「从服务器」想读的数据已经被覆盖了，那么这时就会导致主服务器采用全量复制的方式。所以为了避免这种情况的频繁发生，要调大这个参数的值，以降低主从服务器断开后全量同步的概率。</p><h2 id="双写一致性"><a href="#双写一致性" class="headerlink" title="双写一致性"></a>双写一致性</h2><p><strong>先更新数据库，再更新缓存</strong><br>一是 db：1 2  缓存：2 1</p><p>二是 非原子操作，缓存可能会失败</p><p><strong>先更新缓存，再更新数据库</strong><br> 缓存：1 2 db：2 1</p><p>加分布式锁，保证一个时间只允许一个请求更新？  性能差，过期很快</p><p>旁路缓存策略。</p><ul><li><p>先删除缓存，再更新数据库；<br>缓存：  A删 B读旧改</p></li><li><p>先更新数据库，再删除缓存。<br>一是会写问题 A读db  B更db B写缓存 A写旧缓存<br>二是删除失败  写db后，删除失败，等过期才回写生效</p></li></ul><p>缓存过期 + 延迟双删<br>第二次删除前加睡眠，确保A请求在双删内部时间中，B能够读取db，回写缓存，然后A睡醒再删除缓存。</p><p>这方案尽可能保证一致性，极端情况，也会出现不一致。<br>比如，第二次的删除全部崩溃，这样，与先删缓存，再更新数据无差别。</p><p><strong>如何保证「先更新数据库 ，再删除缓存」这两个操作能执行成功？</strong><br>一 是重试机制<br>二 是 订阅binlog，再操作缓存。</p><p>基于消息队列的重试</p><ol><li>更新数据库数据；</li><li>缓存因为种种问题删除失败</li><li>将需要删除的key发送至消息队列</li><li>自己消费消息，获得需要删除的key</li><li>继续重试删除操作，直到成功</li></ol><p>基于binlog的阿里中间件canal<br><strong>canal 工作原理</strong>  canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump（转储） 协议，MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )，canal 解析 binary log 对象(原始为 byte 流)</p><p>摘抄自：小林coding</p><hr><h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><h4 id="为什么要主从复制"><a href="#为什么要主从复制" class="headerlink" title="为什么要主从复制?"></a>为什么要主从复制?</h4><p>1数据冗余 “数据的热备份”  2单机故障 “服务冗余”  3读写分离 “增加读请求能力”  4负载均衡 “分散单服务的压力”  5 高可用的基石  “哨兵和集群化”</p><h4 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h4><p>将一台Redis服务器的数据，复制到其他Redis节点上，前者是主节点，后者是从节点，写操作交给主节点，读操作主要给从节点。</p><h4 id="Redis主从工作原理"><a href="#Redis主从工作原理" class="headerlink" title="Redis主从工作原理"></a>Redis主从工作原理</h4><p>slave节点初次连接master节点，会发送psync命令，并且触发全量复制，此时master节点fork一个后台进程，开始生成一份RDB快照，同时将那些从外面接收  到写命令缓存到缓冲区中，RDB文件生成完毕后，将此文件发送给slave节点，slave节点写入磁盘，再从磁盘价值到内存，接着master会将增加缓冲区的写命令发送给slave，slave执行写命令并同步数据，如果slave节点和master节点因网络故障而中断，会自动重连，连接之后master节点会复制缺少的数据给slave节点。</p><h6 id="同步流程"><a href="#同步流程" class="headerlink" title="同步流程"></a>同步流程</h6><p>建立长连接，  全量数据同步，  增量同步：命令传播，数据反复同步。</p><h5 id="主从同步类型"><a href="#主从同步类型" class="headerlink" title="主从同步类型"></a>主从同步类型</h5><p>1全量复制 全量同步一般发生在slave初始化过程，这时slave需要将master上的所有数据复制一份；  2增量复制  增量同步一般是slave初始化后开始正常工作时，主服务器发生写操作同步到从服务器的过程；</p><p>主从刚连接，全量同步，再增量同步；  redis优先考虑增量，如果不成功，就是会全量。</p><h5 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h5><p>runId 主节点ID  offset 复制便宜量  replication buffer 内部队列缓冲区  建立连接时创建，全量和增量都会用  repl_backlog_buffer 环形缓冲区  开启命令传播之前，会建立buffer。  buffer记录当前的master接收到新的写操作，offset和命令本身，是所有slave公用的buffer，salve发送psync之后，会和master的offset比较，，来决定是否增量复制。</p><h5 id="全量复制流程-（初始化）"><a href="#全量复制流程-（初始化）" class="headerlink" title="全量复制流程 （初始化）"></a>全量复制流程 （初始化）</h5><ul><li><p>master连接slave：【slave上输入save of命令】，发送psync ？ -1 命令，用于同步数据  “？” 表示是master的runID，“-1”表示offset第一次复制；</p></li><li><p>master回复ACK告知slave，它的runId和offset，slave将其保存</p></li><li><p>master fork子进程（如果单线程做耗时动作，性能非常差），生成RDB+AOF组合快照，然后向所有slave发送快照文件，并通过写时复制技术，继续执行接下来用户的一些写命令，并存放到replication buff 缓冲区当中；</p></li><li><p>slave 接收后，把本地数据清空，然后把快照加载到本地磁盘，接着加载到内存来执行。</p></li><li><p>master 发送replication buffer缓冲区给salve同步</p></li></ul><h5 id="增量复制流程-（重连接）"><a href="#增量复制流程-（重连接）" class="headerlink" title="增量复制流程 （重连接）"></a>增量复制流程 （重连接）</h5><p>1从服务器在恢复网络后，会发送psync runId offset命令到主服务器，与第一次有区别，offset参数不是-1 ；（runId比较，如果不一样，就全量复制）  2主服务器收到命令后，两offset求距离差，小于replication buff缓冲区大小，然后用continue响应命令告诉从服务器，要 采用增量复制的方式同步数据；  3然后主服务器将从服务器断线期间，所执行的写命令发送给从服务器，然后从服务器执行这些命令。</p><h5 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h5><h5 id="Q：长连接还是短连接？"><a href="#Q：长连接还是短连接？" class="headerlink" title="Q：长连接还是短连接？"></a>Q：长连接还是短连接？</h5><p>长，减少连接开销；</p><h5 id="Q：判断某个节点是否正常？"><a href="#Q：判断某个节点是否正常？" class="headerlink" title="Q：判断某个节点是否正常？"></a>Q：判断某个节点是否正常？</h5><p>主从ping-pong心跳检查机制，一半以上的节点区ping一个节点，如果没有pong回应，集群认为该节点宕机；  master 10s发送一次，检查对方在线  slave 1s发一次，给从节点发送自己的复制偏移量，获取最新变更+检查对方在线</p><h5 id="Q：过期key如何处理？"><a href="#Q：过期key如何处理？" class="headerlink" title="Q：过期key如何处理？"></a>Q：过期key如何处理？</h5><p>处理key或者淘汰key，master模拟del命令发送给slave；</p><h4 id="Q-redis主从切换如何减少数据丢失？"><a href="#Q-redis主从切换如何减少数据丢失？" class="headerlink" title="Q: redis主从切换如何减少数据丢失？"></a><strong>Q: redis主从切换如何减少数据丢失？</strong></h4><p>1 一般是异步复制丢失。  解决：  一master本地缓存或持久化磁盘，在一段时间后写入新master；  二先写入rocketMQ，再发送一个延时消息去写入master。  2 脑裂丢失  脑裂就是一部分slave误以为master已死，选举新的master后，旧的master依旧存活，导致出现了两个master，从而读写数据混乱。  避免脑裂：  一种是投票超过半数作为leader，才被其他节点认可，这也是zookeeper方案。  重点是第二种，哨兵模式。  哨兵群会监控节点存活情况，当超过半数哨兵认为master主观下线，即master转为客户下线，就要推举新master。  哨兵内部讨论，每人1票，投超过半数，成为选举人。  选1举人，根据先优先级，再是节点的同步率，最后是创建时间，选择新的master。  slave会全量同步新的master。  旧的master恢复后，降级为slave，也会全量同步。  这个过程中，旧master全量同步过程就是产生<strong>脑裂丢失</strong>  解决：  两个参数  min-slaves-to-write 2 至少2个slave  min-slaves-max-lag 5 至少5秒  至少2个slave进行同步复制延迟不超过5秒，一旦违反，master停止接收任何请求，让原master下线，选举新的master。尽可能</p><h4 id="Q：redis如何做到故障自动切换？"><a href="#Q：redis如何做到故障自动切换？" class="headerlink" title="Q：redis如何做到故障自动切换？"></a>Q：redis如何做到故障自动切换？</h4><p>哨兵模式内部选举出一个选举人，选举人选举新的master。</p><h4 id="Q：数据备份方式"><a href="#Q：数据备份方式" class="headerlink" title="Q：数据备份方式"></a>Q：数据备份方式</h4><p>1热备  主库承担业务流量，通过实时备份数据到从库。</p><p>2冷备  主库承担业务流量，通过定期或者手动执行脚本备份数据到从库。  （redis）</p><p>3多活  由两个数据中心承担业务流量，互为主备，一般主数据中心会承担大部分流量，备数据会承担小部分流量。（多地域）</p><p>摘抄自：tojson</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;Redis数据结构&quot;&gt;&lt;a href=&quot;#Redis数据结构&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="Redis" scheme="https://missionodd.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>设计跳表 | 栈记录插入前驱可能，丢硬币控制插入层级（java）</title>
    <link href="https://missionodd.github.io/2022/02/10/design-skiplist/"/>
    <id>https://missionodd.github.io/2022/02/10/design-skiplist/</id>
    <published>2022-02-10T04:30:37.000Z</published>
    <updated>2022-02-16T10:19:23.648Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/design-skiplist/" target="_blank" rel="noopener">the leetcode link</a></p><h3 id="1206-设计跳表"><a href="#1206-设计跳表" class="headerlink" title="1206 设计跳表"></a>1206 设计跳表</h3><p>不使用任何库函数，设计一个 跳表 。</p><p>跳表 是在 O(log(n)) 时间内完成增加、删除、搜索操作的数据结构。跳表相比于树堆与红黑树，其功能与性能相当，并且跳表的代码长度相较下更短，其设计思想与链表相似。</p><p>例如，一个跳表包含 [30, 40, 50, 60, 70, 90] ，然后增加 80、45 到跳表中，以下图的方式操作：<br><a href="1506_skiplist.gif">skiplist</a></p><p>Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons</p><p>跳表中有很多层，每一层是一个短的链表。在第一层的作用下，增加、删除和搜索操作的时间复杂度不超过 O(n)。跳表的每一个操作的平均时间复杂度是 O(log(n))，空间复杂度是 O(n)。</p><p>了解更多 : <a href="https://en.wikipedia.org/wiki/Skip_list" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Skip_list</a></p><p>在本题中，你的设计应该要包含这些函数：</p><p>bool search(int target) : 返回target是否存在于跳表中。<br>void add(int num): 插入一个元素到跳表。<br>bool erase(int num): 在跳表中删除一个值，如果 num 不存在，直接返回false. 如果存在多个 num ，删除其中任意一个即可。<br>注意，跳表中可能存在多个相同的值，你的代码需要处理这种情况。</p><p>示例 1:</p><p>输入<br>[“Skiplist”, “add”, “add”, “add”, “search”, “add”, “search”, “erase”, “erase”, “search”]<br>[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]<br>输出<br>[null, null, null, null, false, null, true, false, true, false]</p><p>解释<br>Skiplist skiplist = new Skiplist();<br>skiplist.add(1);<br>skiplist.add(2);<br>skiplist.add(3);<br>skiplist.search(0);   // 返回 false<br>skiplist.add(4);<br>skiplist.search(1);   // 返回 true<br>skiplist.erase(0);    // 返回 false，0 不在跳表中<br>skiplist.erase(1);    // 返回 true<br>skiplist.search(1);   // 返回 false，1 已被擦除</p><p>提示:</p><p>0 &lt;= num, target &lt;= 2 <em> 104<br>调用search, add,  erase操作次数不大于 5 </em> 104</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>设计Node，定义max_level，head ，level</li><li>通用步骤：枚举寻找目标所有层的前驱，过程是：先同层跳链表至前驱或尾节点，再进入下一层反复；</li><li>查询逻辑：在步骤2枚举过程中，一旦发现是前驱，则返回true；</li><li>删除逻辑：在步骤2枚举过程中，一旦发现是前驱，则同层的前驱指向其后驱，完成一次删除后进入下一层继续删除。优化：之后把可能产生的孤立头结点也删除；</li><li>插入逻辑：</li></ol><ul><li>第1步，在步骤2枚举过程中，一旦发现是前驱的可能，则压栈；这将得到一个能从底层至高层弹出所有前驱可能的栈。</li><li>第2步，先底层插入，才开始反复丢01硬币，概率性地从二层至高层插入新节点，以起始丢连续1的个数来控制插入多高层级，过程是：先不丢硬币，底层前驱出栈，新节点必插入在其后方，然后才开始丢硬币，决定是否插入次高一层，不插入则结束；如果要插入，就从栈取出当前层前驱，新节点插入在其后方形成连接，如果丢硬币运气太好，栈用完仍需插入，此时说明高度已超出原有层，则新建一层：新建头节点作为前驱，后方插入新节点。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Skiplist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_LEVEL = <span class="number">32</span>;  <span class="comment">// 层级最大阈值</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        Node right; <span class="comment">//指向同层的后驱</span></span><br><span class="line">        Node down; <span class="comment">//指向同节点的下一层，底层为空</span></span><br><span class="line">        Node(<span class="keyword">int</span> val, Node right, Node down)&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">            <span class="keyword">this</span>.down = down;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Node head; <span class="comment">// 头节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> level; <span class="comment">// 当前最大层级</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Skiplist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        level = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        Node node = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(node.right!=<span class="keyword">null</span> &amp;&amp; node.right.val&lt;target) node = node.right;  <span class="comment">// 同层跳链表,寻找当前层的前驱</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span> &amp;&amp; node.right.val == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            node = node.down;  <span class="comment">// 进下一层</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 寻找新节点的所有符合条件的可能前驱节点，用栈记录下</span></span><br><span class="line">        Deque&lt;Node&gt; prevStack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Node node = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(node.right!=<span class="keyword">null</span> &amp;&amp; node.right.val&lt;num) node = node.right;  <span class="comment">// 同层跳链表,寻找当前层的前驱</span></span><br><span class="line"></span><br><span class="line">            prevStack.push(node); <span class="comment">// 高level到低level压栈 保存所有前驱节点</span></span><br><span class="line"></span><br><span class="line">            node = node.down;  <span class="comment">// 进下一层</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 反复丢01硬币，决定插入新节点的level，底level必须插入，硬币初始化为1</span></span><br><span class="line">        <span class="keyword">int</span> coins = <span class="number">1</span>;  <span class="comment">// 硬币初始化为1</span></span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        Node prev = <span class="keyword">null</span>, newNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(coins == <span class="number">1</span> &amp;&amp; level &lt; MAX_LEVEL)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!prevStack.isEmpty())&#123;</span><br><span class="line">                <span class="comment">// 当有前驱，高level到低level弹栈</span></span><br><span class="line">                prev = prevStack.pop();</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 当无前驱，则新建head作为前驱节点，level++</span></span><br><span class="line">                head = <span class="keyword">new</span> Node(-<span class="number">1</span>, <span class="keyword">null</span>, head);</span><br><span class="line">                prev = head;</span><br><span class="line">                level++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//插入到当前层的链表上</span></span><br><span class="line">            newNode = <span class="keyword">new</span> Node(num, prev.right , newNode);</span><br><span class="line">            prev.right = newNode;</span><br><span class="line"></span><br><span class="line">            coins = rand.nextInt(<span class="number">2</span>);  <span class="comment">//丢硬币 [0,1]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        Node node = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">             <span class="keyword">while</span>(node.right!=<span class="keyword">null</span> &amp;&amp; node.right.val&lt;num) node = node.right;  <span class="comment">// 同层跳链表,寻找当前层的前驱</span></span><br><span class="line">            <span class="comment">// 删除当前层的节点</span></span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span> &amp;&amp; node.right.val == num)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                node.right = node.right.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            node = node.down;  <span class="comment">// 进下一层</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除孤立头节点</span></span><br><span class="line">        <span class="keyword">while</span> (level &gt; <span class="number">1</span> &amp;&amp; head.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            head = head.down;</span><br><span class="line">            level--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/design-skiplist/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the leetcode link&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1206-设计跳表&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="跳表" scheme="https://missionodd.github.io/tags/跳表/"/>
    
    <category term="模拟" scheme="https://missionodd.github.io/tags/模拟/"/>
    
  </entry>
  
  <entry>
    <title>用 Rand7() 实现 Rand10() | 分页 | 翻看日历的时候，把题做出来</title>
    <link href="https://missionodd.github.io/2022/02/04/implement-rand10-using-rand7/"/>
    <id>https://missionodd.github.io/2022/02/04/implement-rand10-using-rand7/</id>
    <published>2022-02-04T04:30:37.000Z</published>
    <updated>2022-02-16T10:31:48.316Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/implement-rand10-using-rand7/" target="_blank" rel="noopener">the leetcode link</a></p><blockquote><ol start="470"><li>用 Rand7() 实现 Rand10()<br>给定方法 rand7 可生成 [1,7] 范围内的均匀随机整数，试写一个方法 rand10 生成 [1,10] 范围内的均匀随机整数。</li></ol></blockquote><blockquote><p>你只能调用 rand7() 且不能调用其他方法。请不要使用系统的 Math.random() 方法。</p></blockquote><blockquote><p>每个测试用例将有一个内部参数 n，即你实现的函数 rand10() 在测试时将被调用的次数。请注意，这不是传递给 rand10() 的参数。</p></blockquote><blockquote><p>示例 1:<br>输入: 1<br>输出: [2]</p></blockquote><blockquote><p>示例 2:<br>输入: 2<br>输出: [2,8]</p></blockquote><blockquote><p>示例 3:<br>输入: 3<br>输出: [3,8,10]</p></blockquote><blockquote><p>提示:<br>1 &lt;= n &lt;= 105</p></blockquote><h3 id="随机择日"><a href="#随机择日" class="headerlink" title="随机择日"></a>随机择日</h3><p>一个名为卢迪的宅男，他相信着，八月是循环的高发期，且时常有”/remake”自己的想法。</p><p>于是，<strong>他计划在2022年8月的随机一天，去坐公交车</strong>，为了遇见车途中可能发生的时空循环。</p><figure class="image-box">                <img src="https://pic.leetcode-cn.com/1644778673-nOHaQj-image.png" alt="image.png" title class>                <p>image.png</p>            </figure><p>看日历，很巧妙，2022年的8月的1号刚好是从周一开始。</p><p>一周有7天，而本题又很巧有Random7()的功能。</p><p>虽然卢迪不会做题，但他想了一个方法，<strong>利用Random7()，实现了等概率随机选择哪一天上公交</strong>！</p><p>这小伙子怎么做呢？</p><p>只见他眼疾手快，啪一下，直接写一行代码 <code>return rand7()</code>，</p><p>竟然把Ramdom7()作为输出结果。。。。。。真无语了</p><blockquote><p>第一次提交，输出结果是几，他就选择周几，记为a<br>第二次提交，输出结果是几，他就选择日历上的第几行，记为b</p></blockquote><p><code>补充说明，8月1号所在行是第1行，9月5号所在行是第6行。</code></p><p>当然，这样抽选的范围是从8月1号到9月18号，为49天。</p><p>抽到每一天的概率都是(1/7)*(1/7)，也相当实现Random49()。</p><p>但这不是他想要的结果，他<strong>只会在8月份中选择一天</strong>。</p><p>如果抽到9月份，他<strong>拒绝采样</strong>，重复第一次和二次的提交过程，重新择日。</p><p>有了拒绝采样步骤，就能实现Random31()，这才是他想要的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">他的随机过程：</span><br><span class="line">a=5，b=5，很不巧，8月没有这一天。拒绝采样，重新再来；</span><br><span class="line">a=2，b=7，很不巧，8月没有这一天。拒绝采样，重新再来；</span><br><span class="line">a=2，b=4，成功随机定位到23号出伏日；</span><br></pre></td></tr></table></figure><p><strong>Q：已知a和b，如何用公式计算出几号日期？</strong></p><blockquote><p>利用简单的分页公式：<strong>index = (pageNum - 1) * size + currentPageIndex</strong><br>页号是从1开始，把一周看作一页，得到： 几号日期 = (b-1) <em> 7 + a<br>例如：23号 = (4-1) </em> 7 + 2</p></blockquote><p>用<strong>分页思想</strong>，也可以得到一条<strong>随机数公式</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randAB = (randB-1) * A + randA</span><br></pre></td></tr></table></figure></p><p>比如上述例子，通过两个Random7()推出Random49()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand49  = (rand7-1) * 7 + rand7</span><br></pre></td></tr></table></figure></p><h3 id="关于拒绝采样范围过大的问题"><a href="#关于拒绝采样范围过大的问题" class="headerlink" title="关于拒绝采样范围过大的问题"></a>关于拒绝采样范围过大的问题</h3><p>卢迪突然接到父母指示，8月10号后不能出家门。</p><p>他只能计划在8月1号到8月10号中随机选择一天，意味着要实现Random10()。</p><p>他按照之前的方法操作，由于拒绝采样的范围过大，他总是抽取到8月10号以后的日子。</p><p>时间已过去很久，依然没抽中前10天，运气过背，他快抽麻了……</p><p>于是，他想办法优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">抽中第 1，11，21，31的位置就是1号出发</span><br><span class="line">抽中第 2，12，22，32的位置就是2号出发</span><br><span class="line">抽中第 3，13，23，33的位置就是3号出发</span><br><span class="line">......</span><br><span class="line">抽中第10，20，30，40的位置就是10号出发</span><br></pre></td></tr></table></figure></p><p>这样，采样范围由10就变成40，他马上抽中结果了。</p><p>这就是取余数的思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">几号日期 = index %10 + 1</span><br></pre></td></tr></table></figure></p><p>先决定取样范围：应为N的倍数，再用模N+1方式得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while(index&gt;40)&#123;</span><br><span class="line">    index = rand7()+(rand7()-1)*7;</span><br><span class="line">&#125;</span><br><span class="line">return index%10+1;</span><br></pre></td></tr></table></figure></p><h3 id="本题代码"><a href="#本题代码" class="headerlink" title="本题代码"></a>本题代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">SolBase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">41</span>;</span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">40</span>)&#123;</span><br><span class="line">            index = (rand7()-<span class="number">1</span>)*<span class="number">7</span> + rand7();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/implement-rand10-using-rand7/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the leetcode link&lt;/a&gt;&lt;/p&gt;
&lt;blockq</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="模拟" scheme="https://missionodd.github.io/tags/模拟/"/>
    
  </entry>
  
  <entry>
    <title>双端递减队列 | 滑动窗口最大值</title>
    <link href="https://missionodd.github.io/2022/02/02/sliding-window-maximum/"/>
    <id>https://missionodd.github.io/2022/02/02/sliding-window-maximum/</id>
    <published>2022-02-02T04:30:37.000Z</published>
    <updated>2022-02-16T10:08:36.156Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array" target="_blank" rel="noopener">the leetcode link</a></p><blockquote><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p></blockquote><blockquote><p>返回 滑动窗口中的最大值 。</p></blockquote><blockquote><p>示例 1：<br>输入：nums = [1,3,-1,-3,5,3,6,7], k = 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值</p><hr><p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p></blockquote><blockquote><p>示例 2：<br>输入：nums = [1], k = 1<br>输出：[1]</p></blockquote><blockquote><p>提示：<br>1 &lt;= nums.length &lt;= 105<br>-104 &lt;= nums[i] &lt;= 104<br>1 &lt;= k &lt;= nums.length</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>定义递减的双端链表</li><li>链尾循环，舍弃比当前值小的元素，并插入当前值，注意空校验</li><li>先校验是否足够组成窗口</li><li>若3步骤通过，窗口最大值取队头的元素</li><li>若3步骤通过，判断链头元素是否在下一个窗口内，不在则舍弃</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        1. 定义递减的双端链表</span></span><br><span class="line"><span class="comment">        2. 链尾循环，舍弃比当前值小的元素，并插入当前值，注意空校验</span></span><br><span class="line"><span class="comment">        3. 先校验是否足够组成窗口</span></span><br><span class="line"><span class="comment">        4. 窗口最大值取队头的元素</span></span><br><span class="line"><span class="comment">        5. 判断链头元素是否在下一个窗口内，不在则舍弃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;k) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 1. 定义递减的双端链表</span></span><br><span class="line">        LinkedList&lt;Integer&gt; d = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length-k+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;nums.length;r++)&#123;</span><br><span class="line">            <span class="comment">// 2. 链尾循环，舍弃比当前值小的元素，并插入当前值，注意空校验</span></span><br><span class="line">            <span class="keyword">while</span>(!d.isEmpty() &amp;&amp; d.peekLast()&lt;nums[r])&#123;</span><br><span class="line">                d.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">            d.addLast(nums[r]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 先校验是否足够组成窗口</span></span><br><span class="line">            <span class="keyword">if</span>(r-k+<span class="number">1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 4. 窗口最大值取队头的元素</span></span><br><span class="line">               res[index++] = d.peekFirst();</span><br><span class="line">                <span class="comment">// 5. 判断链头元素是否在下一个窗口内，不在则舍弃</span></span><br><span class="line">               <span class="keyword">if</span>(d.peekFirst()== nums[r-k+<span class="number">1</span>])&#123;</span><br><span class="line">                    d.removeFirst();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/search-in-rotated-sorted-array&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the leetcode link&lt;/a&gt;&lt;/p&gt;
&lt;block</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="双端队列" scheme="https://missionodd.github.io/tags/双端队列/"/>
    
    <category term="滑动窗口" scheme="https://missionodd.github.io/tags/滑动窗口/"/>
    
  </entry>
  
  <entry>
    <title>位运算 | 2bit标识3状态 | 有限状态自动机</title>
    <link href="https://missionodd.github.io/2022/02/02/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/"/>
    <id>https://missionodd.github.io/2022/02/02/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/</id>
    <published>2022-02-02T04:30:37.000Z</published>
    <updated>2022-02-16T10:13:26.193Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof" target="_blank" rel="noopener">the leetcode link</a></p><blockquote><p>剑指 Offer 56 - II. 数组中数字出现的次数 II<br>在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p></blockquote><blockquote><p>示例 1：<br>输入：nums = [3,4,3,3]<br>输出：4</p></blockquote><blockquote><p>示例 2：<br>输入：nums = [9,1,7,9,7,9,7]<br>输出：1</p></blockquote><blockquote><p>限制：<br>1 &lt;= nums.length &lt;= 10000<br>1 &lt;= nums[i] &lt; 2^31</p></blockquote><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>本题解主要是根据k神题解的<strong>有限状态自动机</strong>思路，补充了一些数据结构的可视化，方便大家理解。</p><h3 id="一个结论"><a href="#一个结论" class="headerlink" title="一个结论"></a>一个结论</h3><p><strong>如果所有数字都出现3次，把所有数字的每一个二进制位分别求和，各位置的结果均为 3 的倍数。</strong><br>对于本题，我们分别统计所有数字的每二进制位中 1 的出现次数，并把各位置的结果<strong>分别对 3 求余，结果得到只出现一次的数字</strong>。<br>比如： [3,4,3,3]<br>|  0 |  0 |  0 |  1 |  1 |<br>|—-|—-|—-|—-|—-|<br>|  0 |  0 |  1 |  0 |  0 |<br>|  0 |  0 |  0 |  1 |  1 |<br>|  0 |  0 |  0 |  1 |  1 |<br>出现次数：<br>|  0 |  0 |  1 |  3 |  3 |<br>|—-|—-|—-|—-|—-|<br>模3：<br>|  0 |  0 |  1 |  0 |  0 |<br>|—-|—-|—-|—-|—-|<br>得到结果：4</p><h2 id="方法：有限状态自动机"><a href="#方法：有限状态自动机" class="headerlink" title="方法：有限状态自动机"></a>方法：有限状态自动机</h2><p>对于所有数字中的某二进制位 1 的个数mod 3，会得到3个结果，即存在3种状态：0,1,2。</p><p>1bit只有0和1，无法表示3种状态。</p><p>于是，我们把<strong>每二进制位的位置，用2bit表示：00，01，10</strong><br>比如：<br>各位的出现次数及其对应的mod3状态：<br>|  0 |  0 |  1 |  2 |  3 |<br>|—-|—-|—-|—-|—-|<br>| 00 | 00 | 01 | 10 | 00 |</p><ul><li>对于每一个二进制位置，累加过程mod3的状态转移是循环的：<br><code>出现0次：00</code> -》 <code>出现1次：01</code> -》 <code>出现2次：10</code> -》<code>出现3次：00</code> -》<code>出现4次：01</code> …</li><li>对于不同两个二进制位置，状态同步转移，比如一个位出现1次，另一个位出现4次，此时次数mod3状态是一致的，当新累加一个数，两者状态都要一次转移，可能入0转移到自己，可能入1就到下个状态。</li></ul><h3 id="Q：这样2bit的结构具体如何在代码中表达？"><a href="#Q：这样2bit的结构具体如何在代码中表达？" class="headerlink" title="Q：这样2bit的结构具体如何在代码中表达？"></a>Q：这样2bit的结构具体如何在代码中表达？</h3><p>定义两个变量表示当前mod3状态：ones，twos<br>ones表示所有2bit二进制位的所有第一位；<br>twos表示所有2bit二进制位的所有第二位；<br>比如：<br>出现次数mod3状态：<br>| 0<strong>0</strong> | 0<strong>0</strong> | 1<strong>0</strong> | 0<strong>1</strong> | 0<strong>1</strong> |<br>|—-|—-|—-|—-|—-|<br>ones是：<br>|  <strong>0</strong> |  <strong>0</strong> |  <strong>0</strong> |  <strong>1</strong> |  <strong>1</strong> |<br>|—-|—-|—-|—-|—-|<br>twos是：<br>|  0 |  0 |  1 |  0 |  0 |<br>|—-|—-|—-|—-|—-|</p><h3 id="状态转移方程推导"><a href="#状态转移方程推导" class="headerlink" title="状态转移方程推导"></a>状态转移方程推导</h3><p>对于某一个二进制位：<br>定义第一位one，第二位two，新累加二进制位数：n<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> two == <span class="number">0</span> &amp;&amp; one == <span class="number">0</span>:</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    one = ~one  <span class="comment"># one = 1</span></span><br><span class="line">    two = two   <span class="comment"># two = 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> two == <span class="number">0</span> &amp;&amp; one == <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    one = ~one  <span class="comment"># one = 0</span></span><br><span class="line">    two = ~two  <span class="comment"># two = 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> two == <span class="number">1</span> &amp;&amp; one == <span class="number">0</span>:</span><br><span class="line">   <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    one = one   <span class="comment"># one = 0</span></span><br><span class="line">    two = ~two  <span class="comment"># two = 0</span></span><br></pre></td></tr></table></figure></p><p>已知位运算特性：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">特性1：异或运算：x ^ 0 = x​ ， x ^ 1 = ~x</span><br><span class="line">特性2：与运算：x &amp; 0 = 0 ， x &amp; 1 = x</span><br></pre></td></tr></table></figure></p><p>观察可知：<br>a.当 two是1时，one不变<br>b.当 two是0时，入1则one取反，入0则one不变 <code>（符合特性1: one = one^n）</code><br><code>（a,b符合特性2: one = (one^n) &amp; ~two）</code><br>c.当 one变为0时，入1则two取反，入0则two不变<code>（符合特性1：two = two^n）</code><br>d.当 one变为1时，two不变<br><code>（c,d符合特性2: two = (two^n) &amp; ~one）</code></p><p>推导简化公式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one = one ^ n &amp; ~two</span><br><span class="line">two = two ^ n &amp; ~one</span><br></pre></td></tr></table></figure></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int singleNumber(int[] nums) &#123;</span><br><span class="line">        int ones = 0, twos = 0;</span><br><span class="line">        for(int num : nums)&#123;</span><br><span class="line">            ones = ones ^ num &amp; ~twos;</span><br><span class="line">            twos = twos ^ num &amp; ~ones;</span><br><span class="line">        &#125;</span><br><span class="line">        return ones;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the leetcode lin</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="位运算" scheme="https://missionodd.github.io/tags/位运算/"/>
    
  </entry>
  
  <entry>
    <title>jvm | 虚拟机全面扫盲+深入理解的原创笔记</title>
    <link href="https://missionodd.github.io/2022/02/01/jvm-notes/"/>
    <id>https://missionodd.github.io/2022/02/01/jvm-notes/</id>
    <published>2022-02-01T05:50:37.000Z</published>
    <updated>2022-03-17T15:25:50.024Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引言：</strong><br>来源：知识结构来自河北王校长的JVM系列，博主基于视频自写笔记，并补充大量的延伸内容。<br>优点：笔记知识点关联性好，挖得深，延伸多。<br>缺点：缺少JVM与多线程结合的内容，以后会补充上；排版一般</p><h1 id="1-class文件"><a href="#1-class文件" class="headerlink" title="1. class文件"></a>1. class文件</h1><figure class="image-box">                <img src="image-20220208022707509.png" alt="class文件" title class>                <p>class文件</p>            </figure><p><a href="https://blog.csdn.net/lioncatch/article/details/105919391" target="_blank" rel="noopener">https://blog.csdn.net/lioncatch/article/details/105919391</a></p><p><a href="https://baijiahao.baidu.com/s?id=1717139924001321921&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1717139924001321921&amp;wfr=spider&amp;for=pc</a></p><p>8字节 2进制  Java文件编译之后</p><ul><li><h3 id="4字节魔数：标志文件类型；视频，照片也有魔数"><a href="#4字节魔数：标志文件类型；视频，照片也有魔数" class="headerlink" title="4字节魔数：标志文件类型；视频，照片也有魔数"></a>4字节魔数：标志文件类型；视频，照片也有魔数</h3></li><li><h3 id="次版本号和主版本号：标志JDK版本；兼容低版本问题"><a href="#次版本号和主版本号：标志JDK版本；兼容低版本问题" class="headerlink" title="次版本号和主版本号：标志JDK版本；兼容低版本问题"></a>次版本号和主版本号：标志JDK版本；兼容低版本问题</h3></li><li><h3 id="常量池计数器：记录后面常量池的常量（数据项）个数；※"><a href="#常量池计数器：记录后面常量池的常量（数据项）个数；※" class="headerlink" title="常量池计数器：记录后面常量池的常量（数据项）个数；※"></a>常量池计数器：记录后面常量池的常量（数据项）个数；※</h3></li><li><h3 id="常量池：字面量-符号引用"><a href="#常量池：字面量-符号引用" class="headerlink" title="常量池：字面量+符号引用"></a>常量池：字面量+符号引用</h3><p> 1.字面量：比较接近于Java语言层面的常量概念，如文本字符串、声明为final的常量值。<br> 2.符号引用<br>   package名字，权限命名，字段名称，方法名称，字段描述符，方法描述符，方法句柄，方法类型，动态调用点和动态常量（不了解）<br>   <strong>一句话：这部分就是常量池，装载了全部类的字段，方法，类名称的信息；</strong></p><figure class="image-box">                <img src="image_20220118183346.png?v=1&type=image&token=V1:3n03VpBe2yMBZgKD5g9o0h5d90CeNevbyQO6LX2UnvQ" alt title class>                <p></p>            </figure><figure class="image-box">                <img src="image-20220208023504211.png" alt="符号引用" title class>                <p>符号引用</p>            </figure><p><strong>每个常量项的第一个字节 对应上图中的tag标志 找到对应的结构</strong></p><figure class="image-box">                <img src="image_20220118170506.png?v=1&type=image&token=V1:6K2y024TT-YRQvmLRY5b09neyTtm2iaN319VPeQprHY" alt title class>                <p></p>            </figure><figure class="image-box">                <img src="image_20220118184004.png?v=1&type=image&token=V1:rLsRMkCAd22AUMMS2KXLkI8chGO6nlPHBPOsm1vbbXM" alt title class>                <p></p>            </figure><figure class="image-box">                <img src="image_20220118184033.png?v=1&type=image&token=V1:3CCva6EeaLck4wLZttiedHSfKB0KY8VF3QdPIXjTUjE" alt title class>                <p></p>            </figure></li></ul><ol start="2"><li>面试题</li></ol><ul><li><p>Q  哪些字面量会进入常量池中？</p><ol><li>【final修饰】的8种基本类型的值会进入常量池。</li><li>【非final类型】（包括static的）的8种基本类型的值，只有【double、float、long】的值会进入常量池。</li><li><p>常量池中包含的字符串类型字面量（【双引号引起来的字符串值】）。</p></li><li><p>final类型的8种基本类型的值会进常量池。</p></li><li><p>final类型（包括static的）的8种基本类型的值，只有double、float、long的值会进常量池。</p></li><li><p>常量池中包含的字符串类型字量（双引号引起来的字符串值）。</p></li></ol></li><li><p>java 字段名和方法名，有无长度限制？<br>A: 有，CONSTANT_Utf8_info 存储字符串字面量， 最大长度是65535，大小限制在小于64kb</p><figure class="image-box">                <img src="image_20220119024159.png?v=1&type=image&token=V1:W7pDbZc-acY3wco7miFQ9qcUzZDjMeym7ot3fpzX19A" alt title class>                <p></p>            </figure></li><li><p>Q 字符串有长度限制吗？是多少？<br>  答：</p><ol><li>运行期限制<br>首先字符串的内容是由一个字符数组 char[] 来存储的，由于数组的长度及索引是整数，且String类中返回字符串长度的方法length() 的返回值也是int ，所以通过查看java源码中的类Integer我们可以看到Integer的最大范围是2^31 -1,<br>由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。</li><li>编译时期限制<br>通过翻阅java虚拟机手册对class文件格式的定义以及常量池中对String类型的结构体定义我们可以知道对于索引定义了u2，就是无符号占2个字节，2个字节可以表示的最大范围是2^16 -1 = 65535。但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。超出这个范围在编译时期是会报错。<br>原来是为了弥补早期设计时的一个bug，“长度刚好65535个字节，且以1个字节长度的指令结束，这条指令不能被异常处理器处理”，因此就将数组的最大长度限制到了65534了。跟程序计数器有关</li></ol></li></ul><p>运行时拼接或者赋值的话范围是在整形的最大范围。<br><a href="https://blog.csdn.net/rd_w_csdn/article/details/110387250" target="_blank" rel="noopener">https://blog.csdn.net/rd_w_csdn/article/details/110387250</a></p><p><del>错误回答：</del><br><del>CONSTANT_Utf8_info 中有 u2 length; 表明了该类型存储数据的长度。 u2 是无符号的 16 位整数，因此理论上允许的的最大长度是 2^16=65536。而 java class 文件是使用一种变体 UTF-8 格式来存放字符的，null 值使用两个 字节来表示，因此只剩下 65536－ 2 ＝ 65534 个字节。</del></p><p><code>Modified UTF-8</code>  UTF-8 缩略编码是改进版的<code>UTF-8</code>编码，它和标准的UTF-8编码有下面三点区别：</p><ol><li><code>null</code>空字符的编码从一个字节的<code>&#39;\u0000&#39;</code>改变为2个字节的形式，即11000000 10000000，因此在字符串的编码中不会出现嵌入的null字符；</li><li>只使用1~3个字节的格式；（即范围由\u0000-\uffff）</li><li>辅助字符以代理对的形式表示。 <strong>补充字符通常指大于u+ffff而小于等于u+10ffff范围内的字符</strong></li></ol><ul><li>Q常量池计数器从0还是1开始？<br>A: 从1开始，0索引留给无法指向的东西，即没有父类，没有类名的，比如匿名内部类，Object类</li></ul><figure class="image-box">                <img src="image_20220116204409.png" alt title class>                <p></p>            </figure><ul><li><h3 id="2字节的访问标志："><a href="#2字节的访问标志：" class="headerlink" title="2字节的访问标志："></a>2字节的访问标志：</h3><p>  表明这个class有什么修饰符 只有两个字节</p><figure class="image-box">                <img src="image-20220208024117844.png" alt title class>                <p></p>            </figure></li></ul><p>举例: 原来是00 20(看下表中ACC_SUPER描述，最低限度必须有此标志)<br>如果：类是public类型-的，则第一个ACC_PUBLIC为true 则加上00 01 ，结果为00 21<br>如果：类还是 final类型-的，则第二个为true，再加上00 10 ，结果为00 31</p><p>00 21 = 00 20 + 00 01 ( 加了public)<br>表示为public 的类<br>设置的数值刚好不会出现相加和其他状态相等的情况，很巧妙<br><strong>一句话 访问标识就是只用两个字节表示了这个类的修饰符有哪些</strong></p><ul><li><h3 id="类、父类-This-class-Super-class"><a href="#类、父类-This-class-Super-class" class="headerlink" title="类、父类(This class,Super class)"></a>类、父类(This class,Super class)</h3><p>如 00 02 和 00 003两个标识符也都是一个两字节的引用，我们class文件中，分别引向常量池中00 02的第二个常量项和00 03 第三个常量项<br>CONSTANT_Class_info -&gt; CONSTANT_Utf8_info -&gt; 找到类名</p><figure class="image-box">                <img src="20200506112335237.png" alt="在这里插入图片描述" title class>                <p>在这里插入图片描述</p>            </figure></li><li><h3 id="接口索引计数器"><a href="#接口索引计数器" class="headerlink" title="接口索引计数器"></a>接口索引计数器</h3><p>类文件实现了接口的数量，没有就是00 00 ，有一个就是 00 01</p></li><li><h3 id="接口索引项"><a href="#接口索引项" class="headerlink" title="接口索引项"></a>接口索引项</h3><p>指向常量池索引<br>CONSTANT_Class_info -&gt; CONSTANT_Utf8_info -&gt; 找到接口名</p></li></ul><ul><li><h3 id="字段表：字段个数，字段1，字段2。。。。"><a href="#字段表：字段个数，字段1，字段2。。。。" class="headerlink" title="字段表：字段个数，字段1，字段2。。。。"></a>字段表：字段个数，字段1，字段2。。。。</h3><p>和上面差不多<br>字段表，方法表，class类都有自己的属性表！<br>`<br>※  注意：ConstantValue属性：</p><p>  final static String = “hello”<br>必须是String 类型，其值直接存储在字段表里面附带自己的属性表的ConstantValue属性指向的常量池里面，这样就可以类未加载直接用，效率提升<br>`</p></li></ul><blockquote><p>ConstantValue属性<br>属性表中的一个属性<br>ConstantValue属性的作用是通知虚拟机自动为静态变量赋值，只有被static修饰的变量才可以使用这项属性。非static类型的变量的赋值是在实例构造器方法中进行的；static类型变量赋值分两种，在类构造其中赋值，或使用ConstantValue属性赋值。</p><p>在实际的程序中，只有同时被final和static修饰的字段才有ConstantValue属性，且限于基本类型和String。编译时Javac将会为该常量生成ConstantValue属性，在类加载的准备阶段虚拟机便会根据ConstantValue为常量设置相应的值，如果该变量没有被final修饰，或者并非基本类型及字符串，则选择在类构造器中进行初始化。</p><p>为什么ConstantValue的属性值只限于基本类型和string？</p><p>因为从常量池中只能引用到基本类型和String类型的字面量</p><p>final、static、static final修饰的字段赋值的区别</p><p>static修饰的字段在加载过程中准备阶段被初始化，但是这个阶段只会赋值一个默认的值（0或者null而并非定义变量设置的值）初始化阶段在类构造器中才会赋值为变量定义的值。</p><p>final修饰的字段在运行时被初始化，可以直接赋值，也可以在实例构造器中赋值，赋值后不可修改。</p><p>static<br>final修饰的字段在javac编译时生成comstantValue属性，在类加载的准备阶段直接把constantValue的值赋给该字段。</p><p>可以理解为在编译期即把结果放入了常量池中。</p></blockquote><figure class="image-box">                <img src="image_20220118180056.png?v=1&type=image&token=V1:CPihlXhsDyMBxTiSaP4vHqG9vSKcCYlTGlI4SJLB2Os" alt title class>                <p></p>            </figure><p><strong>分析第一个 access_flags</strong><br>—-其实跟之前我们讲访问标识的时候一样，不一样的是这次的访问标志修饰符是修饰字段的<br>所以在标志名称上有些不同<br><img src="image-20220208024515966.png" alt="在这里插入图片描述"></p><p>这里加一张图用另一种方式表示我们的修饰符<br><figure class="image-box">                <img src="image-20220208024418503.png" alt="在这里插入图片描述" title class>                <p>在这里插入图片描述</p>            </figure></p><p><strong>分析第四个 attributes_count</strong><br>表示这个字段所拥有的attribute类型的个数，如果是00 01 就表示一个<br><strong>分析第五个 attributes[attributes_count]</strong><br>就是一个长度为 attributes_count，类型是：属性类型的数组<br>这个类型我们暂时不分析，到后面讲到 属性 时一起讲</p><p><strong>一句话总结<br>就是一个装有我们定义的所有属性的数组，长度为字段个数，里面的每一个表信息都表示一个字段</strong></p><ul><li><h3 id="方法表：-方法个数，方法1，方法2。。。。"><a href="#方法表：-方法个数，方法1，方法2。。。。" class="headerlink" title="方法表： 方法个数，方法1，方法2。。。。"></a>方法表： 方法个数，方法1，方法2。。。。</h3></li><li>字段表，方法表，class类都有自己的属性表！<figure class="image-box">                <img src="image_20220118182212.png?v=1&type=image&token=V1:I_meGZXidnP-pQ7GadHjyGZ5OJv_1gQzErPxNEyHeg0" alt title class>                <p></p>            </figure>access_flags的修饰类型<figure class="image-box">                <img src="image-20220208024616971-16442595798677.png" alt title class>                <p></p>            </figure></li></ul><p>※※  方法的代码存储在： 方法表里面附带自己的属性表的CODE属性里面。<br><a href="https://blog.csdn.net/weixin_29732737/article/details/113051809" target="_blank" rel="noopener">https://blog.csdn.net/weixin_29732737/article/details/113051809</a><br> <strong>max_stack</strong><br>操作数栈的最大深度，说明方法在编译把方法的栈深度已经定好了。虚拟机运行的时候需要根据这个值来分配栈帧中的操作栈深度。<br><strong>max_locals</strong><br>局部变量表所需要的空间，长度不能变<br>单位是Slot，int、byte和returnAddress不超过32位的数据类型采用1个Slot来存储；<br>double和long等64位的数据类型采用两个Slot存储<br><strong>其他（包括异常信息）</strong><br>code_length存储了方法体中的字节码指令的长度<br>code就存储了具体的字节码指令<br>exception_table_length<br>显示异常(受检查的异常)中的个数(try-cacatch中的异常)<br>exception_info<br>这是受检查异常的具体信息</p><ul><li><h3 id="属性表：-属性个数，属性1，属性2。。。。"><a href="#属性表：-属性个数，属性1，属性2。。。。" class="headerlink" title="属性表： 属性个数，属性1，属性2。。。。"></a>属性表： 属性个数，属性1，属性2。。。。</h3>上面所说的<strong>字段</strong>和<strong>方法</strong>的最后都有一项：<strong>属性项数组</strong>，里面装的就是这个类型了,比如ConstantValue和Code<br>其实class文件还有一个属性表，就是上面那张图没有覆盖掉的最后一部分<br>在Class文件、字段表、方法表都可以携带自己的属性表集合！！！<br>属性表中不要求各个属性表具有严格的顺序，只要不与已有属性重名即可</li></ul><h1 id="2-JVM-类加载的整体流程"><a href="#2-JVM-类加载的整体流程" class="headerlink" title="2. JVM 类加载的整体流程"></a>2. JVM 类加载的整体流程</h1><p> 普通回答（过于绝对）：<br> 加载，连接，初始化<br> 连接又分为验证，准备，解析</p><p>※ 从细节回答：<br>真正是分为7到8步</p><ol><li>加载<br> 静态加载，java编译为class文件二进制字节流，获得的是class文件二进制字节流</li><li>验证<br> 进入连接阶段的验证：<br>第一步，文件格式验证： 魔数和主次版本号</li><li>加载<br> 验证成功后，把class文件二进制字节流 加载到 方法区<br>  作用： 结构调整，把静态存储文件转换为运行时数据结构<br> （思考： class常量池和方法区的运行时常量池的区别和联系）</li><li>加载<br> 堆内存生成当前类class对象 作为方法区中这个类的各种访问入口，比如：Object类，java.lang.Object 一定先加载，放入堆，提供给其他类访问</li><li>验证<br> 跳到连接阶段的验证：<br>第二步，元数据验证，字节码描述的信息进行语义分析</li><li>验证<br> 跳到连接阶段的验证：<br>第三步，字节码验证，通过数据流和控制流分析<br> <a href="https://blog.csdn.net/weixin_38608626/article/details/88173916" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38608626/article/details/88173916</a></li><li>准备<br> 0值的初始转化，含了给这个类的静态变量static和其他数据分配内存空间（<strong>仅仅是分配内存空间，具体初始化在最后一步</strong>）。<br> static int a=123;  这一阶段a会变成0</li><li>初始化<br> （解析： 第四步，符号验证，常量池内符号引用转直接引用，确定解析一定初始化之前，不确定在何时）【直接引用与虚拟机有关，不同的虚拟机翻译出来一般不会相同】<br> JVM用赋值或者缺省值将静态变量进行初始化，并执行静态初始化程序（static块中的代码），初始化发生在执行main方法之前，但在指定的类初始化之前他的父类必须先初始化，若其父类仍然存在父类，那也需递归的初始化。</li></ol><p>真正执行java代码，会调用<code>&lt;clinit&gt;()</code>方法 ：<br><code>在编译生成class文件时,会自动产生两个方法,一个是类的初始化方法&lt;clinit&gt;, 另一个是实例的初始化方法&lt;init&gt;。</code><br>只有被static修饰并且赋值的静态属性才会产生<code>&lt;clinit&gt;()</code>方法，不管是直接赋值还是在静态块中赋值，最后都会被合并成一个<code>&lt;clinit&gt;()</code>方法，并按照代码中的顺序依次赋值。</p><ul><li>在初始化一个类时，并不会先初始化它所实现的接口。</li><li>在初始化一个接口时，并不会先初始化它的父接口。</li></ul><h3 id="（面试题）-什么情况下立即对类初始化？"><a href="#（面试题）-什么情况下立即对类初始化？" class="headerlink" title="（面试题） 什么情况下立即对类初始化？"></a>（面试题） 什么情况下立即对类初始化？</h3><p>1 遇到四条字节码指令会立即初始化：</p><ul><li>创建普通对象的指令：new</li><li>访问类字段（static 字段，或者称为类变量）的指令：getstatic, putstatic</li><li>invokestatic 指令：用于调用类方法(static方法)。<br>（new引用类会立即初始化， new数组不会初始化： 原因：创建数组得到指令：newarray , anewarray , multianewarray，不是new指令）</li></ul><p>2 反射直接初始化<br>3 父类未初始化先初始化<br>4 有main函数<br>5 java.lang.invoke.MethodHandle 实例最后解析结构结果为REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应类没有初始化时，必须触发其初始化。<br>6 jdk1.8 接口default 方法</p><p>引申知识：</p><ul><li><p>加载：<br>  双亲委派模型：<br>  1启动类加载器（lib目录，根加载器），<br>  2拓展类加载器（lib-&gt;ext目录），<br>  3系统类加载器<br>(又叫应用程序加载器，加载用户类路径（classpath）上的指定类库，可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器)<br> 4当然，可以通过继承Classloader实现自定义加载器<br> 如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的类时（即ClassNotFoundException），子加载器才会尝试自己去加载。</p><ul><li><p>（面试） 双亲委派好处？<br>1.顺序加载。父类优先加载，<strong>避免重复加载</strong><br>2.安全性和唯一性。<strong>避免核心类篡改</strong></p><p>  利用 沙箱安全机制。 比如：加载器发现这个名字的类，发现该类已被加载，并不会重新加载网络传递过来（或自己写）的java.lang.Integer<br>  <code>tips： instance of 是根据类名称+类加载器 定位</code></p></li><li>JVM加载数组？<br>数组这个类加载，不是类加载器加载，其内存区域是运行中内存动态构造的。<br>类型的类在new时，才由加载器加载。<br>如何标记出唯一数组？</li></ul><ol><li>当引用类被加载器加载时，数组标志在加载器的<code>命名空间</code>上。</li><li>基础类型数组类型直接标记在<code>启动类加载器</code>的<code>命名空间</code>上。</li></ol></li></ul><p><strong>命名空间</strong><br>    <a href="https://blog.csdn.net/chuifuhuo6864/article/details/100887587" target="_blank" rel="noopener">https://blog.csdn.net/chuifuhuo6864/article/details/100887587</a></p><blockquote><p>由不同的类装载器装载的类将被放在虚拟机内部的不同命名空间。命名空间由一系列唯一的名称组成，每一个被装载的类有一个名字。JAVA虚拟机为每一个类装载器维护一个名字空间。例如，一旦JAVA虚拟机将一个名为Volcano的类装入一个特定的命名空间，它就不能再装载名为Valcano的其他类到相同的命名空间了。可以把多个Valcano类装入一个JAVA虚拟机中，因为可以通过创建多个类装载器从而在一个JAVA应用程序中创建多个命名空间。<br><strong>初始类装载器/</strong> <strong>定义类装载器</strong></p><p>命名空间有助于安全的实现，因为你可以有效地在装入了不同命名空间的类之间设置一个防护罩。在JAVA虚拟机中，在同一个命名空间内的类可以直接进行交互，而不同的命名空间中的类甚至不能觉察彼此的存在，除非显示地提供了允许它们进行交互的机制，如获取Class对象的引用后使用反射来访问。</p><p>如果要求某个类装载器去装载一个类型，但是却返回了其他类装载器装载的类型，这种装载器被称为是那个类型的<strong>初始类装载器</strong><br>；而实际装载那个类型的类装载器被称为该类型的<strong>定义类装载器</strong><br>。任何被要求装载类型，并且能够返回Class实例的引用代表这个类型的类装载器，都是这个类型的初始类装载器。</p></blockquote><h1 id="2-常量池"><a href="#2-常量池" class="headerlink" title="2. 常量池"></a>2. 常量池</h1><p>1.常量池常量池,也叫Class常量池(常量池==Class常量池)。Java文件被编译成Class文件，Class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项就是常量池，常量池是当Class文件被Java虚拟机加载进来后存放在方法区各种字面量(Literal)和符号引用。在Class文件结构中，最头的4个字节用于存储魔数(MagicNumber)，用于确定一个文件是否能被JVM接受，再接着4个字节用于存储版本号，前2个字节存储次版本号，后2个存储主版本号，再接着是用于存放常量的常量池常量池主要用于存放两大类常量：字面量和符号引用量，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念。如下</p><p>2.运行时常量池</p><p>2.1运行时常量池的简介运行时常量池是方法区的一部分。运行时常量池是当Class文件被加载到内存后，Java虚拟机会将Class文件常量池里的内容转移到运行时常量池里(运行时常量池也是每个类都有一个)。运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中2.2方法区的Class文件信息，Class常量池和运行时常量池的三者关系字符串常量池</p><p>3.1字符串常量池的简介字符串常量池又称为：字符串池，全局字符串池,英文也叫StringPo。在工作中，String类是我们使用频率非常高的一种对象类型。JVM为了提升性能和减少内存开销，避免字符串的重复创建，其维护了一块特殊的内存空间，这就是我们今天要讨论的核心：字符串常量池。字符串常量池由String类私有的维护。</p><h1 id="3-运行时数据区"><a href="#3-运行时数据区" class="headerlink" title="3. 运行时数据区"></a>3. 运行时数据区</h1><ol><li>线程共享<br> 方法区，堆</li><li>线程私有<br> 虚拟机栈，本地方法栈，程序计数器</li></ol><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><ol><li>小内存，几乎无OOM，控制代码执行位置，比如循环，线程block恢复，wait恢复</li></ol><h2 id="方法区（永久代）"><a href="#方法区（永久代）" class="headerlink" title="方法区（永久代）"></a>方法区（永久代）</h2><ol><li>存储类信息 （第四步加载过程）</li><li>常量，静态变量</li><li>即时编译后的代码缓存数据 【Class方法表中Code属性，保存执行指令字节，将其缓存在方法区】</li></ol><p>元空间：能不限制使用系统内存资源</p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><ol><li>存放编译期生成的字面量+符号引用</li><li>具备动态性<br>不要求常量一定只有编译期才能产生<br><strong>String.intern()</strong> 是一个Native方法。调用intern()方法后，JVM 就会在当前类的运行时常量池中查找是否存在与str等值的String，若存在则直接返回运行时常量池中相应Strnig的引用；若不存在，则会在运行时常量池中创建一个等值的String，然后返回这个String在运行时常量池中的引用。</li></ol><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ol><li>对象头（Header）: （Mark Word+ class指针+ 数组长度）<br>hashcode，GC分代年龄，锁标志状态，当前锁，偏向锁ID，偏向时间戳</li><li>实例数据（ Instance）</li><li>对齐填充（Padding）： 不满8字节的倍数就对齐填充<br><strong>字段内存对齐的其中一个原因，是让字段只出现在同一CPU的缓存行中。 如果字段不是对齐的，那么就有可能出现跨缓存行的字段。也就是说，该字段的读取可能需要替换两个缓存行，而该字段的存储也会同时污染两个缓存行。这两种情况对程序的执行效率而言都是不利的。其实对其填充的最终目的是为了计算机高效寻址。</strong></li></ol><p><strong>（面试题） 64位JVM 中 new Object()  在Java中占多少内存？</strong><br>16字节。<br>Mark Word （8字节）+ class指针（指针压缩4字节，否则8字节）+实例数据（0字节）+对齐填充（4字节或0字节）</p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>java栈是针对每一个线程的，每一个线程都会有自己的栈，维护在其内部的引用就是本地变量表。</p><p>通过线程想起栈，提问，对象是如何被线程访问定位的呀？问的非常底层。<br><a href="https://blog.csdn.net/y471519146/article/details/104638340" target="_blank" rel="noopener">https://blog.csdn.net/y471519146/article/details/104638340</a></p><ol><li>使用句柄。句柄是一个对象的唯一标示。中间有一个句柄池，存在于java堆的内存区域，线程指向句柄池，句柄池reference链接到对象地址</li><li>使用直接指针。线程对象指向另一对象。<br>优劣：直接指针访问快，但gc清理将对象位置移动，每个线程的指针就要改变，消耗大。<br>句柄优势：稳定，句柄池位置不变，当gc清理将对象位置移动，只需改变句柄池1个链接。</li></ol><h3 id="栈帧※"><a href="#栈帧※" class="headerlink" title="栈帧※"></a>栈帧※</h3><ol><li>1个方法创建1个栈帧：存储方法的局部变量表，操作数栈，动态链接，返回地址等。【class方法表中附带属性表中code属性有局部变量所需要的空间】</li><li>开始调用到完成过程就是一个栈帧的入栈出栈<h5 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h5>存储方法里的局部变量（包括方法参数），编译完成存储【class方法表中附带属性表中code属性】<h5 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h5>方法调用的最大深度【code属性的max_stack】，比如递归，调用数超出，则StackOverflowError。<h5 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h5>方法调用过程中，链接其他方法或其他类<h5 id="返回地址"><a href="#返回地址" class="headerlink" title="返回地址"></a>返回地址</h5>谁调用返回给谁。分两点</li><li>正常退出。</li><li>异常退出。抛错给调用方。</li></ol><p>####</p><h2 id="堆-展开知识-（第二期）"><a href="#堆-展开知识-（第二期）" class="headerlink" title="堆 展开知识 （第二期）"></a>堆 展开知识 （第二期）</h2><p>Q:新生代  eden s0 s1 是根据什么思想 8:1:1分区 ？ 回收器都是这样吗？<br>基于标记复制算法思想； 而基于标记清理算法就不是。</p><p>第一次minorgc： eden 空，s0 年龄1<br>第二次minorgc：eden空，s0空，s1 年龄有1和2<br>此时 s0 和 s1 角色互换<br>第三次minorgc：eden 1岁，s0空，s1 年龄有2和3<br>                             eden 空，s0空年龄有1,、2和3 ，s1空<br>此时 s0 和 s1 角色互换…</p><p>为什么需要s0和s1？<br> 需要空闲的缓冲内存，存储清理后的存活对象，避免s0区空间碎片化。</p><p>老年代</p><ol><li>年龄15岁以上</li><li>超大对象，超过阈值设置 max tenuring thread hold</li><li><p>相同年龄所有对象大小总和大于一个幸存者空间的一半，取年龄大于等于的对象，<br>所以年轻代空间利用，只有 90%</p><p>（一旦老年代要满就引发fullgc）</p></li></ol><p>※ 空间分配担保策略<br> minorGC发生之前，第一步先检查老年代最大可用连续空间是否大于新生代所有对象的总空间，如果条件成立确保安全，如果条件不成立，比如空间剩余500M；<br> 就会第二步检查虚拟机HandlePromotionFailure参数是否true，是否允许担保失败；<br> 如果允许担保失败，jvm再次第三步检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小；</p><ul><li>如果大于，比如平均之前300M，冒险尝试一次minorGC，  存在风险：minorGC后存活对象还是大于500M，超出最大可用连续空间，说明老年代要满了就引发fullGC。<ul><li>如果小于 或 HandlePromotionFailure参数false，就直接fullGC。</li></ul></li></ul><p>（面试）如何判断对象是否存活？ gc过程是什么？<br>可达性分析算法，通过一系列称为“GC Roots”根节点，开始引用链的搜索，如果对象搜索不到，证明对象不可达，标记白色，最终被垃圾回收。<br>引申：引用计数器算法，每个对象有引用计数器，Redis使用<br>5个问题：</p><h3 id="1-gcroots-是什么？"><a href="#1-gcroots-是什么？" class="headerlink" title="1.gcroots 是什么？"></a>1.gcroots 是什么？</h3><p>是可达性分析的起点，是两个栈的栈帧的本地变量表中引用的对象，方法区中静态属性引用的对象，方法区中常量引用对象（两个栈两个方法区），其实还有，jvm内部也有引用，锁的获取和释放。</p><h3 id="2-引用链是什么？"><a href="#2-引用链是什么？" class="headerlink" title="2.引用链是什么？"></a>2.引用链是什么？</h3><p>强：常见，永远不被垃圾回收<br>软：非必须，内存溢出OOM之前，列入回收范围进行第二次回收，还溢出就抛错<br>弱：生存到下一次垃圾收集之前<br>虚：幽（或幻）灵引用，主要用于监测对象是否已经从内存中删除，堆外内存回收。</p><p>软引用尝试保留其引用对象，弱引用不会试图保留其引用对象，虚引用所引用对象不会被被释放直到所有指向该对象的虚引用被清除。</p><blockquote><ul><li><p>虚引用必须和引用队列关联使用, 当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会把这个虚引用加入到与之 关联的引用队列中</p></li><li><p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动</p></li></ul></blockquote><h3 id="3-对象不可达意味着什么？一定被回收吗？"><a href="#3-对象不可达意味着什么？一定被回收吗？" class="headerlink" title="3.对象不可达意味着什么？一定被回收吗？"></a>3.对象不可达意味着什么？一定被回收吗？</h3><p>意味对象即将被垃圾回收，当然，不会立即回收。<br>※ 对象会放入f-q 的队列，会启动一条低优先级别的线程，读取对象，一个个调用对象的finalize方法，如果方法被覆盖并且被调用过，jvm会对该对象置为非必要垃圾回收，它逃过垃圾回收</p><h3 id="4-三色标记法是什么？"><a href="#4-三色标记法是什么？" class="headerlink" title="4.三色标记法是什么？"></a>4.三色标记法是什么？</h3><p>白： 对象不可达<br>黑： 已被访问，所有关联对象也扫描过<br>灰：未被扫描 （重新标记有关）</p><ul><li><figure class="image-box">                <img src="7779607-eecbd09f81b721f8.gif" alt="img" title class>                <p>img</p>            </figure></li></ul><p>假设现在有白、灰、黑三个集合（表示当前对象的颜色），其遍历访问过程为：</p><ol><li><p>初始时，所有对象都在【白色集合】中；</p></li><li><p>将 GC Roots 直接引用到的对象挪到 【灰色集合】中；</p></li><li><p>从灰色集合中获取对象：<br>3.1. 将本对象引用到的其他对象全部挪到 【灰色集合】中；<br>3.2. 将本对象挪到【黑色集合】里面。</p></li><li><p>重复步骤3，直至【灰色集合】为空时结束。</p></li><li><p>结束后，仍在【白色集合】的对象即为 GC Roots 不可达，可以进行回收。</p><blockquote><p>注：如果标记结束后对象仍为白色，意味着已经“找不到”该对象在哪了，不可能会再被重新引用。</p></blockquote></li></ol><p>当 Stop The World （以下简称 STW）时，对象间的引用是不会发生变化的，可以轻松完成标记。</p><p>而当需要支持并发标记时，即标记期间应用线程还在继续跑，对象间的引用可能发生变化，多标和漏标的情况就有可能发生。</p><p><strong>多标-浮动垃圾</strong></p><p>假设已经遍历到 E（变为灰色了），此时应用执行了 objD.fieldE = null (D &gt; E 的引用断开)：<br><figure class="image-box">                <img src="1153954-20201220213532679-409632912.png" alt="img" title class>                <p>img</p>            </figure></p><p>此刻之后，对象 E/F/G 是“应该”被回收的。然而因为 E 已经变为灰色了，其仍会被当作存活对象继续遍历下去。最终的结果是：这部分对象仍会被标记为存活，即本轮 GC 不会回收这部分内存。</p><p>这部分本应该回收 但是没有回收到的内存，被称之为“浮动垃圾”。浮动垃圾并不会影响应用程序的正确性，只是需要等到下一轮垃圾回收中才被清除。</p><p>另外，针对并发标记开始后的新对象，通常的做法是直接全部当成黑色，本轮不会进行清除。这部分对象期间可能会变为垃圾，这也算是浮动垃圾的一部分。</p><p><strong>漏标-读写屏障</strong></p><p>假设 GC 线程已经遍历到 E（变为灰色了），此时应用线程先执行了：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> G = objE.fieldG;</span><br><span class="line">objE.fieldG = <span class="literal">null</span>;  <span class="comment">// 灰色E 断开引用 白色G</span></span><br><span class="line">objD.fieldG = G;  <span class="comment">// 黑色D 引用 白色G</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="1153954-20201220214557708-22631031.png" alt="img" title class>                <p>img</p>            </figure><p>此时切回 GC 线程继续跑，因为 E 已经没有对 G 的引用了，所以不会将 G 放到灰色集合；尽管因为 D 重新引用了 G，但因为 D 已经是黑色了，不会再重新做遍历处理。</p><p>最终导致的结果是：G 会一直停留在白色集合中，最后被当作垃圾进行清除。这直接影响到了应用程序的正确性，是不可接受的。</p><p>不难分析，漏标只有同时满足以下两个条件时才会发生：</p><ol><li>灰色对象断开了白色对象的引用（直接或间接的引用）；即灰色对象原来成员变量的引用发生了变化。</li><li>黑色对象重新引用了该白色对象；即黑色对象成员变量增加了新的引用。</li></ol><p>从代码的角度看：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> G = objE.fieldG; <span class="comment">// 1.读</span></span><br><span class="line">objE.fieldG = <span class="literal">null</span>;  <span class="comment">// 2.写</span></span><br><span class="line">objD.fieldG = G;     <span class="comment">// 3.写</span></span><br></pre></td></tr></table></figure><ol><li>读取对象 E 的成员变量 fieldG 的引用值，即对象 G；</li><li>对象 E 往其成员变量 fieldG，写入 null值。</li><li>对象 D 往其成员变量 fieldG，写入对象 G ；</li></ol><p>我们只要在上面这三步中的任意一步中做一些“手脚”，将对象 G 记录起来，然后作为灰色对象再进行遍历即可。比如放到一个特定的集合，等初始的 GC Roots 遍历完（并发标记），该集合的对象遍历即可（重新标记）。</p><blockquote><p>重新标记是需要 STW 的，因为应用程序一直在跑的话，该集合可能会一直增加新的对象，导致永远都跑不完。当然，并发标记期间也可以将该集合中的大部分先跑了，从而缩短重新标记 STW 的时间，这个是优化问题了。</p></blockquote><p>写屏障用于拦截第二和第三步；而读屏障则是拦截第一步。<br>它们的拦截的目的很简单：就是在读写前后，将对象 G 给记录下来。</p><p><strong>写屏障(仅拓展)</strong></p><ul><li><p>CMS：写屏障 + 增量更新</p><blockquote><p>当有新引用插入进来时，记录下新的引用对象。</p><p>思路：不要求保留原始快照，而是针对新增的引用，将其记录下来等待遍历，即增量更新（Incremental Update）。</p></blockquote></li></ul><ul><li><p>G1：写屏障 + SATB</p><blockquote><p>当原来成员变量的引用发生变化之前，记录下原来的引用对象。</p><p>思路：尝试保留开始时的对象图，即原始快照（Snapshot At The Beginning，SATB），当某个时刻 的 GC Roots 确定后，当时的对象图就已经确定了</p><p>比如 当时 D 是引用着 G 的，那后续的标记也应该是按照这个时刻的对象图走（D 引用着 G）。如果期间发生变化，则可以记录起来，保证标记依然按照原本的视图来。</p></blockquote></li><li><p>ZGC：读屏障</p><blockquote><p>当读取成员变量时，一律记录下来</p></blockquote></li></ul><h3 id="5-有没有跨代引用的问题？※"><a href="#5-有没有跨代引用的问题？※" class="headerlink" title="5.有没有跨代引用的问题？※"></a>5.有没有跨代引用的问题？※</h3><p>minorGC时候，如果当前年轻对象被老年代的对象引用，那么就需要遍历老年代对象里面的引用，如果有引用就不删除年轻代对象。 遍历过多，这消耗过大。</p><p>空间换时间，引入<strong>记忆集</strong>（<strong>RememberSet数据结构</strong>），<br><strong>（卡表CardTable是具体实现类似数组的一种实现）</strong></p><p>用于记录从非收集区域指向收集区域的一个指针集合的抽象数据结构。</p><p>它存放在收集区域，比如在新生代里面存放着老年代对新生代对象的每一个引用。这样在收集新生代的时候，我们就可以根据记忆集知道哪些对象被老年代对象所引用，不能回收，这就解决了跨代引用的问题。<br><a href="https://baijiahao.baidu.com/s?id=1663322935066223947&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1663322935066223947&amp;wfr=spider&amp;for=pc</a></p><blockquote><p>记忆集根据记录的精度分三类：<br>字长精度：记录的是老年代指向新生代地址。<br>对象精度：记录的是老年代引用的新生代对象。<br>卡精度：记录的是新生代一段地址是否存在被老年代引用的记录。</p></blockquote><p>把地址的值右移9位相当于除于512就是卡表索引，每字节512为一组对应卡表同一个元素，一组就是一个卡页，<br>如果这个卡页中只要有一个对象被其他区域对象所引用，对应卡表元素的值就变成1，也就是所谓的元素变脏。</p><p>在垃圾回收时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页对应的内存包含跨代指针，把他们加入GC Roots中一并扫描。</p><h3 id="垃圾回收的3种算法"><a href="#垃圾回收的3种算法" class="headerlink" title="垃圾回收的3种算法"></a>垃圾回收的3种算法</h3><ul><li><p>标记-清除算法<br>标记后统一回收<br>空间问题: 他只有一块内存空间，会产生空间碎片，导致没有太多的可用的比较大的连续空间，导致对象创建找不到容纳空间，直接进入老年代。<br>优点：快，找到并马上删除</p></li><li><p>标记-复制算法<br>起初思想是将内存分半，内存1:1，一部分存储新对象，一部分负责我们的存活对象。实现的时候，eden，s0，s1，幸存者区1个缓冲<br>缺点：至少10%空间浪费，相对慢<br>优点：针对创建对象，有很大的可用连续空间，GC后，eden区域清空，都是连续空空间，没有空间碎片</p></li></ul><ul><li>标记-整理算法<br>优化了标记复制算法和标志清除算法的改进，</li></ul><ol><li>标记并清除</li><li>存活对象整理到1边<br>删除快，没有空间碎片</li></ol><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><figure class="image-box">                <img src="image_20220129152044.png?v=1&type=image&token=V1:muO6XhBva0We3ErRpB0T7PPyoRqWWSq-G6D2IwZ9ymA" alt title class>                <p></p>            </figure><ol><li>新生代：serial 单线程<br>单核服务器最快最理想，有stw暂停和安全点线程挂起的问题。<br>Q：会不会有CPU时间切片轮询？为什么单核快呢？<br>其他线程必须挂起Stop the world，cpu时间片都要落到垃圾收集的线程里面，其他线程不会有cpu时间片轮询，即便有，cpu时间片也是0。其他线程处于内核态，只有垃圾收集器处于用户态。</li></ol><p>为什么Stop the world呢？</p><ol start="2"><li><p>新生代：并发的parNew 。 serial 的多线程版本<br>标记复制算法</p></li><li><p>新生代：parallel Scavenge。<br>能多线程，又能关注和控制吞吐量。<br>吞吐量=运行用户代码时间/(运行用户代码时间+运行垃圾收集时间)<br>不与CMS合作</p></li></ol><p>两个控制参数：<br>    最大垃圾收集停顿时间<br>    直接设置吞吐量大小<br>如何控制吞吐量？<br>    首先，运行用户代码不会变。<br>    那么，通过多运行几回垃圾收集，来提高一次虚拟机运行的吞吐量。<br>    比如： 注意吞吐量参数是（0,100）</p><ol start="4"><li><p>老年代：Serial Old 收集器<br>单线程，标记整理算法</p></li><li><p>老年代：Pallel Old 收集器<br>标记整理算法，jdk1.6才开始，吞吐量优先。</p></li><li><p>老年代：CMS 收集器<br>Concurent Mark Sweep 多线程标记清除，以最短回收停顿时间为目标的收集器。<br>记忆：<br>三个mark一清除，初重stw</p></li></ol><p>CMS步骤过程：<br>初始标记 stw，标记gcroots 直接关联对象<br>并发标记  不停顿，扫描old区对象。</p><blockquote><p>刚才产生的集合中标记出存活对象；<br>应用程序也在运行；<br>并不能保证可以标记出所有的存活对象；</p></blockquote><p>重新标记 stw，修正<br>并发清除</p><p>stop the world 其他线程被挂起，处于内核态。</p><p>※※<br>CMS 缺点：<br>首先承认，G1 出来之前，jdk9之前, CMS是靠谱的。</p><ol><li>对资源处理非常敏感。<br>在并发标记时，占用CPU线程数，影响项目中运行所用线程数。因为占用资源，可能导致资源不足。默认启动(核数n+3)/4线程，这样，核数多防止占用。</li><li><p>无法处理浮动垃圾。<br>并发清除，程序运行依然运行，有新垃圾出现，本次收集无法处理，留到下一次GC才清理，这就是“浮动垃圾”。如果对象被疯狂访问，大量对象堆积，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</p></li><li><p>“标记清除算法”虽然快，会产生大量空间碎片。</p></li></ol><h3 id="stop-the-word-※※"><a href="#stop-the-word-※※" class="headerlink" title="stop the word ※※"></a>stop the word ※※</h3><p>引入概念：根节点枚举。<br>在开始标记收集的时候，不管单线程还是并发，不管是对象还是线程，一定在一致性的快照里，才能进行。<br>如果不知道当前的状态的话，没办法进行后续的标记。<br>一致性快照的分析工作就是根节点枚举期间：所有线程停顿。</p><p>OopMap 特定的位置记录下栈和寄存器中的哪些位置是引用</p><blockquote><p> OopMap 记录了栈上本地变量到堆上对象的引用关系。其作用是：垃圾收集时，收集线程会对栈上的内存进行扫描，看看哪些位置存储了 Reference 类型。如果发现某个位置确实存的是 Reference 类型，就意味着它所引用的对象这一次不能被回收。但问题是，栈上的本地变量表里面只有一部分数据是 Reference 类型的（它们是我们所需要的），那些非 Reference 类型的数据对我们而言毫无用处，但我们还是不得不对整个栈全部扫描一遍，这是对时间和资源的一种浪费。<br> 一个很自然的想法是，能不能用空间换时间，在某个时候把栈上代表引用的位置全部记录下来，这样到真正 gc 的时候就可以直接读取，而不用再一点一点的扫描了。事实上，大部分主流的虚拟机也正是这么做的，比如 HotSpot ，它使用一种叫做 OopMap 的数据结构来记录这类信息。<br> 我们知道，一个线程意味着一个栈，一个栈由多个栈帧组成，一个栈帧对应着一个方法，一个方法里面可能有多个安全点。 gc 发生时，程序首先运行到最近的一个安全点停下来，然后更新自己的 OopMap ，记下栈上哪些位置代表着引用。枚举根节点时，递归遍历每个栈帧的 OopMap ，通过栈中记录的被引用对象的内存地址，即可找到这些对象（ GC Roots ）。<br> <strong>可以把oopMap简单理解成是调试信息。在源代码里面每个变量都是有类型的，但是编译之后的代码就只有变量在栈上的位置了。oopMap就是一个附加的信息，告诉你栈上哪个位置本来是个什么东西。 这个信息是在JIT编译时跟机器码一起产生的。因为只有编译器知道源代码跟产生的代码的对应关系。 每个方法可能会有好几个oopMap，就是根据safepoint把一个方法的代码分成几段，每一段代码一个oopMap，作用域自然也仅限于这一段代码。 循环中引用多个对象，肯定会有多个变量，编译后占据栈上的多个位置。那这段代码的oopMap就会包含多条记录。</strong><br> 通过上面的解释，我们可以很清楚的看到使用 OopMap 可以避免全栈扫描，加快枚举根节点的速度。但这并不是它的全部用意。它的另外一个更根本的作用是，可以帮助 HotSpot 实现准确式 GC 。</p></blockquote><h3 id="安全点Safepoint"><a href="#安全点Safepoint" class="headerlink" title="安全点Safepoint"></a>安全点Safepoint</h3><p>垃圾收集过程，用户线程到达特定位置，这位置不会产生新对象，也不会影响项目的执行，只能让垃圾收集非常安全的进行下去。<br>位置：<br>1、循环的末尾<br>2、方法临返回前 / 调用方法的call指令后<br>3、可能抛异常的位置</p><p>OopMap线程找对象<br>回顾句柄池，直接指针。</p><p>如何线程如何找Class文件？<br>找常量池里的Constant_class_info指向Constant_utf8_info,找到权限命名，再去方法区。（类加载过程中，对象加载到方法区，再在堆生成class对象，作为访问类的入口）在堆中定位到Class。</p><p>想继续找方法？<br>方法表-&gt;属性表-&gt;code-&gt;max stack，max local，方法入口-&gt; 代码</p><h3 id="G1垃圾收集器※※"><a href="#G1垃圾收集器※※" class="headerlink" title="G1垃圾收集器※※"></a>G1垃圾收集器※※</h3><figure class="image-box">                <img src="image-20220208015310593.png" alt title class>                <p></p>            </figure><ol><li>分代理论垃圾收集，只不过是增加一个拓展。</li><li>把内存区域分成多个大小相等的内存区域块Region。</li><li>jdk9发布，把吞吐量组合取代了，成为服务端默认。如果换成CMS，那么JDK参数配置开启CMS，不过提示Warnings：CMS以后会被废弃。</li><li>内存分块会按照“意愿”进行局部收集。</li><li><p>Region堆内存布局的原理：<br>不再坚持固定大小的分代理论，把内存区域分成多个大小相等的内存区域块Region，每个Region会根据需要扮演新生代eden，survival），老年代的角色。<br>如果有大对象？<br>G1会分出一部分区域作为特殊区域专门存储大对象，如果通过G1检测，只要大小超过<strong>超过1.5个region</strong>，就可以判断大对象，就放到H。Region可以通过JVM参数设置，1-32GB之间。如果超过16GB，肯定放在大对象区域。<br>大对象区域称为：humongous，全称：attempt_allocation_humongous。<br>对于超大对象，比如32GB，会分配两个连续的Region空间。</p></li><li><p><strong>标榜：可预测停顿时间的模型。</strong><br> 关注每个模块里回收价值的大小，通过设置一个很低的最大允许GC时间ms，，-XX：MaxGCPauseMillis =200，根据200ms去找它能够进行收集的Region，比如：收10个Region需要花300ms，由于超过200ms，按比例降低先收集6-7Region达到而200ms要求。</p><ul><li>由于分区的原因,G1可以只选取部分区域进行内存回收,这样缩小了回收的范围,因此对于全局停顿情况的发生也能得到较好的控制</li></ul></li></ol><ul><li>G1 跟踪各个 Region 里面的垃圾堆积的价值大小(回收所获得的空间大小以及回收所需时间的经验值),在后台维护一个优先列表,<strong>每次根据允许的收集时间,优先回收价值最大的Region。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率</strong>。</li></ul><p>Q：如何解决跨代Region引用问题？<br>A：使用记忆集，结构相对复杂，是个双向卡表。</p><p>步骤：<br>1.初始标记：stw<br>    GCRoots根节点枚举，在安全点进行<br>2.并发标记<br>3.最终标记：stw<br>4.筛选回收<br>    <strong>根据MaxGCPauseMillis最大允许GC时间，优先回收价值最大的Region， 保证可预测停顿时间。</strong></p><h3 id="JVM调优经验-※※"><a href="#JVM调优经验-※※" class="headerlink" title="JVM调优经验 ※※"></a>JVM调优经验 ※※</h3><p>根据用户访问量，在不同时刻导致JVM回收<br>在上线前，做压测，监督内存空间的使用，以及发生GC回收的频率和停顿时间。</p><ol><li><p>大访问的压力，一边回收一边对象持续创建，minorGC会比较频繁，那么，一：<strong>调大年轻代的大小</strong>。二：如果发生时间不长，很快回收，且回收率高，不会导致老年代短时间内有对象填充，那么就，<strong>进行持续压测</strong>，观察老年代的上限。</p></li><li><p>大对象创建的频繁且常访问，导致FullGC比较频繁，（对于G1会分配到humongous区）。一：压测观察大对象的大小，过大可以把对象拆分，维持在JVM参数下；二：适当调大判断为大对象的参数，防止它直接进入老年代；三：发生OOM异常，如何排查呢？压测过程，一定先dump出来堆内存的heap文件，导入visual VM工具，主要查看堆栈信息。找内存占用高的对象，Reference指向堆栈信息，最终定位代码。springboot的Context上下文是单例，很难发生大对象频繁创建。四:  线程无法到达安全点，请求第三方等待中，比如60s超时时间，其他线程的已经在安全点STW，这里细说：用户态和内核态。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;引言：&lt;/strong&gt;&lt;br&gt;来源：知识结构来自河北王校长的JVM系列，博主基于视频自写笔记，并补充大量的延伸内容。&lt;br&gt;优点：笔记知识点关联性好，挖得深，延伸多。&lt;br&gt;缺点：缺少JVM与多线程结合的内容，以后会补充上；排版一般&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="jvm" scheme="https://missionodd.github.io/categories/技术/jvm/"/>
    
    
    <category term="java" scheme="https://missionodd.github.io/tags/java/"/>
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="jvm" scheme="https://missionodd.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>经验 | 性能优化的整体脉络的梳理</title>
    <link href="https://missionodd.github.io/2022/02/01/overall-performance-optimization/"/>
    <id>https://missionodd.github.io/2022/02/01/overall-performance-optimization/</id>
    <published>2022-02-01T05:50:37.000Z</published>
    <updated>2022-03-17T03:44:07.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>性能优化要求我们关注整体效果，兼顾可靠性，扩展性，以及极端情况的异常场景。<br>笔记特点：大部分是已掌握的内容，一些知识只会概括提及。</p><h2 id="衡量指标※"><a href="#衡量指标※" class="headerlink" title="衡量指标※"></a>衡量指标※</h2><p>性能：有限资源，有限时间完成工作。</p><p>体现在横坐标为时间，纵坐标多种指标。</p><p>加载性能低，会导致搜索排名下降。</p><p>性能指标：</p><p>吞吐率 和 响应速度</p><p>响应速度是串行的优化，通过优化步骤解决问题；<br>吞吐率是并行的优化，充分利用计算机资源；</p><p>侧重于优化响应速度，就能提高吞吐率</p><p>这两点，构成了高并发。</p><p>类比，十字路口，开车排队到经过红绿灯时间，就是一个请求的响应时间；如果灯信号时间短一点，一些车可能通过快一点，如果灯信号切换过于频繁（限流力度过大），单位时间内通过的车过少，导致后面的车排队时间更长，这个就是吞吐量减少</p><p>吞吐率:</p><p>QPS，TPS，<br>HPS： HTTP请求数</p><p>细化指标：</p><ul><li>平均响应时间：所有耗时的平均，但不能体现出方差，抖动大小，</li><li>响应时间百分位数，TP值：理解为一种阈值，像合格率（水位），反应出应用接口的整体响应情况。指数目标是 干掉严重影响系统的长尾请求。</li></ul><blockquote><p>例若有100个请求， 每一个请求的响应时间分别是 1-100 平均分布 平均响应时间： 1-100 的平均值，即 50.5 95% percentile ： 按从小到大排序，累计第95百分位，也就是 95 （即样本里95% 的数据都不高于这个值）</p></blockquote><ul><li>并发量：同时进入的请求数量，指在同一个时间点，同时请求服务的客户数量。</li></ul><p>注意：吞吐率和并发数是两个完全独立的概念。拿银行柜台来举个例子，并发数指同时有多少人往银行柜台涌来。吞吐率则指银行柜台在一段时间内可以服务多少个人。</p><ul><li><p>秒开率：APP启动速度，页面加载速度。</p><p>使用CDN加载；用mokey脚本检查白屏，用动画或加载骨架，减少白屏情况；HTTP2的缓存推送机制提前推送JS，CSS；</p></li><li><p>正确性：接口请求无BUG。</p><p>比如，一个事故，测出的并发量特别高，这是由于项目使用了熔断，压测过程触发熔断，又因为没有对接口正确性判断，造成低级错误的报告。</p></li></ul><p>性能优化：</p><p>基准测试，木桶理论，Amdahl定律</p><p>基准测试：测试最佳性能。</p><p>比如，要排除掉项目启动，进行缓存预热，消除JIT编译器影响。</p><p>木桶理论：性能瓶颈取决于最慢的组件。</p><p>比如，DB的I/O落盘。这是首先要解决的问题。</p><p>性能优化注意点：</p><p>一是依据数字不是猜</p><p>二是个体数据不足信</p><p>三不要过早优化和过度优化</p><p>四保持良好编码习惯</p><h2 id="7类技术优化手段※"><a href="#7类技术优化手段※" class="headerlink" title="7类技术优化手段※"></a><strong>7类技术优化手段</strong>※</h2><p>复用优化</p><p>计算优化</p><p>结果集优化</p><p>资源冲突优化</p><p>算法优化</p><p>高效实现</p><p>JVM优化</p><hr><p>其他：</p><p>数据库优化</p><p>操作系统优化</p><p>架构优化</p><p>协议优化</p><p>等等</p><p>展开：</p><p><strong>复用优化</strong></p><p>1、代码复用：抽成公共方法，抽成公共模块；</p><p>2、数据复用：首先想到缓冲和缓存。</p><blockquote><p> <strong>缓冲(Buffer)</strong>：对数据暂存，然后批量传输或写入；<br> 多使用顺序方式，缓解不同设备频繁，缓慢地随机写。<br> <strong>缓存(Cache):</strong>对已读数据的复用；<br> 缓存在相对高速区域，针对读操作。</p></blockquote><p>3、池化复用：对象创建和销毁成本高。</p><blockquote><p>线程池，连接池，把对象预热存储，方便所有后续使用。</p></blockquote><p>4、对象复用：clone思想的原型模式，共享技术的享元模式</p><p><strong>计算优化</strong></p><p>1、并行优化：想加快任务执行，最快最优就是让它并行执行。</p><blockquote><p>硬件上是：CPU等设备多核，多机。</p><p>模式上是：</p><p>多机：采用负载均衡，将流量或大计算拆分多个部分，同时处理，比如Hadoop，用MapReduce将任务打散，多机并行计算；</p><p>多进程：nginx的NIO进程模型，master进程统一管理worker进程，由worker进程真正代理，利用了CPU多核。</p><p>redis的主进程读写，子进程RDB快照写时复制技术；</p><p>多线程：Netty的Reactor的NIO模型。boss线程接收请求，worker线程真正计算。</p><p>多协程：更轻量，比如GO语言</p></blockquote><p>2、同步变异步：涉及编程模型的改变</p><p>同步简单，但对突发的，时间段倾斜的流量，问题大，容易失败。</p><p>3、异步方式：请求横向扩容，缓解瞬时压力，使流量平滑。</p><p>4、惰性加载：单例模式，代理模式，分页加载</p><p>加载图片文件，可以先加载占位符，再通过后台线程慢慢加载所需要资源。</p><p><strong>结果集优化</strong></p><p>让体积更小，传输效率和解析效率更高</p><p>1、protobuf二进制优先于JSON，优先于XML</p><p>2、Nginx，开启HTTP的GZIP压缩，保持数据紧凑</p><p>3、批量处理的方式：对于时效性要求不高，对业务能力要求高的业务，要减少网络连接的交互，先存缓冲区，再批量交付。</p><p>4、数据结构优化：对于要二次使用的结果集，会存入缓存，可以根据使用场景，存储索引，bitmap位图，二进制数，B+树，跳表，压缩列表来加快读速度。大对象优化为只保留有用属性粒度</p><p><strong>资源冲突优化</strong></p><p>涉及共享资源，如：单机HashMap，mysql的数据行，单资源Redis的某key的setnx，多个资源协调的事务和分布式事务。</p><p>就要选择合适的锁。</p><p>锁应用各种地方，mysql的行锁表锁，java各种锁，底层cpu锁，jvm锁，操作系统内部锁</p><p>按照锁级别，分为乐观锁和悲观锁，乐观锁效率更高</p><p>按照锁类型，分为公平锁和非公平锁，任务调度上有差别</p><p>锁越重，性能消耗越大，</p><p>实现无锁的机制，对性能提升巨大的。</p><p><strong>算法优化</strong></p><p>提高复杂业务的性能，一般采用空间换时间，加快处理速度。</p><p>算法是代码调优，考验开发者的编程技巧和API掌握程度。</p><p>常用的递归，二分，快排，动态规划，贪心等。</p><p><strong>高效实现</strong></p><p>1、技术选型，尽量选择设计良好，性能优越的组件；</p><p>Netty作为非阻塞web容器，</p><p>语法分析器javacc，效率比正则表达式更好</p><p>2、维护性，采用适配器模式，以便在测压找到瓶颈点，用更高性能的组件进行替换。</p><p><strong>JVM优化</strong></p><p>配置参数，一定程度提高JAVA程序的性能。</p><p>如果不当，可能OOM。</p><p>1、G1垃圾回收器，内存高效回收，CMS已经被java14移除</p><p>2、堆大小调整，minorGC和fullGC</p><p>3、大对象阈值设置</p><p>4、代码层面优化</p><p>5、监控线上堆栈信息</p><p>6、开启补齐，避免伪共享</p><hr><h2 id="分析哪些资源，容易成为瓶颈"><a href="#分析哪些资源，容易成为瓶颈" class="headerlink" title="分析哪些资源，容易成为瓶颈"></a>分析哪些资源，容易成为瓶颈</h2><p>1、系统组件之间的速度不均衡；</p><p><strong>CPU，内存，IO组件，容易成为瓶颈。</strong></p><p>CPU：</p><p>top命令，CPU性能</p><p>uptime命令，看负载，评估任务排队情况</p><p>vmstat，CPU繁忙程度，上下文切换程度。</p><p><strong>缓存行伪共享问题</strong></p><p>内存：</p><p>top命令，看进程实际占用内存</p><p>free命令，看剩余内存</p><p>大内存时代，采用<strong>HugePage</strong>将4kb快表页增大2MB，但竞争加剧会增加性能。</p><p><strong>JVM预分配好内存</strong>，加快运行速度</p><p>IO设备：</p><p>IO设备是包括所有外围设备</p><p>缓冲区解决差异的唯一工具，但断电容易丢失。</p><p>iostat命令工具，查看IO性能。</p><p>网络：</p><p>iotop命令，看网络流量最高的进程</p><p>netstat命令，看机器网络连接汇总</p><p><strong>零拷贝技术</strong>，kafka，Nginx</p><p>优化IO+网络</p><p>kafka操作磁盘 吞吐量高的原因?</p><p>磁盘慢是慢在寻道操作，磁盘顺序写和随机写的速度差达到6千倍，kafka采用顺序写。</p><h2 id="性能工具"><a href="#性能工具" class="headerlink" title="性能工具"></a>性能工具</h2><p>nmon获取系统性能数据工具</p><p>jvisualvm 获取JVM性能数据</p><p>CPU分析：代码执行时长和热度</p><p>内存快照分析：内存泄漏</p><p>线程分析：死锁情况</p><p>HotSpot VM 的JMC，获取java性能详细数据</p><p>web容器，线程，内存，锁，socket IO，方法，垃圾回收</p><p>JIT，TLAB</p><p>arthas 获取单个请求的调用链耗时</p><p>trace命令获取调用链</p><p>wrk HTTP压测工具，获取web接口性能工具</p><h2 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h2><p>为了测量某一段代码的具体执行情况。</p><ul><li>最简单，编写统计执行代码时间。</li></ul><p>​    这不一定正确，代码块频繁时，JVM会有JIT编译和内联优化，要想得到稳定结果，需要执行上万次循环预热；</p><p>​    有大量埋点，统计指标单一</p><ul><li><p>JMH基准测试工具。JDK12内置，低版本需要引入。通过注解形式单独配置，OptionSBuilder全局配置</p><p>通过开启多个进程多个线程的子任务完成预热，然后真正的迭代，最终结果合并</p><p>精度高，纳秒级，多指标，可图形化结果</p></li></ul><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>保持各自节奏，顺序不打乱</p><p>结合批量处理，减少网络IO操作</p><p>优化用户体验，音视频的提前缓冲</p><ul><li>文件IO流  是装饰器模式</li></ul><p>缓冲区读取一块一块的部分数据</p><ul><li>日志缓冲</li></ul><p>Logback异步采样，写入缓冲区达到阈值，才持久化。</p><ul><li><p>kafka发送缓冲</p><p>生产者发送前有个缓冲区，如果生产者断电，消息丢失；</p><p>解决：</p><p>缓冲区设置非常小，退化到单条，影响网络性能</p><p>发送前持久化消息日志，发送后处理完回调再记录一条日志，扫描对比。</p></li><li><p>Mysql的innodb_buffer调整大小，减少换页；</p></li><li><p>StringBuilder 和StringBuffer，字符缓冲区，提供拼接字符串的性能</p></li><li><p>磁盘，网络IO，缓冲区提高信息流转效率，可以flush强制刷新数据。半连接队列，全连接队列</p></li><li><p>ID生成器，缓冲一部分ID段，避免频繁耗时的交互。</p></li></ul><p>缓冲区饱和策略：丢弃，异常，等待</p><p>缓冲区数据丢失解决：</p><p>优雅关闭，没完全解决；</p><p>预写日志，故障后重启，根据日志恢复数据。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul><li>让页面秒开</li><li>减少数据库压力</li><li>处理冷热数据</li></ul><p>堆内缓存</p><p>大多数对内缓存，会将对象的引用设置为弱引用或软引用，当缓存非常频繁，而且数据量大，如果发生GC回收，缓存空间被释放，又瞬速沾满，从而再次垃圾回收。</p><p>设置缓存小一些，减轻JVM负担。</p><p>进一步加速</p><p>linux文件缓存：</p><p>预读算法，从磁盘智能加载到缓存</p><p>缓存算法影响命中率和性能，</p><p>目前最好的是Caffeine（咖啡呢）使用的W-TinyLFU算法，性能非常高</p><p>例子</p><p>HTTP 304 Not Modified，请求头if-Modified-Since判断客户端缓存是否最新</p><p>CDN，用户最近最快节点，读取静态文件内容，贵</p><p>双写缓存不一致问题：延迟双删，binlog-MQ</p><h2 id="数据冷热分离"><a href="#数据冷热分离" class="headerlink" title="数据冷热分离"></a>数据冷热分离</h2><p>数据双写</p><p>冷热库CRUD在统一事务</p><p>由于热库和冷库类型不同，事务大概率是分布式，缺陷：难以改造。</p><p>写入MQ分发</p><p>通过MQ发布订阅，分发到冷热库，逻辑非常清晰</p><p>binlog订阅</p><p>canal组件获取数据，结合MQ，同步到其他数据源</p><h2 id="池化技术"><a href="#池化技术" class="headerlink" title="池化技术"></a>池化技术</h2><p>减少创建对象的成本，资源反复利用。</p><p>公共对象池化包 Commons Pool 2，Jedis连接池使用到。</p><p>maxTotal：对象上限</p><p>maxIdle ：最大空闲数</p><p>maxIdle： 最小空闲数（核心对象数）</p><p>maxWaitMillis：资源用尽时，最大等待直到对象空闲时间，-1表示永远不超时。超时快速失败</p><p>minEvictableIdleTimeMillis 资源池中资源最小空闲时间(单位为毫秒)，达到此值后空闲资源将被移除，默认30min</p><p><strong>HikariCP连接池为什么快？ （Hi卡乐CP）</strong></p><p>1，有效减少数据库连接创建，消耗的资源消耗；</p><p>2，FastList代替ArrayList，通过初始化的默认值，减少越界检查。通常情况下，同一个Connection创建了多个Statement时，后打开的Statement会先关闭，FastList从数组的尾部开始遍历删除，更为高效</p><p>3，优化并精简字节码，使用javassist，减少动态代理的性能消耗，比如invokestatic指令代替invokevirtual，指令更便于JVM去做更底层的优化。这个优化甚至把<strong>栈帧中的栈深度从5降到了4，减少了push和pop指令</strong>。</p><p>4，无锁的ConcurrentBag，减少并发场景下的锁竞争，减少伪共享</p><p>​    ConcurrentBag，有三个重要的成员变量：</p><ul><li><p>ThreadLocal 缓存，加快本地连接获取速度</p></li><li><p>CopyOnWriteArrayList，sharedList共享写时拷贝List</p></li><li><p>SynchronousQueue，无存储的等待队列</p><p> ConcurrentBag 的优化思路就是CAS尝试从ThreadLocal中找空闲连接来避免锁竞争，如果没有可用元素则再次从共享的CopyOnWriteArrayList中获取，还找不到就放入SynchronousQueue等着。</p><p>通过将连接本地存储化来减少竞争，又根据连接池读多写少的特性用 CopyOnWriteArrayList 来实现 sharedList 。</p><p>这里还有个<strong>中途窃取的概念</strong>，其实没什么花头，就是充分利用连接。</p><p>根传统锁模型不同，它用了标记模型，抢占资源只是CAS操作进行”标记状态“ <code>STATE_IN_USE</code>。</p><p><strong>中途窃取</strong>无非就是本来属于某个线程的本地连接，当它归还连接的时，恰巧有另一个线程从 sharedList 遍历找到这个连接，这时候连接的状态是 <code>STATE_NOT_IN_USE</code>，那么这个连接就会被另一个线程也保存到 ThreadLocal 中了。 否则是没有窃取，就唤醒等待队列的线程。</p></li></ul><p>冷门技巧优化：根据业务的类型设置多个连接池，减少连接资源争抢。</p><ul><li>快速响应时间，把数据快速返回给用户</li><li>可以慢慢执行，耗时比较长，对时效性要求不高</li></ul><p>池一般存储的是执行对象，缓存一般存储的是数据对象</p><p>结果缓存池：保存某个执行步骤的结果，使得下次无需从头执行；</p><p>比如：热点文章页面静态化，无需再从头渲染。</p><h2 id="大对象复用与聚焦"><a href="#大对象复用与聚焦" class="headerlink" title="大对象复用与聚焦"></a>大对象复用与聚焦</h2><p>substring方法，JDK 8 是new复制出部分字符串，在JDK 6直接获取源字符串，</p><p>借鉴意义：在大对象中获取部分信息，根据业务情况，决定是否有原对象的引用关系。</p><p>扩容，StringBuilder，StringBuffer，HashMap，ArrayList等：扩容操作需要重新组织数据，注意线程安全问题；</p><p>优化：</p><p>查询用户的字段，Redis存储的用户的JSON字符串数据打散， 改为Hash对象结构，方便hget</p><p>bitmap  </p><p>java Bitset</p><p>potobuf</p><p>数据结构优化：对于要二次使用的结果集，会存入缓存，可以根据使用场景，存储索引，bitmap位图，二进制数，B+树，跳表，压缩列表来加快读速度。大对象优化为只保留有用属性粒度</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>大多数设计模式并不能增加性能，下面列举性能相关的设计模式：</p><p>代理模式，单例模式，享元模式，原型模式</p><p>代理模式</p><p>通过一个代理类，控制一个对象的访问</p><p>jdk面向接口，CGLib字节码增强，新版本性能差不多。</p><p>Spring AOP如果引入CGLIB，就是用CGLIB对java字节码增强，完成一个切面编程。比如权限，日志等切面。</p><p>虽然方便代码，但动态代理模式的处理更慢。</p><p>可以通过arthas分析慢逻辑来优化。</p><p>单例模式</p><p>scope注解指定bean的作用域，标识多例还是单例</p><p>默认是单例，线程安全。</p><p>单例有懒汉和饿汉加载方式：</p><p>饿汉会造成空间资源的浪费。</p><p>懒汉需要DCL或者静态内部类创建实例。</p><p>享元模式</p><p>通过共享技术，最大限度复用对象一般使用唯一的标识码进行判断，然后返回对应的对象。</p><p>比如，池化对象。</p><p><strong>何时使用：</strong> 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。</p><p>很多设计都使用享元模式，只是语境下差别。</p><p>原型模式</p><p>首先缓存一个实例，然后通过这个实例克隆出新对象，</p><p>一般可配合工厂模式。</p><p>必须实现 Cloneable 接口，</p><p>由于 Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生异常。</p><p>clone如果只拷贝当前对象，实现的就是浅拷贝。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>IO密集型，计算密集型</p><p>线程池</p><p>写时复制</p><p>StringBuilder 对 StringBuffer</p><p>HashMap对CurrentHashMap</p><p>ArrayList对CopyOnWriteList</p><p>FastThreadLocal</p><p>首先ThreadLocalMap没有链表红黑树，使用了开放地址法。</p><p>FastThreadLocal 底层是数组，定位数据直接根据数组下标 index 获取；</p><p>而且，写了9个多余long类型，对伪共享问题优化</p><p>Foin/Join</p><p>CompletableFuture</p><p>不正确使用问题：</p><p>线程池不正确，造成资源分配不可控</p><p>IO密集，线程池太小，造成请求频繁失败</p><p>线程池用等待线程释放饱和策略，造成业务阻塞</p><p>SimpleDateFormat的时间错乱： 多个线程之间共享变量calendar，并修改calendar。因此在多线程环境下，当多个线程同时使用相同的SimpleDateFormat对象（如static修饰）的话，如调用format方法时，多个线程会同时调用calender.setTime方法，导致time被别的线程修改，因此线程是不安全的。</p><p>解决方案：</p><p>　　1、将SimpleDateFormat定义成局部变量</p><p>　　2、 加一把线程同步锁：synchronized(lock)</p><p>　　3、使用ThreadLocal，每个线程都拥有自己的SimpleDateFormat对象副本。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>锁分层升级</p><p>乐观锁</p><p>悲观锁</p><p>Redis分布式锁，lua脚本，看门狗续期锁</p><p>无锁</p><h2 id="NIO模型"><a href="#NIO模型" class="headerlink" title="NIO模型"></a>NIO模型</h2><p>BIO到NIO，再到AIO</p><p>Netty Rector模型</p><p>select/epoll</p><p>响应式编程：WebFlux底层使用Netty，一种面向数据流和变化传播，表达为生产者消费者之间进行流量控制（背压问题），通过全面操作异步化，来减少无效的等待和资源消耗。</p><p>Spring Gateway 的RouteLocator</p><p>背压是反应流中的一个重要概念，可以理解为，生产者可以感受到消费者反馈的消费压力，并根据压力进行动态调整生产速率。</p><h2 id="Springboot-性能优化"><a href="#Springboot-性能优化" class="headerlink" title="Springboot 性能优化"></a>Springboot 性能优化</h2><p>1，首先要暴露数据，比如缓存命中率，连接池参数，业务数据，然后开启监控。</p><p>可以用普罗米修斯暴露数据，配合Grafana数据展示。</p><p>可以看火焰图找到性能瓶颈；</p><p>2，优化请求链路</p><p>HTTP优化：使用HTTP2</p><ul><li><p>CDN，Cache-control浏览器缓存</p></li><li><p>减少单页面请求的域名数，4个之内。因为每次请求域名，查DNS找IP，再调用服务器。若没有本地DNS缓存，产生一定的调用链路开销。</p></li><li>开启GZIP，减少传输效率，Nginx或者Okhttp</li><li>对JS，CSS等资源压缩，应用在前后端分离模式。</li><li>使用keep alive 长连接，减少连接创建和关闭消耗</li></ul><p>JVM优化</p><pre><code>- G1- 堆大小- 堆比例- 进入老年代阈值调整- -XX:+AlwaysPreTouch 在服务启动的时候真实的分配物理内存给JVM</code></pre><p>访问数据库慢优化</p><p>​    - 本地缓存</p><p>分布式</p><p>​    - skywalking 全链路追踪</p><p>Controller</p><ul><li>保持结果集精简 JSON</li></ul><p>Service</p><pre><code>- 单例- 设计模式组织代码- 分布式事务，保证最终一致性：</code></pre><p>Dao</p><pre><code>-  使用合理缓存，避免缓存穿透-  注意sql在分库分表环境执行的性能</code></pre><p>使用HikariCP连接池</p><h2 id="常用代码优化法则"><a href="#常用代码优化法则" class="headerlink" title="常用代码优化法则"></a>常用代码优化法则</h2><ul><li>多使用局部变量：栈分配，可避免堆上分配，堆是垃圾回收主要区域，也避免过多对象造成GC压力。</li><li>减少变量的作用范围：在if分支内，减少创建。</li><li>访问静态变量用类名，不要用this，否则导致多了一步找类的寻址指令。</li><li>StringBuilder或StringBuffer拼接字符串，减少字符串创建</li><li>重写HashCode，要重写equals</li><li>HashMap等集合初始化，指定初始值</li><li>不要在多线程下使用同一个Random，否则seed会在并发访问发生竞争，建议ThreadLocalRandom，配置jvm参数使用速度快的urandom随机生成器</li><li>自增推荐LongAddr，这是synchronized和volatile组合；AtomicLong是CAS替换，导致自旋。</li><li>不要捕捉RuntimeException，要提前判断</li><li>能复用的SQL合理PreparedStatement预编译，能对SQL执行提速，对能复用的SQL语句<strong>放入缓存执行计划中</strong>，下次执行跳过解析动作，所谓预编译语句就是将这类语句的值用占位符替代,可以视为将sql语句模板或者说参数化，防止SQL注入</li><li>日志打印优化，使用占位符，避免多余的字符串拼接操作；减少日志打印，减少占用IO资源</li><li>减少事务作用范围</li><li>位移操作代替乘除法</li><li>不要打印大集合</li><li>少用反射，它通过解析字节码实现，性能不理想，若使用，可加缓存优化</li><li>正则表达式预先编译，初始化一次即可，加快速度；正则解析很慢，可改为状态机</li><li>invokestatic指令调用静态绑定方法 ，代替invokevirtual调用实例动态绑定方法</li></ul><h2 id="JIT编译"><a href="#JIT编译" class="headerlink" title="JIT编译"></a>JIT编译</h2><p>inline –方法内联：对于短小方法体，采用直接追加代码的方式。</p><p>分层编译层次：</p><p>1字节码解释执行</p><p>2执行不带profiling的C1代码</p><p>3执行仅带方法调用以及循环次数profiling的C1代码</p><p>4执行带所有profiling的C1代码</p><p>5执行C2代码</p><p>profiling是指运行时程序执行状态的数据：循环调用次数，方法调用次数，分支跳转次数，类型转换次数。</p><h2 id="逃逸分析："><a href="#逃逸分析：" class="headerlink" title="逃逸分析："></a>逃逸分析：</h2><p><strong>对象，除了基本类型，一定是在堆上分配吗？错。</strong></p><p>经过逃逸分析，可分析出对象的作用范围，来决定是否讲对象分配到堆上。</p><p>成员变量可以分配到栈上，方法返回对象可以分配到堆上。</p><ol><li>对象是否被存入堆中（静态字段或堆中对象的实例字段）</li><li>对象是否被传入未知代码中（方法的调用者和参数）</li></ol><p>总体分3点：</p><p><strong>对象可能分配在栈上</strong></p><p>JVM通过逃逸分析，分析出新对象的使用范围，就可能将对象在栈上进行分配。栈分配可以快速地在栈帧上创建和销毁对象，不用再将对象分配到堆空间，可以有效地减少 JVM 垃圾回收的压力。</p><p><strong>分离对象或标量替换</strong></p><p>当JVM通过逃逸分析，确定要将对象分配到栈上时，即时编译可以将对象打散，将对象替换为一个个很小的局部变量，我们将这个打散的过程叫做标量替换。将对象替换为一个个局部变量后，就可以非常方便的在栈上进行分配了。</p><p><strong>同步锁消除</strong></p><p>如果JVM通过逃逸分析，发现一个对象只能从一个线程被访问到，则访问这个对象时，可以不加同步锁。如果程序中使用了synchronized锁，则JVM会将synchronized锁消除。</p><p><strong>这里，需要注意的是：这种情况针对的是synchronized锁，而对于Lock锁，则JVM并不能消除。</strong></p><h2 id="什么是JVM预热"><a href="#什么是JVM预热" class="headerlink" title="什么是JVM预热"></a>什么是JVM预热</h2><p><strong>JVM预热</strong> ： JVM Warm Up</p><p>一旦类加载完成，所有重要的类（在进程启动时使用）都会被推送到JVM缓存（本机代码）中，这使得它们在运行时可以更快地访问。其他类是根据每个请求加载的。<br>对Java Web应用程序的第一个请求通常比进程的生命周期中的平均响应时间慢得多。这个预热期通常可以归因于延迟类加载和及时编译。<br>记住，对于低延迟应用程序，我们需要预先缓存所有类，以便在运行时访问时立即可用。<br>这种调优JVM的过程称为预热。</p><figure class="image-box">                <img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob3VmYW55YW5nX2NoaW5h,size_16,color_FFFFFF,t_70.png" alt title class>                <p></p>            </figure><p><strong>基于采样的热点探测</strong>：<br> 周期采样，检测各线程栈顶方法，经常出现的方法即为热点方法。好处是简单高效，缺点是不精确，容易受线程运行状态的影响。</p><p><strong>基于计数的热点探测</strong>：<br> （包括方法调用计数器和回边计数器）每个方法建立计数器，用来统计调用次数。如果该方法执行次数超过阈值，则该方法被认定为热点方法。好处是足够精确。缺点是空间损耗大，且实现较难。</p><p>另外，可以通过如XX:CompileThreshold等参数来修改阈值，不过，没有绝对把握，还是不要动为好。</p><p>TLAB的全称是Thread Local Allocation Buffer，即线程本地分配缓存区，这是一个线程专用的内存分配区域。</p><p>是对Eden区域继续进行划分，<strong>JVM为每个线程分配了一个私有缓存区域</strong>，它包含在Eden空间内。</p><p>JIT指导代码优化</p><p>为什么我们在刚写代码的时候，总是被建议不要写很大的方法体？方法内联的JIT优化策略就是其中一个重要的原因。（还有GC友好等原因）</p><p>JVM内的每一次方法调用，都是栈帧在内存中出栈入栈的过程，方法多了性能损耗自然大，所以要进行方法内联，即把方法执行逻辑直接复制到调用方内部，避免方法调用。</p><p>但是，方法内联是有方法大小限制的，超过了一定大小的方法，没法做内联优化。所以，平常应该注意，尽量避免写很大很冗长的方法。</p><p>方法内联虽然只是一种简单优化，但是，是后续其他优化的基石。</p><p>而JVM的分层优化涉及的点非常多[1]：</p><p>局部优化：关注局部数据流分析，数组越界检查消除；寄存器优化，优化跳转、循环、异常处理等；代码简化，如公共表达式提取等等等。</p><p>控制流优化：专注于代码重排序、循环缩减、循环展开、异常定位优化等等等。</p><p>全局优化：主要关注冗余消除，如方法调用、锁；逃逸分析；GC和内存分配优化等等等。</p><h2 id="综合思考性能优化"><a href="#综合思考性能优化" class="headerlink" title="综合思考性能优化"></a>综合思考性能优化</h2><ul><li>业务需求层面</li></ul><p>报表业务，查询缓慢，有时候造成内存溢出</p><p>经过分析，查询时间跨度范围太大造成，缩小到1个月，速度快多了。</p><ul><li>硬件层面</li></ul><p>有一个定时任务，每次将CPU用满，由于系统架构硬伤，无法横向扩容，经过技术评估，如果改成按照数据分片执行的模式，则需要消耗长达1个月工时。</p><p>那么，这个时候，增加硬件。</p><p>尽可能在效果，手段，工时权衡。</p><p>如何找到优化目标？</p><p>利用率：一般是瞬时值，属于采样范围，用来判断有没有峰值</p><p>饱和度：一般指资源是否被合理利用，能否分担更多工作</p><p>错误信息：严重的特别关注</p><p>联想信息：靠经验去猜，然后用工具验证。</p><h2 id="基本解决方式"><a href="#基本解决方式" class="headerlink" title="基本解决方式"></a>基本解决方式</h2><p><strong>CPU问题</strong></p><p>top-Hp命令获取CPU占用最高线程，针对性优化</p><p>棘手问题经验：线程阻塞在ForkJoin线程池上</p><p>代码在等待I/O时，采用并行流（parallelStream）处理，但Java默认所有的方式是所有并行流的地方，共用同一套线程池。这个线程池的并行度只有CPU的两倍。并发量增加，造成任务排队，产生积压。</p><p><strong>内存问题</strong></p><p>通常是OOM。如果内存资源紧张，CPU利用率低，考虑时间换空间。</p><p>一般在高并发应用，会把Swap关掉，因为它很容易引起卡顿。</p><p><strong>IO问题</strong></p><p>一般情况，磁盘IO小，网络IO大</p><p>通过调整日志级别，清理无用日志代码，缓解磁盘IO的压力</p><p>通过RPC调用一个远程服务，期望使用NIO减少无效的等待，或者并行方式加快信息读取</p><p>类似ES数据库，写入造成繁重的磁盘IO，可以增加硬件的配置，换成SSD固态磁盘，或增加新的磁盘；调整segment块大小，translog的刷新速度等。</p><p>对于网络IO，</p><p>springboot和OkHttp开启gzip压缩，</p><p>结果集合并</p><p>使用批量的方式</p><p>netstat命令，获取进程网络状态</p><p><strong>中间层</strong></p><p>加入中间层，缓冲/缓冲，池化，牺牲信息的时效性，加快信息处理的处理速度。</p><p><strong>资源同步</strong></p><p>切分冲突资源的粒度</p><p>减少资源锁定的时间</p><p>将读写分开</p><p><strong>组织优化</strong></p><p>重构–设计模式</p><p>异步化</p><p><strong>资源利用不足</strong></p><p>资源不能合理利用，就是浪费。</p><p>轮转：一定压力下系统的最优状态</p><p>IO密集：并行</p><p>合理利用空闲空间：高位要加大容量</p><h2 id="PDCA-循环方法论"><a href="#PDCA-循环方法论" class="headerlink" title="PDCA 循环方法论"></a>PDCA 循环方法论</h2><p>管理性能优化的过程</p><p>P计划阶段：收集指标，找性能问题，设定改进目标，制定改进措施</p><p>D执行阶段：执行计划</p><p>C检查阶段：检查优化效果，及时发现改进过程的经验和问题</p><p>A处理阶段：将成熟经验推广，有点及面覆盖，为负面形成解决方法，将错误方法形成经验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;性能优化要求我们关注整体效果，兼顾可靠性，扩展性，以及极端情况的异常场景。&lt;br&gt;笔记特点：大部分是已掌握的内容，一些知识只会概括提及。&lt;/</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="优化" scheme="https://missionodd.github.io/categories/技术/优化/"/>
    
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="系统" scheme="https://missionodd.github.io/tags/系统/"/>
    
    <category term="性能" scheme="https://missionodd.github.io/tags/性能/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务 | volatile | 单例模式 | OS | 杂笔摘抄</title>
    <link href="https://missionodd.github.io/2022/01/26/distributed-volatile-series/"/>
    <id>https://missionodd.github.io/2022/01/26/distributed-volatile-series/</id>
    <published>2022-01-26T05:50:37.000Z</published>
    <updated>2022-03-17T03:37:11.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="select-poll-epoll"><a href="#select-poll-epoll" class="headerlink" title="select/poll/epoll"></a>select/poll/epoll</h2><p>在客户端请求服务端时，就是在服务端写入对应的客户端文件描述符FD，如果多个客户端同时请求一个服务端，每一次请求开一个线程，会耗费CPU资源，因此，用一个线程监听多个服务器资源，就是IO多路复用，通信模型有三种，select/poll/epoll。<br>第一种select，在需要判断是否有节点就绪时，会把文件描述符FD从用户态拷贝到内核态中，因为在内核态中判断，效率会比较高。<br>当遍历完文件描述符FD，会把事件返回，select再由用户态向内核态会耗费系统资源，效率比较低，除此，文件描述符以数组保存，在32位，有最大数量1024，64位为2048。拷贝过程中，是用bitmap位图来标记文件描述符的状态，并且使用完后需要置位。</p><p>第二种poll 为了解决数组上限和位图置位问题，引用新结构体pollfd，包含fd，event，revent，首先看fd，是由链表保存，解决连接上限问题，event是读写和异常事件，revent是返回事件，可重用，解决select中位图置位问题，需要循环遍历判断就绪，时间O(n)。</p><p>第三种epoll，可以把就绪判断控制在O(1)，通过三个方法实现，epoll_create()会创建poll实例；epoll_ctl()，会FD注册到内核，避免了用户态的拷贝，内核中保存FD是用了红黑树；epoll_wait()，在<br>红黑树中有就绪时间时，会把它在双向链表中，让用户调用epoll_wait()时，会直接从链表中返回，这里涉及两种触发模式，LT和ET模式；LT水平触发，wait检查fd就绪时，不立即转化双链表，当下次调用wait方法时，再通知进程，这是默认的触发方式；ET边缘触发，通知后进程立即处理事件，下次调用wait方法不会通知，减少epoll时间被重复触发的次数，效率比LT高。</p><h2 id="Spring-Cloud-微服务"><a href="#Spring-Cloud-微服务" class="headerlink" title="Spring Cloud 微服务"></a>Spring Cloud 微服务</h2><p>起初，一个项目的所有功能模块都在一个工程中编码，编译，打包，比如部署在一个tomcat容器中，一般只需要一个数据库，随着业务和用户增长，tomcat需要集群化，负载均衡则需要一个nginx，甚至用到文件或缓存服务器，这样存在单个项目过大 ，而且耦合严重的问题。流行的微服务就可以把项目拆分粒度更小，耦合度降低，并且可以独立部署和扩展，可维护性更强，一个微服务可以部署多个节点来支撑。当服务过多，需要有效识别和管理服务，就需要引入服务治理，通过服务的发现和注册，比如阿里nacos，充当注册中心，把所有启动的服务注册进来，当然，它也可以作为配置中心。</p><blockquote><p>注册中心：Eureka册中心将返回所有可用的服务实例给消费者，但是一般不推荐这种情况。另一种方法就是本地Map存储服务实例列表，服务的消费者向注册中心订阅某个服务，并提交一个监听器，当注册中心中服务发生变更时，监听器会收到通知，这时消费者更新本地的服务实例列表，以保证所有的服务均是可用的。<br>配置中心：客户端是通过一个定时任务来检查自己监听的配置项的数据的，一旦服务端的数据发生变化时，客户端将会获取到最新的数据，并将最新的数据保存在一个 CacheData 对象，对比apollo，配置都没有心跳机制，nacos2.0 采用则统一gRBC通信，流式推送更可靠，吞吐量更少，QPS更高，缺点是没有权限配置，只提供给轻量化的配置）</p></blockquote><p>之前服务注册中心，通过30秒心跳包确定服务是否存活，30秒续约一次。但是，服务扩容时，由于心跳处理不及时，如果大量服务瞬时进行注册，有一定的概率推送超时，但是会在重试后推送成功，保持数据一致性，这种重试会使系统处于达不到稳态。nacos2.0长连接心跳，响应及时，推送失败率少，快速达到稳态。</p><blockquote><p>nacos 1.x</p><ul><li>每个服务实例都通过心跳续约，在Dubbo场景每个接口对应一个服务，当Dubbo的应用接口数较多时需要心跳续约TPS会很高。<br>心跳续约感知时延长，需要达到续约超时时间才能删除实例，一般需要15S，时效性较差</li><li>通过UDP推送变更数据不可靠，需要客户端定时进行数据全量对账保证数据的正确性，大量无效查询，整体服务的QPS很高<br>通信方式基于HTTP短链接的方式，Nacos侧释放连接会进入</li><li>TIME_WAIT状态，当QPS较高时会有连接耗尽导致报错的风险，当然这里通过SDK引入HTTP连接池能缓解，但不能根治</li><li>配置的长轮询方式会导致相关数据进入JVM Old区申请和释放内存，引起频繁的CMS GC</li></ul><p>nacos 2.x</p><ul><li>应用POD按照长连接维度进行心跳续约，不需要按照实例级，大大降低重复请求</li><li>长连接断开时可以快速感知到，不用等待续约超时时长就可以移除实例</li><li>NIO流式推送机制相对于UDP更可靠，并且可以降低应用对账数据频率</li><li>没有连接反复创建的开销，大幅降低TIME_WAIT连接多问题<br>长连接也解决了配置模块长轮询CMS GC问题</li></ul></blockquote><p>消费者服务向提供者服务请求，可以采用dubbo组件，进行RPC远程调用，通信基于HTTP2长连接，交换数据格式基于Protocolbuf。</p><blockquote><p>Triple 协议是 Dubbo3 推出的主力协议。它采用分层设计，其数据交换格式基于Protobuf (Protocol Buffers) 协议开发，具备优秀的序列化/反序列化效率，当然还支持多种序列化方式，也支持众多开发语言。在传输层协议，Triple 选择了 HTTP/2，相较于 HTTP/1.1，其传输效率有了很大提升。此外HTTP/2作为一个成熟的开放标准，具备丰富的安全、流控等能力，同时拥有良好的互操作性。Triple 不仅可以用于Server端服务调用，也可以支持浏览器、移动App和IoT设备与后端服务的交互，同时 Triple协议无缝支持 Dubbo3 的全部服务治理能力。</p></blockquote><p>当并发比较高，需要做负载均衡，Ribbon组件提供多种负载均衡策略，轮询，随机，最少活跃，最短响应，一致性hash。<br>当依赖服务无法请求，导致调用链的大量服务雪崩，可以使用 Sentinel组件，可以使用熔断降级和限流阻止情况的发生。如果所有方法都用同一个线程池第线程，A把打满线程池，导致B不可用线程池，Hystrix采用可以创建多个线程池隔离，也能进信号量隔离，舱壁模式；Sentinel用tomcat现有的线程池，不创建新池，只能信号量隔离（并发线程数限流）。防止恶意流量，需要限流，其策略采用漏斗或者令牌桶算法。</p><p>要了解多服务的调用链路和顺序，监控性能指标，需要搭建APM系统，采用Skywalking全链路服务追踪，无入侵埋点，使用java Agent探针，通过字节码注入实现拦截和数据收集。比zipkin效率高。</p><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>少数情况，需要使用分布式事务。单机时代，可以把多个逻辑放在同一事务中，保证原子性，当两个逻辑在A，B两个节点时，需要保证要么全部成功，要么全部失败，需要引入第三方事务协调者TC，分别向A，B下达开始began命令，A和B分别预处理本地事务，处于uncommitted状态，会被排他锁锁定，本地处理好事务，会ack通知事务协调者；所有ack成功，此时进入第二阶段提交，TC下达提交commit或回滚rollback命令，A，B返回提交成功或回滚的ack响应。但是会存在一个问题，下达二阶段提交命令，由于网络或其他原因，造成无法及时送达，A，B处于阻塞状态。</p><p>解决这个问题，需要再引入一次提交precommit命令，ack协商，保证各节点状态相同，还引入超时机制解决阻塞，这就是3阶段提交3pc。在第一次预提交事务之后，插入一次询问是否提交就绪，并设置超时时间来解决阻塞问题。 三阶段提交解决了二阶段提交的单点故障问题并减少了阻塞。引入了超时机制，仍然有一致性问题，而且整体的交互过程更长了。PreCommit后，发出abort请求，只有一个Cohort收到abort，其他继续Commit，不一致性。</p><p>2pc问题<br>1、同步阻塞问题。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。</p><p>2、单点故障。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题）</p><p>3、数据不一致。在二阶段提交的阶段二中，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了commit请求。而在这部分参与者接到commit请求之后就会执行commit操作。但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。</p><p>4、二阶段无法解决的问题：协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</p><p>2PC与3PC的区别：<br>    相对于2PC，3PC主要解决的单点故障问题，并减少阻塞，因为一旦参与者无法及时收到来自协调者的信息之后，他会默认执行commit。而不会一直持有事务资源并处于阻塞状态。但是这种机制也会导致数据一致性问题，因为，由于网络原因，协调者发送的abort响应没有及时被参与者接收到，那么参与者在等待超时之后执行了commit操作。这样就和其他接到abort命令并执行回滚的参与者之间存在数据不一致的情况。</p><p>*2PC：主持人<strong>跟第一位组员通话后</strong>，主持人<strong>失忆</strong>，<strong>组员</strong>得知结果并<strong>执行后痴呆</strong>，重选主持人，<strong>没人去提案</strong>，任务阻塞。</p><p><strong>3PC：</strong>即使主持人通知一部分组员执行后<strong>失忆</strong>，<strong>全体决策组员过一段时间决定全体自发提案或全体默认否决</strong>，此时没有阻塞，也没有不一致</p><p>如果主持人通知全体组员，大家再次确定，进入第三阶段</p><p>这时主持人通知第一位组员，请通过提案后两人<strong>失忆</strong>，<strong>重选</strong>出主持人，<strong>所有人仍自发去提案</strong>，没有问题；如果主持人通知是否决任务，通知第一位组员否决后两人<strong>失忆</strong>，<strong>重选</strong>出主持人，<strong>所有人仍自发去提案</strong>，出现不一致。</p><p>其实在我看来，解决单点故障减少阻塞的并不是将第一阶段掰成两半的操作，而是在最后提交的时候，超时自动提交。</p><p>两阶段完全也可以做成超时自动提交，只不过这样就和三阶段一样，无法保证数据的一致性。<br><figure class="image-box">                <img src="image_20220220170723.jpeg?v=1&type=image&token=V1:wIKY4Q2qtCsc_zurcS0boXyzKsv6apc4fDSJ40yytuA" alt title class>                <p></p>            </figure></p><p>为了得到最终一致性，我们要用补偿机制。</p><p><strong>2PC 和 3PC 都是数据库层面的，而 TCC 是业务层面的分布式事务</strong>，从思想上看和 2PC 差不多，用于补偿。</p><p>TCC是成熟的分布式事务解决方案，核心思想是事务补偿机制，包括try，confirm，cancel三个接口。try尝试锁定所有需要使用的资源，当所有回答yes，进入confirm 提交事务阶段，如果出现失败，调用cancel会滚补偿，不过有一个缺点，就编码量大。</p><blockquote><p>优点：<br>性能提升：具体业务来实现控制资源锁的粒度变小，不会锁定整个资源。<br>数据最终一致性：基于 Confirm 和 Cancel 的幂等性，保证事务最终完成确认或者取消，保证数据的一致性。<br>可靠性：解决了 XA 协议的协调者单点故障问题，由主业务方发起并控制整个业务活动，业务活动管理器也变成多点，引入集群。<br>缺点：TCC 的 Try、Confirm 和 Cancel 操作功能要按具体业务来实现，业务耦合度较高，提高了开发成本。</p></blockquote><p>SAGA 是一种长活事务，把一个大的事务分解成一个个小事务T，每一个小事务T，都有一个对应的补偿任务C，当小事务失败，有两种补偿，1是正向重试T，2是反向恢复C。</p><p>也可以借助本地事务状态表来实现分布式事务：初始状态为1，每次成功调用一次服务，则更新一次状态，在所有状态为3时，就说明所有服务调用成功。</p><p>基于消息中间件的分布式事务解决方案：利用额外的MQ实现事务一致性，在业务A中把B的任务记录为msg B，逻辑合并在同一个事务中，并且把消息存储在本地DB表中，状态为待发送，并且开一个异步定时任务在本地轮询扫描这个表作为后续重试机制，通过MQ把消息发送到B，过程中可能存在消息投递失败的可能，此时就依靠<code>重试机制</code>来保证，当B收到消息时，在做对应操作前，会检查之前是否做过，因为集群或重试重复消息，需要做去重的幂等处理，保证消息不被重复消费。而后面如果B消费失败的话，则依赖MQ本身的重试来完成。B做完返回ACK到MQ，弹出MQ对应消息，同时将A接收ACK将对应消息状态更新或者消息清除；当然，后面A处理任务也是幂等。<br>多次重试后消息状态改为“超时”，要么回滚整个业务，要么再加一个单独地定时任务，它会间隔更长时间的定期轮训长时间处于<code>超时</code>状态的消息，通过一个<strong>check补偿机制</strong>来查询确认该消息对应的业务是否成功，如果对应的业务处理成功，则将消息然后将其投递给MQ，走一遍幂等业务；如果业务处理多次失败，则将对应的消息更新为失败，多次尝试失败记录警告，并通知等待人工干预，比如后台补单操作。因此在使用该方案时，消息生产者必须同时实现一个check查询服务，来供消息服务做消息的确认。</p><p>联想“支付场景”逻辑</p><p><a href="https://www.cnblogs.com/myseries/p/10819804.html" target="_blank" rel="noopener">https://www.cnblogs.com/myseries/p/10819804.html</a></p><p>独立消息服务<br><figure class="image-box">                <img src="image_20220220181659.png?v=1&type=image&token=V1:wI5_dncmAo9J1SqGOy916FBsmqKqYsfb54Unekn4JFY" alt title class>                <p></p>            </figure></p><blockquote><p>优点：<br>消息数据独立存储，降低业务系统与消息系统之间的耦合。<br>实现部分事务可重试<br>缺点：<br>强依赖MQ可靠<br>一次消息发送需要两次网络请求(half消息 + commit/rollback)。</p></blockquote><p>业界有一些为“最终一致性”而生的消息队列，如Notify（阿里）、QMQ（去哪儿）等，其设计初衷，就是为了交易系统中的高可靠通知。</p><p>seata支持多种模式：<br>XA协议：2PC，3PC，实现强一致性<br>TCC，SAGA，独创的AT模式，实现最终一致性；</p><p>AT模式，有几个重要的角色，TM用于开启全局事务，可提交或会滚，A，B对应两个子任务，TC是事务协调者。<br>第一步，TM，A，B分别把自己注册给TC<br>第二步，TM开启全局事务，A处理事务，首先向TC注册分支事务，然后预处理A的操作，并向sql写入会滚日志，最终提交本地事务；同样，B也注册分支事务，预处理自己的逻辑，写会滚日志，提交处理成功告诉TC。<br>第三步，所有逻辑处理完，TM提交全局事务，TC分别向A，B提交分支事务，并且删除所有回滚日志。或者，进行全局的回滚。</p><h2 id="单例模式的原因"><a href="#单例模式的原因" class="headerlink" title="单例模式的原因"></a>单例模式的原因</h2><p>双重校验锁DCL ——double check lock<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeDoubleCheckedLocking</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Instance instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SafeDoubleCheckedLocking<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Instance();<span class="comment">//instance为volatile，现在没问题了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1.懒汉实现惰性加载资源。</p><ol start="2"><li><p>volatile修饰，设置内存屏障，强制指令执行顺序，先分配内存空间，再创建对象，最后引用指向该对象。</p></li><li><p>static修饰，定义属于类变量，保证单例</p></li><li>第一个判断null，过滤synchronized锁的性能消耗</li><li>同步块，设置临界区，同时间只允许一个线程完成对象的创建。</li><li>第二个判断null，防止多线程进入第一个判断null，而导致多对象的创建。</li></ol><blockquote><p>Q: 过去DCL不安全的原因？<br>JVM1.4前，允许指令混乱情况。final：一个线程构造函数为final修饰变量赋值，另一个线程可能获取final的初始化0值；volatile：只保证读可见性，不保证写的顺序</p></blockquote><blockquote><p>Q: 不用volatile，先临时变量，再赋值到单例变量，是否能解决指令重排？<br> 不能，JVM只是潜在的reorder推手之一，CPU和缓存也会导致重排</p></blockquote><blockquote><p>Q: 新版本volatile如何保证DCL安全？<br>设置内存屏障，防止指令重拍，其中store-load屏障是保证读写顺序，实现volatile上的happens-before语义，即一个线程对volatile变量的写，先于其他线程对该变量的同时读。屏障的结果就是原来只保证volatile字段本身的可见性，现在保证本身以及所有相关字段的可见性，代价就是造成访问volatile字段的更大性能开销。</p></blockquote><blockquote><p>Q：是否可以用final实现DCL？<br>能。<br>a.对final字段的写必然先于其它线程装载该final字段的共享引用。（final字段必须被正确地赋值后其它线程才能读取到它）<br>b. 构造函数执行完毕后，对 final 字段的所有写以及通过这些 final 字段间接可及的变量变为“冻结”，所有在冻结之后获得对这个对象的引用的线程都会保证看到所有冻结字段的冻结值。（所有线程对final及其间接字段有一致的可见性）<br>c. 初始化 final 字段的写将不会与构造函数关联的冻结后面的操作一起重排序。（构造函数内部，对某个final字段而言，它的冻结点之前的操作必然先于冻结点之后的操作）</p></blockquote><blockquote><p> 再来说一下final域的重排规则：</p><ol><li>写final的重排规则：<br>JMM禁止编译器把final域的写重排序到构造函数之外。<br>在final域的写之后，插入一个StoreStore屏障。<br>也就是说确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了。</li><li>读final的重排规则：<br>在一个线程中，初次读对象引用与初次读该对象包含的final域，JMM禁止处理器重排序这两个操作（注意，这个规则仅仅针对处理器）。<br>在读final域操作的前面插入一个LoadLoad屏障。<br>也就是说确保：在读一个对象的final域之前，一定会先读包含这个final域的对象的引用。</li><li>如果final域是引用类型，那么增加如下约束：<br>在构造函数内对一个final引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。<br>就是确保在构造函数外把这个被构造对象的引用赋值给一个引用变量之前，final域已经完全初始化并且赋值给了当前构造对象的成员域，至于初始化和赋值这两个操作则不确保先后顺序。）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> T value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalWrapper</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> FinalWrapper&lt;Helper&gt; helperWrapper;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      FinalWrapper&lt;Helper&gt; wrapper = helperWrapper;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (helperWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  helperWrapper = <span class="keyword">new</span> FinalWrapper&lt;Helper&gt;(<span class="keyword">new</span> Helper());</span><br><span class="line">              &#125;</span><br><span class="line">              wrapper = helperWrapper;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> wrapper.value;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Q: DCL是否是实现单例的最佳方案？是否有代替？<br>不是。DCL的目的是懒加载和提高性能，但现代JMM加强volatile保证可靠，但副作用是性能开销变大，且加上了同步块的开销。</p></blockquote><p>完美方案：<br>推荐通过内部类实现惰性加载：<br>有一个大前提，JVM保证类的加载过程是线程互斥。<br>第一个调用getInstance，instance只被创建1次，且赋值给instance的内存已初始化完毕，避免reorder，此外，该方法第一次使用互斥机制，解决同步块带来的性能问题；<br>当然，只有第一次调用getInstance时才让instance加载，所以是惰性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;      </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">             …          </span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonContainer</span></span>&#123;</span><br><span class="line">             <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();          </span><br><span class="line">&#125;          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> SingletonContainer.instance;          </span><br><span class="line">&#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://blog.csdn.net/doraeimo/article/details/5714239" target="_blank" rel="noopener">https://blog.csdn.net/doraeimo/article/details/5714239</a></p><h2 id="volatile-保证可见性？"><a href="#volatile-保证可见性？" class="headerlink" title="volatile 保证可见性？"></a>volatile 保证可见性？</h2><p>层层深入讲。</p><ol><li>可见性是指解决多线程在操作同一变量时，多个工作内存中的值不一样的问题。</li><li>JMM中定义了8种原子操作保证可见性：<br> 除了lock和unlock，<br> 还定义了<br> read load use 作为一种读原子操作<br> assign store write 作为一种写原子操作<br> 主存值read到执行引擎，执行引擎值load到一个栈存副本变量，栈存值use 到执行引擎，以便计算处理；<br> 执行引擎值 assign到栈存副本变量，栈存副本值store到主存，主存值write 到主存的变量，以便共享；<br> 避免在 读过程 或 写过程 中间操作被打断。<br> 虽然use 和assign存在 被打断的可能，但工作内存和主内存依旧想等。<br> 因此在多线程内，适合flag赋值，不适合a++等非原子操作，运算结果a会对中间加数a产生依赖。</li><li>原子操作的底层实现需要两种方式：<br> 一个是通过总线的，总线上有一个<strong>缓存一致性协议</strong>。总线有一个数据修改，所有的数据修改都是从总线推到主存，这个时候，其他cpu会<strong>嗅探</strong>总线上的修改，然后推送给其他cpu置旧的缓存不可用，下次再使用，就会从主存里读取（这部分可展开CPU底层）。还有一个是通过<strong>内存屏障</strong>，<strong>禁止指令重排序</strong>。<br> <strong>内存屏障有4种，load和store指令之前执行，比如：volidate 有读和写操作，在写前加store屏障，保证写写操作，不能重排序；在写后加storeLoad屏障，保证先写再读。在第一个读后加入loadLoad，保证读读的顺序；读后加入loadStore，保证读写顺序，StoreLoad虽然是全能屏障，同时具有其他3个屏障的效果，但开销大，因为处理器通常要把当前的写缓冲区的内容全部刷新到内存。基本上这就是volidate的禁止重排序的配合。</strong></li></ol><h3 id="Q：问点简单的，细说8种原子操作？"><a href="#Q：问点简单的，细说8种原子操作？" class="headerlink" title="Q：问点简单的，细说8种原子操作？"></a>Q：问点简单的，细说8种原子操作？</h3><p>（这要背了。。。）</p><ol><li><strong>read</strong>  读取：作用于主内存，将共享变量从主内存传动到线程的工作内存中，供后面的 load 动作使用。</li><li><strong>load</strong>  载入：作用于工作内存，把 read 读取的值放到工作内存中的副本变量中。</li><li><strong>store</strong>  存储：作用于工作内存，把工作内存中的变量传送到主内存中，为随后的 write 操作使用。</li><li><strong>write</strong>  写入：作用于主内存，把 store 传送值写到主内存的变量中。</li><li><strong>use</strong>  使用：作用于工作内存，把工作内存的值传递给执行引擎，当虚拟机遇到一个需要使用这个变量的指令，就会执行这个动作。</li><li><strong>assign</strong>  赋值：作用于工作内存，把执行引擎获取到的值赋值给工作内存中的变量，当虚拟机栈遇到给变量赋值的指令，执行该操作。比如  <code>int i = 1;</code></li><li><strong>lock（锁定）</strong>  作用于主内存，把变量标记为线程独占状态。</li><li><strong>unlock（解锁）</strong>  作用于主内存，它将释放独占状态。</li></ol><figure class="image-box">                <img src="JMM操作指令.png" alt="深入浅出Java虚拟机" title class>                <p>深入浅出Java虚拟机</p>            </figure><h3 id="Q：解释缓存一致性协议和嗅探机制？"><a href="#Q：解释缓存一致性协议和嗅探机制？" class="headerlink" title="Q：解释缓存一致性协议和嗅探机制？"></a>Q：解释缓存一致性协议和嗅探机制？</h3><p>a.  cpu三级缓存讲起，为解决主内存IO速度远远低于CPU运行速度，防止读CPU被阻塞，浪费CPU性能，CPU引入L1/L2/L3缓存行。<br>由于高速缓存行的引入，导致了多核CPU的并行访问缓存数据不一致的问题。比如更新一个CPU核的缓存，另外CPU依然存旧的值。<br>b. 为了解决脏数据和丢失更新的问题，要实现写原子操作，那么，需要两个锁：<br>一个总线锁，锁cpu和主内存通信，还阻塞其他CPU，保证锁期间只有一个CPU改写，但其他CPU也不能操作其他内存数据，似乎无影响操作也锁上了，开销过大。<br>一个缓存锁，只锁定被修改的缓存行。锁期间会进行一个CPU缓存的更新，以及其他缓存失效。这利用了缓存一致性协议mesi。缓存行有4状态：M修改，E独占，S共享，I失效。<br>共享表示主存和所有cpu的值一致，独占表示只有一个cpu有缓存，失效表示当前cpu存储旧值，修改表示当前cpu存储新值。<br>当一个cpu由共享态被主存改为修改态，cpu会更新一个排他标志，并且，通过总线，广播通知其他CPU，其他CPU异步“嗅探”事件后，把数据改为失效态。等下一次访问，再更新。</p><p>拓展性表格：<br>|  |M |S |E |I |<br>|–|–|–|–|–|<br>|M |X |X |X |O |<br>|E |X |X |X |O |<br>|S |X |X |O |O |<br>|I |O |O |O |O |</p><h3 id="Q：有缓存锁？为什么还要总线锁？"><a href="#Q：有缓存锁？为什么还要总线锁？" class="headerlink" title="Q：有缓存锁？为什么还要总线锁？"></a>Q：有缓存锁？为什么还要总线锁？</h3><p>（小细节不放过）</p><p>有两种情况不能用缓存锁：<br>一是数据大或数据跨多缓存行，二是部分CPU不支持缓存锁。<br>现代CPU总线锁和缓存锁并存实现数据一致性。</p><h3 id="Q：从硬件架构来说，CPU为什么会重排序？"><a href="#Q：从硬件架构来说，CPU为什么会重排序？" class="headerlink" title="Q：从硬件架构来说，CPU为什么会重排序？"></a>Q：从硬件架构来说，CPU为什么会重排序？</h3><p>​    前面指令如果依赖的数据发生缓存缺失，那么需要去内存磁盘读取数据，这个过程很耗时，如果不乱序执行的话，后面所有的指令都会被block住，这样CPU的吞吐量上不去，所有会有乱序执行机制，让后面没有数据依赖关系的指令可以不用等前面指令执行完了再执行（IPC，指令级并发）</p><p>作者：sakura1027<br>链接：<a href="https://www.nowcoder.com/discuss/459561?channel=-1&amp;source_id=profile_follow_post_nctrack" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/459561?channel=-1&amp;source_id=profile_follow_post_nctrack</a><br>来源：牛客网</p><p>​    首先，我们要知道，CPU是并行流水线作业。本质上是利用了电路天然的并行性。这些电路，实际上都是一个个晶体管组合而成的。想要计算得快，一方面，我们要在 CPU 里，同样的面积里面，多放一些晶体管，<strong>也就是增加密度</strong>；另一方面，我们要让晶体管“打开”和“关闭”得更快一点，<strong>也就是提升主频</strong>。而这两者，都会增加功耗，带来耗电和散热的问题。</p><p>​    在 CPU 内部，和我们平时戴的电子石英表类似，有一个<strong>叫晶体振荡器（Oscillator Crystal）的东西</strong>，简称为晶振。我们把晶振当成 CPU 内部的电子表来使用。<strong>晶振带来的每一次“滴答”，就是时钟周期时间</strong>。Clock Cycle Time 一次晶振时间，时钟周期。简称<strong>CPI</strong></p><p>比如2.8GHz 就是电脑的主频，<strong>CPU 在 1 秒时间内，可以执行的简单指令的数量是 2.8G 条</strong>。<strong>2.0GHz意味着每秒钟它会产生20亿个时钟脉冲信号，每个时钟信号周期为0.5纳秒</strong></p><p>对于 CPU 时钟周期数，我们可以再做一个分解，把它变成“指令数×每条指令的平均时钟周期数”，<strong>加法和乘法都对应着一条 CPU 指令</strong>，<strong>但是乘法需要的 Cycles 就比加法要多</strong></p><p>现代的 CPU 通过流水线技术（Pipeline），让一条指令需要的 CPU Cycle 尽可能地少。因此，对于 CPI 的优化，也是计算机性能优化的重要一环。</p><p>指令执行过程拆分成“取指令、译码、执行”这样三大步骤。这为一个指令周期。</p><p>CPU一个时钟周期有很多条并行的流水线。</p><p>比如，五级的流水线，就表示我们在同一个时钟周期里面，同时运行五条指令的不同阶段。这个时候，<strong>虽然执行一条指令的时钟周期变成了 5，但是我们可以把 CPU 的主频提得更高了</strong>。</p><p>并行如何保证顺序流水线之间顺序？</p><p>数据冒险，其实就是同时在执行的多个指令之间，有数据依赖的情况。这些数据依赖，我们可以分成三大类，分别是先写后读（Read After Write，RAW）、先读后写（Write After Read，WAR）和写后再写（Write After Write，WAW）。</p><p>解决这些数据冒险的办法，就是流水线停顿（Pipeline Stall），或者叫流水线冒泡（Pipeline Bubbling），起到延迟再等等的作用。好像是内存屏障。</p><h3 id="Q：什么是三级缓存？"><a href="#Q：什么是三级缓存？" class="headerlink" title="Q：什么是三级缓存？"></a>Q：什么是三级缓存？</h3><p>刚刚提到，为解决主内存IO速度远远低于CPU运行速度，防止读CPU被阻塞而引入L1/L2/L3。<br>L1各CPU独立，保存L2的数据，最小最快，如256k；L2各CPU独立，保存L3的数据，更大偏慢，如1M；L3各CPU共享，注意，不是所有CPU核共享，有多个L3，每几个CPU核共享一个L3，保存主存取的数据，最大最慢，如6MB。具体是二级还是三级根据CPU硬件而定。</p><p>CPU需要数据的时候，会先在一级缓存中寻找数据，一般一级缓存的数据命中率可以达到80%。如果一级缓存中找不到数据，CPU就会到二级缓存中寻找数据，如果依旧找不到的话，就会到三级缓存中找。有的CPU有四级缓存，三级缓存中没有，那就到四级缓存中找。</p><p>缓存怎么存呢？用缓存行，一个缓存行为64字节。<br>偏爱存储连续相邻的空间位置数据，体现为经常是访问数据+相邻数据，存指令也是，这就是空间局部性，比如mysql的B+树。如果一个信息被访问一次，近期可能会再次被访问，比如循环，递归，方法的反复调用，这就是时间局部性。共同构成局部性原理。</p><h3 id="Q：既然提到缓存行，知道伪共享问题吗？如何解决？"><a href="#Q：既然提到缓存行，知道伪共享问题吗？如何解决？" class="headerlink" title="Q：既然提到缓存行，知道伪共享问题吗？如何解决？"></a>Q：既然提到缓存行，知道伪共享问题吗？如何解决？</h3><p>（深…不见底）<br>伪共享，不是缓存是否真假共享问题哈，而是一个性能问题。<br>a. 首先，我们知道，对共享数据的写操作，会加锁+EMSI操作，耗费性能。<br>b. 伪共享，就是几个在逻辑上相互独立但在同一个内存单元内的数据，由于被cpu加载在同一个缓存行当中，当在多线程环境下，被不同的cpu执行，导致缓存行失效而引起的大量的缓存命中率降低。<br>例如：当两个线程分别对一个数组中的两份数据进行写操作，每个线程操作不同index上的数据，看上去，两份数据之间是不存在同步问题的，但是，由于他们可能在同一个cpu缓存行当中，这就会使这一份缓存行出现大量的缓存失效，如前所说，一个线程更新CPU缓存，会让其他CPU缓存失效掉。<br>c. 解决伪共享，采用缓存行填充，Cache Line Padding。具体就是定义无用变量代码。<br>解决伪共享问题的一个办法是让每一份数据占据一个缓存行：因为缓存行的大小是64个字节，那我们只要让数组中每份数据的大小大于64个字节，就可以保证他们在不同的缓存行当中，就能避免这样的伪共享问题。<br>比如一个类当中原本只有一个long类型的属性。这样这个类型的对象只占了16个字节（java对象头有8字节），如果这个类被定义成一个长度为4的volatile数组，这个数组的所有数据都可能在一个缓存行当中，就可能出现伪共享问题，那么这个时候，就可以采用补齐(padding)的办法，在这个类中加上public long a,b,c,d,e,f,g;这6个无用的属性定义，8字节对象头+8字节long*7个，使得这个类的一个实例占用内存达到64字节，这样这个类型的伪共享问题就得到了解决，在多线程当中对这个类型的数组进行写操作就能避免伪共享问题。（妙）</p><p><del>Q: 8字节对象头包括什么？算了，先不问这个</del></p><h3 id="Q：volatile的使用会导致什么问题？能避免吗？"><a href="#Q：volatile的使用会导致什么问题？能避免吗？" class="headerlink" title="Q：volatile的使用会导致什么问题？能避免吗？"></a>Q：volatile的使用会导致什么问题？能避免吗？</h3><p>（真的能问）</p><ol><li>volatile和cas使用过多会产生工作内存和主内存频繁交互、嗅探等操作，其很多事无效的操作，而系统共用一条总线，总线（bus）带宽资源有限，其中还有其他数据流、显存等交互，总线流量激增，这样就导致总线风暴。</li><li>不保证原子性。使用<code>volatile</code>在相关领域周围竖立记忆障碍物.好处是这不会导致线程进入”阻塞”状态。原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。但上面提到，use和assign是被打断的，以至于a++不是原子操作。只能一定程度上保证有序性。</li><li>可能导致内核态与用户态的上下文切换。 它不会像锁一样直接引起线程<code>上下文的切换和调度</code>。当<code>volatile</code>访问该字段时，程序必须刷新对中央存储器的更改并更新需要周期的高速缓存存储器。在CPU的“嗅探”到消息后，CPU中断去处理失效，此时CPU程序计数器栈会发生上下文切换。</li><li>当然，还有刚说的伪共享。几个逻辑上独立数据，加载在同一个缓存行，更新引发批量缓存失效问题。</li></ol><p>解决原子性，可以采用Atomic原子变量，有两种写set和lazySet<br>set方法使用CAS + volatile，在写操作的前后都加了内存屏障。lazySet方法并不是直接的操作value字段，而是通过Unsafe类的方法先通过初始化时候计算出的value字段的偏移变量找到字段地址，然后调用本地方法进行操作的，在本地方法中只在写操作前面加了一个屏障，而后面没有加。相当于只用普通变量。<br>因为引入CAS轻量级锁，有自旋操作，更消耗CPU。</p><p>总之，使用volatile或Atomic，根据具体业务场景而定。</p><h3 id="Q-CAS底层？"><a href="#Q-CAS底层？" class="headerlink" title="Q:CAS底层？"></a>Q:CAS底层？</h3><ol><li>处理器提供<strong>总线锁定</strong>和<strong>缓存锁定</strong>两个机制来保证复杂内存操作的原子性</li><li><p>cmpxchg指令加上lock前缀（lock cmpxchg）</p><p>3.锁住总线，使得其他处理器暂时无法通过总线访问内存。</p><p>4.StoreLoad内存屏障，<strong>禁止该指令与之前和之后的读和写指令重排序</strong>，使得线程把不是单单被修改的数据会被回写到主内存，而是写缓存中所有的数据都回写到主内存。</p><p>5.而将写缓冲区的数据回写到内存时，就会通过缓存一致性协议（如，MESI协议）和窥探技术来保证写入的数据被其他处理器的缓存可见。这就相当于实现了volatile的内存语义。</p></li></ol><h3 id="Q：上面有提到CPU上下文切换，来说说用户态和内核态？"><a href="#Q：上面有提到CPU上下文切换，来说说用户态和内核态？" class="headerlink" title="Q：上面有提到CPU上下文切换，来说说用户态和内核态？"></a>Q：上面有提到CPU上下文切换，来说说用户态和内核态？</h3><p>（来了，来了。扯操作系统，干爆！）</p><p>从4个点讲：</p><p> a. 从CPU指令集开始讲，多个汇编指令的集合就是CPU指令集。</p><p>CPU指令集分为4个权限：ring 0，ring 1，ring 2 和 ring 3；</p><p>ring 0 权限最高，ring 3 权限最低。</p><ul><li>ring 0被叫做内核态，完全在操作系统内核中运行，可以使用所有 <code>C P U 指令集</code>；</li><li>ring 3被叫做用户态，在应用程序中运行，，不能使用操作硬件资源的 <code>C P U 指令集</code>，比如 <code>I O</code> 读写、网卡访问、申请内存都不行。</li><li>ring1与ring2主要是访问驱动程序，win10 和 linux 只有 ring 0 和ring 3。</li></ul><p>b. 为什么划分权限？内核模式下任何异常都是灾难性的，会导致停机。用户模式下，可以限制对硬件的直接控制权限，只能通过系统提供的调用接口来控制。在这种保护模式下，即时用户程序发生崩溃也是可以恢复的，在电脑上大部分程序都是在用户模式下运行的。</p><p>c. 再说，每个进程都有两个栈，分别是用户栈与内核栈，对应用户态与内核态的使用。用户程序会使用用户栈，为了可以操作ring 0 级别的 CPU 指令集， CPU切换权限级别为 ring 0，进入内核态，CPU再执行相应的ring 0 级别的 CPU 指令集（内核代码），执行的内核代码会使用当前进程的内核栈。</p><p>d. 再一个是，用户态与内核态的虚拟内存寻址空间。操作系统会把一个进程的虚拟控制内存地址划分为两部分，以32位Linux操作系统为例，假如有<code>4G</code>寻址空间范围 ，高位部分为内核栈， <code>1G</code>由内核使用；低位部分为用户栈， <code>3G</code>由各个进程使用。</p><p><code>Q: 我插一句。。。</code></p><p>c. 先别插话，讲最后一点，用户态和内核态切换的开销大。</p><ul><li>保留用户态现场（上下文、寄存器、用户栈等）</li><li>复制用户态参数，用户栈切到内核栈，进入内核态</li><li>额外的检查（因为内核代码对用户不信任）</li><li>执行内核态代码</li><li>复制内核态代码执行结果，回到用户态</li><li>恢复用户态现场（上下文、寄存器、用户栈等）</li></ul><p><code>Q: 那我问一句。。。</code></p><p>d.  还有！还有！关于什么情况会导致用户态到内核态切换？</p><p>1-系统调用，如fork()创建新进程；</p><p>2-异常，如缺页异常 ；</p><p>3-CPU中断，如硬盘读写操作完成，中断处理后边程序。</p><h4 id="Q-插一句，低位空间只能由用户态使用吗？内核态空间是独立的吗？"><a href="#Q-插一句，低位空间只能由用户态使用吗？内核态空间是独立的吗？" class="headerlink" title="Q: 插一句，低位空间只能由用户态使用吗？内核态空间是独立的吗？"></a>Q: 插一句，低位空间只能由用户态使用吗？内核态空间是独立的吗？</h4><p>（问这么细）</p><p>都不是1. 用户态只能操作自己的3G空间，内核态是能操作4G的所有范围；2. 内核态自己的1G是所有进程共享的，指所有进程的内核态逻辑地址是共享同一块内存地址，记住，这是虚拟映射空间！！！这里存放在整个内核的代码和所有的内核模块，以及内核所维护的数据。所以，这个地址空间，包括整个进程的虚拟地址空间，对于每个进程来说都是逻辑独立的，而且，每个进程看到的逻辑地址空间都是一样的，实际上，物理内存有共享部分和独立部分。</p><h4 id="Q：再插一句，问题来了，不同进程-有相同的逻辑地址，但是却又不同的内容，这怎么实现呢？※"><a href="#Q：再插一句，问题来了，不同进程-有相同的逻辑地址，但是却又不同的内容，这怎么实现呢？※" class="headerlink" title="Q：再插一句，问题来了，不同进程 有相同的逻辑地址，但是却又不同的内容，这怎么实现呢？※"></a>Q：再插一句，问题来了，不同进程 有相同的逻辑地址，但是却又不同的内容，这怎么实现呢？※</h4><p>（啊啊啊，这势头，内存继续深挖…）</p><p>这就要靠 每个进程的的<strong>页表</strong>了，每个进程都有一个自己的页表，使得某逻辑地址对应于某个物理内存。</p><p>首先，我们要对进程的虚拟内存空间有清晰的认识：</p><ul><li><p>操作系统为每个进程分配的内存空间是一样的；如32位Linux操作系统的内存空间是0-4G。</p></li><li><p>操作系统为每个进程分配的内存空间所提交的物理内存空间在用户的角度一般是不同的，在内核是相同的。</p></li><li><p>用户可以通过操作系统将同一块物理内存映射到不同的进程空间。</p></li></ul><p>正因为 每个进程都有一个自己的页表，使得相同的逻辑地址映射到 不同 或 存在相同 的物理内存。对于线程 ，它也有自己的页表，只是页表的 逻辑地址 映射到的物理内存相同。</p><h4 id="Q-大概讲下，虚拟内存映射过程？"><a href="#Q-大概讲下，虚拟内存映射过程？" class="headerlink" title="Q: 大概讲下，虚拟内存映射过程？"></a>Q: 大概讲下，虚拟内存映射过程？</h4><p>（挖了个大坑。。。预感还问页面置换算法。。。）</p><ol><li><p>进程要知道哪些内存地址上的数据在物理内存上，哪些不在，还有在物理内存上的哪里，需要用页表来记录</p><blockquote><p>页表的每一个表项分两部分，第一部分记录此页<a href="https://github.com/Durant35/durant35.github.io/issues/24">是否在物理内存</a>上，第二部分记录<a href="https://github.com/Durant35/durant35.github.io/issues/24">物理内存页的地址</a>（如果在的话）</p></blockquote><p>2.当进程访问某个虚拟地址，去看页表，如果发现对应的数据不在物理内存中，则<a href="https://github.com/Durant35/durant35.github.io/issues/24">缺页异常</a></p></li></ol><blockquote><p>缺页异常的处理过程，就是把进程需要的数据从磁盘上拷贝到物理内存中，如果内存已经满了，没有空地方了，那就找一个页覆盖，当然如果被覆盖的页曾经被修改过，需要将此页写回磁盘。这里用到一些<strong>页面置换算法</strong></p></blockquote><ol start="3"><li><p>辅助映射的硬件：内存管理单元MMU，通常是 CPU 的一部分，<strong>本身有少量的存储空间</strong>用来存放从虚拟地址到物理地址的查找表；</p></li><li><p>三种内存管理方式：分别是<strong>分段、分页、段页</strong></p><p><strong>分段</strong></p><p>分段管理下的虚拟地址由两部分组成，段号和段内偏移量</p><p><img src="640.png" alt="图片"></p><blockquote><ol><li>通过段号映射段表的项</li><li>从项中获取到段基地址</li><li>段基地址+段内偏移量=使用的物理内存</li></ol></blockquote><p>有两个不足：</p><p>一是容易产生内存碎片：没有足够一个段的空间映射就是内存碎片，解决方法是<strong>内存碎片整理</strong>，而内存碎片整理是通过<strong>内存交换</strong>的方式来实现，即内存部分数据加载硬盘，再读时，会紧挨另一个段形成连续物理内存。</p><p>二是内存交换效率低：因为容易造成内存碎片，导致内存交换的频率较高，又因为因为硬盘的访问速度比内存慢太多了，把一大段连续的内存写入到硬盘，再又从硬盘读取出来，如果交换的是一个占内存空间很大的程序，这样整个机器都会显得卡顿，过程也很慢的，所以说分段方式内存交换效率低。</p><p>为了解决内存分段管理造成的内存碎片与内存交换效率低的问题，就出现了内存分页。</p></li></ol><hr><p>   分页方式是这样解决的，如果内存空间不够时，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页释放掉，也就是加载到硬盘，称为换出，一旦需要的时候再加载进来，称为换入。所以一次性写入硬盘的也只有一个页或几个页，内存的交换效率自然就提升了。</p><p>   分页方式使加载程序的时候，不再需要一次性都把程序加载到物理内存中。完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去（用大白话说，当你需要用到的时候才会去使用对应的物理内存）。</p><hr><p>   简单分页：是每个进程都会分配一个页表，虚拟地址会分为两部分，页号和页内偏移量，页号作为页表的索引,页表包含物理页每页所在物理内存的基地址，页内偏移量+物理内存基地址就组成了物理内存地址，如下图所示</p><p>   <img src="640.png" alt="图片"></p><p>   就是下面这几步</p><blockquote><ol><li>页号找到页表中的页项</li><li>获取页项的物理页号基地址</li><li>偏移量+物理页号基地址计算出物理内存地址</li></ol></blockquote><p>   不足之处：</p><p>   每个进程分配一个页表会有空间上的缺陷，因为操作系统上可以运行非常多的进程，那不就意味着页表数量非常多。</p><blockquote><p>以32 位的环境为例，虚拟地址空间范围共有 4GB，假设一个页的大小是 4KB（2^12），那么就需要大约 100 万 （2^20） 个页，每个「页表项」需要 4 个字节大小来存储，那么整个 4GB 空间范围的映射就要/有 4MB 的内存来存储页表。</p></blockquote><blockquote><p>4MB看起来不大，但是数量上来了就很恐怖了，假设 100 个进程的话，就需要 400MB 的内存来存储页表，这是非常大的内存了，更别说 64 位的环境了。</p></blockquote>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">贴心提示：</span><br><span class="line"> 1B(Byte 字节)=8bit，</span><br><span class="line"> 1KB (Kilobyte 千字节)=1024B，</span><br><span class="line"> 1MB (Megabyte 兆字节 简称“兆”)=1024KB，</span><br><span class="line"> 1GB (Gigabyte 吉字节 又称“千兆”)=1024MB</span><br></pre></td></tr></table></figure><p>   为了解决空间上的问题，在对分页方式的基础上，进行优化，出现了多级页表方式</p><h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><p>   在页表的基础上做一次二级分页，把刚刚提到的100万「页表项」分为<strong>一级页表</strong>「1024个页表项」,「一级页表项」下又关联<strong>二级页表</strong>「1024个页表项」，这样一级页表的1024个页表项就覆盖到了4GB的空间范围映射，并且<strong>二级页表按需加载</strong>，这样页表占用的空间就大大降低。</p><p>   做个简单的计算，假设只有 20% 的一级页表项被用到了，那么页表占用的内存空间就只有 4KB（一级页表） + 20% * 4MB（二级页表）= 0.804MB，这对比单级页表的 4MB 就是一个巨大的节约。</p><p>   <img src="image-20220222221928062.png" alt="image-20220222221928062"></p><p>   在二级的基础上是不是又可以继续分级呢，能分二级，必然也能分三级、四级，在64位操作系统是做了四级分页。</p><h4 id="TBL快表-：一种CPU的高速缓存"><a href="#TBL快表-：一种CPU的高速缓存" class="headerlink" title="TBL快表 ：一种CPU的高速缓存"></a>TBL快表 ：一种CPU的高速缓存</h4><p>   多级页表虽然解决了空间上的问题，但是我们发现这种方式需要走多道转换才能找到映射的物理内存地址，经过的多道转换造成了时间上的开销。</p><p>   程序是局部性的，即在一段时间内，整个程序的执行仅限于程序的某一部分。相应的，执行所访问的存储空间也局限于某个内存区域。</p><p>   操作系统就利用这一特性，把最多使用的几个页表项放到TBL快表缓存, CPU 在寻址时，会先查 TLB快表，如果没找到，才会继续查常规的页表，TLB 的命中率其实很高的，因为程序最常访问的页就那么几个。</p><h4 id="内存段页"><a href="#内存段页" class="headerlink" title="内存段页"></a><strong>内存段页</strong></h4><p>   段式与页式并不是相对的，他们也可以组合在一起使用，在段的基础上进行分页分级。</p><ol><li>先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制</li><li><p>接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页</p><p>虚拟地址结构由段号、段内页号和页内位移三部分组成</p><p><img src="640.png" alt="图片"></p><p>就是下面这几步</p><blockquote><ol><li>通过段号获取段表的段项</li><li>通过段项获取到页表地址</li><li>通过页表地址找到段页表</li><li>通过段内页号找到段页表的段页项</li><li>通过段页项获取物理页基地址</li><li>通过物理页基地址+偏移量计算出物理内存地址</li></ol></blockquote></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>   多级分页通过树+懒加载+缓存解决了空间占用与时间消耗的问题，虚拟地址很好的做到了让进程与物理内存地址解耦，正因如此，多进程使用物理内存时才不会有冲突，很好的做到了相互独立与隔离。正因如此，多进程使用物理内存时才不会有冲突，很好的做到了相互独立与隔离。</p><h4 id="Q：虚拟内存的好处？"><a href="#Q：虚拟内存的好处？" class="headerlink" title="Q：虚拟内存的好处？"></a>Q：虚拟内存的好处？</h4><ul><li>既然每个进程的内存空间都是一致而且固定的，所以<a href="https://github.com/Durant35/durant35.github.io/issues/24">链接器在链接可执行文件时，可以设定内存地址</a>，而不用去管这些数据最终实际的内存地址，这是有独立内存空间的好处；</li><li>当不同的进程使用同样的代码时，比如库文件中的代码，<a href="https://github.com/Durant35/durant35.github.io/issues/24">物理内存中可以只存储一份</a>这样的代码，不同的进程只需要把自己的虚拟内存映射过去就可以了，节省内存；</li><li>在<a href="https://github.com/Durant35/durant35.github.io/issues/24">程序需要分配连续的内存空间</a>的时候，只需要在虚拟内存空间分配连续空间，而不需要实际物理内存的连续空间，可以利用碎片。</li></ul><h4 id="Q：页面置换算法？"><a href="#Q：页面置换算法？" class="headerlink" title="Q：页面置换算法？"></a>Q：页面置换算法？</h4><p>（ 。。。果然）</p><p>当所需页不在内存，要将其调入，但如果内存没有空闲空间，为了保证进程所需的页能够调用，必须选择另外一些页调出。此时选择页面置换算法，算法的好坏直接影响系统性能，不适当的算法可能会产生系统“抖动”。</p><p>内存进程过多，缺页越拼单，有效访问存储器的时间急速减少，换句话，就是大部分时间用于页面的换进/换出，而几乎不能完成任何有效的工作，这就是系统的“抖动状态”。</p><blockquote><ol><li><p>最佳置换算法</p><p>理论算法，选择不再使用或最长时间内不再使用的页淘汰</p></li><li><p>先进先出置换算法</p><p>选择先进的页淘汰，与进程实际运行规律不符，缺页率高，抖动高</p></li><li><p>最近最久未使用置换算法LRU</p><p>作用如名字所说，比较符合业务。</p></li><li><p>时钟置换算法</p><p>所有页面用指针链接成一个循环队列。当某页被访问时，其访问位置为1，当需要淘汰一个页面时，只需检查页的访问位。如果是0，就选择该页换出；如果是1，则将它置为0，暂不换出，继续检查下一个页面，若第一轮扫描中所有页面都是1，则将这些页面的访问位依次置为0后，再进行第二轮扫描。</p></li></ol></blockquote><h4 id="Q：问简单的，进程和线程的区别？"><a href="#Q：问简单的，进程和线程的区别？" class="headerlink" title="Q：问简单的，进程和线程的区别？"></a>Q：问简单的，进程和线程的区别？</h4><p>进程是最小的资源分配单位，线程是最小CPU调度单位</p><p>进程：</p><p>P C B是 进程 存在的唯一标识，这意味一个 进程 一定会有对应的PCB，进程消失，P C B也会随之消失。</p><p>P C B通过链表的方式进行组织，把具有相同状态的进程链在一起，组成各种队列；</p><ul><li>将所有处于就绪状态的 进程 链在一起，称为就绪队列</li><li>把所有因等待某事件而处于等待状态的 进程 链在一起就组成各种阻塞队列</li></ul><p>CPU把一个进程切换到另一个进程运行的过程，称为进程上下文切换；一个进程的上下文切换，同时可能影响其他CPU核心上的进程的执行效率。</p><h3 id="Q：插一句，-什么是CPU上下文切换？"><a href="#Q：插一句，-什么是CPU上下文切换？" class="headerlink" title="Q：插一句， 什么是CPU上下文切换？"></a>Q：插一句， 什么是CPU上下文切换？</h3><p>C P U上下文 是指 C P U 寄存器 和 程序计数器</p><ul><li>C P U 寄存器 是 C P U 内置的容量小，速度极快的缓存</li><li>程序计数器是用来存储 是 CPU 正在执行的指令位置或即将执行的下一条指令位置</li></ul><p>上下文切换就是把前一个任务的CPU上下文保存起来，然后加载新任务的上下文到这些指令寄存器(IR)和程序寄存器(PC)等寄存器中。这些被保存下来的上下文会存储在操作系统的内核中，等待任务重新调度执行时再次加载进来，这样就能保证任务的原来状态不受影响，让任务看起来是连续运行的。</p><p>根据场景不同，CPU 上下文切换分成：进程上下文切换、线程上下文切换和中断上下文切换。</p><p>进程是由内核管理与调度的，所以 进程上下文切换 发生在内核态，进程上下文切换的内容包含用户空间资源（虚拟内存、栈、全局变量等）与内核空间资源（内核堆栈、寄存器等）</p><p>什么时候会发生进程调度？</p><ul><li>进程的CPU时间片耗尽，被系统挂起，切换到其他等待CPU的进程运行。</li><li>进程所需要的系统资源不足。要等待资源满足后才可以运行。这个时候会被系统挂起。</li><li>进程通过sleep函数主动将自己挂起。</li><li>当有优先级更高的进程运行时，当前进程会被挂起，由高优先级的进程运行。</li><li>硬中断发生时，CPU上的进程会被挂起，转而执行内核的中断服务程序。</li></ul><h3 id><a href="#" class="headerlink" title="***"></a>***</h3><p>特别需要注意的是<strong>操作系统会将当前任务的虚拟内存一并保存</strong>。而Linux中通过TLB快表来管理虚拟内存到物理内存的映射关系。TLB用于虚拟地址与实地址之间的交互，提供一个寻找实地址的缓存区，能够有效减少寻找物理地址所消耗时间。<strong>当虚拟内存被刷新后，TLB也会被更新。</strong>如果没有TLB，则每次取数据都需要<strong>两次访问内存</strong>，即查页表获得物理地址和取数据。在多核的技术下，这会极大的降低程序的执行效率。因为缓存L3 Cache 是被几个核共享的。当TLB被更新后，<strong>缓存中的TLB数据会失效</strong>，每个CPU都需要从主存中<strong>重新载入</strong>，一个进程的上下文切换，同时为保证缓存一致性，<strong>可能影响其他CPU核心上的进程</strong>的执行效率。</p><p>线程：</p><p>一个进程下面能有一个或多个线程，每个线程都有独立一套的寄存器和栈，这样可以确保线程的控制流是相对独立的。</p><p>线程带来的好处有以下几点</p><ul><li>一个进程中可以同时存在多个线程</li><li>让进程具备多任务并行处理能力</li><li>同进程下的各个线程之间可以共享进程资源 （同进程内的多线程通信十分简单高效）</li><li>更轻量与高效</li></ul><p>线程带来的坏处有以下几点</p><ul><li>因为进程资源共享，所以会产生资源竞争，需要通过锁机制来协同</li><li>当进程中的一个线程奔溃时，会导致其所属进程的所有线程奔溃（一般游戏的用户设计不会采用多线程方式）</li></ul><h2 id="线程与进程的对比"><a href="#线程与进程的对比" class="headerlink" title="线程与进程的对比"></a><strong>线程与进程的对比</strong></h2><ul><li>进程是最小的资源（包括内存、打开的文件等）分配单位，线程是最小的运行单位</li><li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈</li><li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系（和进程大同小异）</li><li>线程的创建、终止时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，所以线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们（线程管理的资源较少）</li><li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的，一个是快表失效，二是重新载入几个核，三是为保证缓存一致性，影响其他CPU核心上的进程</li><li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了</li></ul><p>线程比进程不管是时间效率，还是空间效率都要高。</p><h4 id="Q：刚聊到进程共享，进程之间的通信有哪些？"><a href="#Q：刚聊到进程共享，进程之间的通信有哪些？" class="headerlink" title="Q：刚聊到进程共享，进程之间的通信有哪些？"></a>Q：刚聊到进程共享，进程之间的通信有哪些？</h4><p>一般来说，每个进程都是独立的，操作系统为每个进程之间提供了「隔离」。所以进程之间不能直接互相访问，但可以借助它们共享的「内核空间」来实现通信。</p><p><strong>1.管道</strong></p><p>管道是用环形队列实现的，数据从写端流入，从读端流出，这样就实现了进程间通信。一个管道只能单向传输数据，进程之间的双向传输则需要创建两个管道。比如管道符 。</p><p> <strong>2.消息队列</strong></p><p>消息队列是存储在内核中的消息<strong>链表</strong>，遵循队列的<strong>先进先出</strong>原则。</p><p>消息块遵循进程双方自定义的数据类型，有固定大小。</p><p>消息队列不适合传输较大的数据，因为每个消息块的大小有限制。</p><p>消息队列存在于内核中，所以进程的读写消息需要在用户态与内核态频繁切换，系统开销较大。</p><p><strong>3.共享内存+信号量</strong></p><p>mmap是一种内存映射文件的方法。利用mmap把普通文件映射到进程地址空间后，进程可以向访问内存的方式对文件进行访问。</p><p>信号量有效解决了进程间竞争共享资源而导致的数据不同步，用于实现进程的访问共享资源的互斥与同步。</p><p><strong>4. 信号</strong></p><p>信号可以理解为给进程发送一个<strong>命令</strong>。</p><p><strong>5.Socket</strong></p><p>实现跨越网络的进程通信</p><h4 id="Q：线程通信有哪些？"><a href="#Q：线程通信有哪些？" class="headerlink" title="Q：线程通信有哪些？"></a>Q：线程通信有哪些？</h4><p>1 锁与同步   包括互斥锁、条件变量、读写锁</p><p>2 等待/通知机制    基于<code>Object</code>类的<code>wait()</code>方法和<code>notify()</code>, <code>notifyAll()</code>方法来实现的。</p><p>3 信号量 Semaphore</p><p>4 管道流 PipedOutputStream<code>、</code>PipedInputStream</p><h2 id="你的代码如何保证原子性？"><a href="#你的代码如何保证原子性？" class="headerlink" title="你的代码如何保证原子性？"></a>你的代码如何保证原子性？</h2><p>一个操作或者多个操作要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行</p><ul><li>synchronized同步代码块</li><li>cas原子类工具</li><li>lock锁机制</li></ul><h1 id="sychronized-和-lock区别"><a href="#sychronized-和-lock区别" class="headerlink" title="sychronized 和 lock区别"></a>sychronized 和 lock区别</h1><p>sychronized有两种方法，一种是作用在方法，另一种作用在代码块；<br>如进入临界区前，先判断ACC_SYCHRONIZED标记，有才可以进入moniter对象之后，执行moniterenter指令，把当前的计数器+1，然后开始执行方法，当结束时，先释放moniter对象，再执行moniterexit让计数器-1，然后结束方法。<br>出现异常，也能够自动释放，但有个问题，它无法中断。<br>而Lock，可以调用方法中断，当锁竞争激烈，性能较好。</p><h1 id="讲讲代理模式"><a href="#讲讲代理模式" class="headerlink" title="讲讲代理模式"></a>讲讲代理模式</h1><p>当client 使用RealObj时，先创建proxy代理类，在使用时抽取出RealObj接口，叫做抽象主题类，原来RealObj叫做主题实现类。那么，代理类场景，比如1. I/O处理图片文件，设置虚拟代理，当真正需要使用才会创建出来； 2.设置访问权限，设置保护代理，实现防火墙网关；3.网络访问，grpc/dubbo远程调用，使用远程代理对方式；4. 日志记录代理，AOP实现； 5. 缓存数据，需要缓存代理，AOP实现；6. 事务创建到提交代理过程代理；<br>一种是静态代理，自己new对象作为代理对象，另一种是动态代理，JDK反射，实现Handler，调用newProxyInstance；Cglib操作asm框架在字节码层实现 spring AOP有实现接口就用JDK，无则Cglib。</p><h1 id="TCP和UDP区别"><a href="#TCP和UDP区别" class="headerlink" title="TCP和UDP区别"></a>TCP和UDP区别</h1><p>TCP  强调传输字节流，连接可靠；<br>UDP 强调报文包的发送，连接不可靠；<br>UDP包含源端口，目的端口，数据的长度，为了防止数据出错的校验和，发送的数据<br>TCP包包含以上五项，还增加了序号，确保发送的顺序，确认序号几个字段，防止丢包，还有一些状态位，建立连接时的syn，确认响应时的ack，端位连接的fin，还增加窗口大小，用来流量和拥塞控制；</p><p>TCP传输过程，建立连接三次握手，传输数据，释放连接四次挥手；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;select-poll-epoll&quot;&gt;&lt;a href=&quot;#select-poll-epoll&quot; class=&quot;headerlink&quot; title=&quot;select/poll/epoll&quot;&gt;&lt;/a&gt;select/poll/epoll&lt;/h2&gt;&lt;p&gt;在客户端请求服务端时</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="高并发" scheme="https://missionodd.github.io/categories/技术/高并发/"/>
    
    <category term="并发编程" scheme="https://missionodd.github.io/categories/技术/高并发/并发编程/"/>
    
    
    <category term="java" scheme="https://missionodd.github.io/tags/java/"/>
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="分布式" scheme="https://missionodd.github.io/tags/分布式/"/>
    
  </entry>
  
  <entry>
    <title>Spring | 高频知识口述</title>
    <link href="https://missionodd.github.io/2022/01/23/spring-notes/"/>
    <id>https://missionodd.github.io/2022/01/23/spring-notes/</id>
    <published>2022-01-23T05:50:37.000Z</published>
    <updated>2022-03-16T19:18:03.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q：-IOC-和-AOP"><a href="#Q：-IOC-和-AOP" class="headerlink" title="Q： IOC 和 AOP"></a>Q： IOC 和 AOP</h2><p>spring 要控制和管理bean，就要从bean的配置，实例化，设置属性，初始化，这一套的实现以及操作bean就是控制反转 IOC｡ Aop是切面编程，对局部功能的增强。<br>Spring想要通过IOC来控制反转去创建bean,就需要从XML或注解文件中通过loader读取为 resource,再通过 bean define reader读取为 bean definition,保存在registry｡再通过 stractegy策略来实例化，再使用bean wrapper填充属性，最后初始化完成bean的创建。在实例化和初始化的前后，肯定，是会有生命周期的回调。 InstantationAwareBeanPostProcessor用在实例化前后，beanPostProcessor作用于初始化阶段的前后。</p><p>Aop面向切面编程主要是使用aspectJ实现，并且引入了连接点，置入等概念。但它的实现主要还是用动态代理， 优先使用cjlib，可以改为JDK实现。</p><h2 id="Q：如何解决循环依赖问题？"><a href="#Q：如何解决循环依赖问题？" class="headerlink" title="Q：如何解决循环依赖问题？"></a>Q：如何解决循环依赖问题？</h2><p>引入了AOP动态代理之后，循环依赖的解决方式会更加复杂。<br>就要用到三级缓存才能解决，一级缓存是单例成品的容器。singletonObjects，二级缓存是lazy懒加载的半成品容器earlySingletonObjects，三级缓存是工厂池singletonFactories。<br>如在创建A过程中，引用B，发现B对A是有引用的。<br>首先，A先从一级，二级，三级缓存依次找bean，如果3个缓存没有，会在创建一个FactoryA缓存在第3级的工厂池中，然后A要填充属性时，发现需要创建B。<br>于是，又先创建FactoryB到第3级工厂池，接着B填充属性，需要A，就把FactoryA的半成品Bean或代理对象移动到2级缓存，再提供给B注入，在B创建完毕后，B的成品放入1级缓存，并删除掉B的3级缓存。<br>回到A，A此时拿到了B的成品注入，完全创建后，A的成品放入1级缓存，删除A的1级和2级缓存。</p><h2 id="Q：为什么需要三级缓存？-不是二级缓存？"><a href="#Q：为什么需要三级缓存？-不是二级缓存？" class="headerlink" title="Q：为什么需要三级缓存？  不是二级缓存？"></a>Q：为什么需要三级缓存？  不是二级缓存？</h2><p>只要两个缓存确实可以做到解决循环依赖的问题，但是有一种情况，就是这个Bean需要AOP切面代理，如果加上AOP，两级缓存是无法解决的。<strong>3级缓存的value类型是ObjectFactory，是一个函数接口 ，存在的意义是保证在整个容器的加载过程中同名的bean对象只能有一个，它能生产两种产品：单例的半成品Bean和多例的Bean代理对象。在对象需要被引用注入时，我们不可能每次都从3级缓存的工厂中给我产生一个新的代理对象，所以还要借助另外一个2级缓存来保存产生的代理对象</strong>。</p><h2 id="Q：为什么Bean代理对象多例，不一开始使用做单例缓存，然后取消2级缓存？"><a href="#Q：为什么Bean代理对象多例，不一开始使用做单例缓存，然后取消2级缓存？" class="headerlink" title="Q：为什么Bean代理对象多例，不一开始使用做单例缓存，然后取消2级缓存？"></a>Q：为什么Bean代理对象多例，不一开始使用做单例缓存，然后取消2级缓存？</h2><p>可以但没必要。一个是引入2级缓存已经统一了单例的半成品Bean和多例的Bean代理对象的获取，已保证AOP代理对象也只创建一次；Spring希望AOP代理对象的创建是在Bean初始化的后置处理器中，<br>2级缓存的存在，避免循环依赖中再次通过工厂获取bean这一复杂流程，提升加载效率；因为从3级缓存获取对象时需要每次都通过工厂去拿，需要遍历所有的后置处理器、判断是否创建代理对象，而判断是否创建代理对象本身也是一个复杂耗时的过程；</p><h2 id="Q：能不能去掉2级缓存，初始化完毕，然后代理对象放到1级缓存中？"><a href="#Q：能不能去掉2级缓存，初始化完毕，然后代理对象放到1级缓存中？" class="headerlink" title="Q：能不能去掉2级缓存，初始化完毕，然后代理对象放到1级缓存中？"></a>Q：能不能去掉2级缓存，初始化完毕，然后代理对象放到1级缓存中？</h2><p>一，1级缓存放的是已经初始化完毕的 Bean，要知道 A 依赖了 B 和 C ，A 这时候还没有初始化完毕。<br>二，3级缓存返回的代理对象是不同的，没有2级缓存，就会导致 B 和 C 依赖了不同的 A。</p><h2 id="SpringMVC流程"><a href="#SpringMVC流程" class="headerlink" title="SpringMVC流程"></a>SpringMVC流程</h2><p>用户发起请求，被前端控制器DispatcherServlet拦截，然后调用处理器映射器HandlerMapping，根据URL去获得一个处理链Handler ExecutionChain，里边包括了拦截器Interceptor和我们写的Controller，通过层层拦截校验最终获得处理器适配器HandlerAdatper，同时真正执行处理器Hander（Controller），处理业务后，返回一个ModelAndView对象给前端控制器，里边包含数据和跳转的路径。然后前端控制器会选择一个合适的视图解析器ViewReslover去进行一个视图的渲染。<br>这里边，可以内部转发和重定向，可以处理文件上传和处理普通HTTP请求。</p><p>这里边，拦截器使用了责任链模式，handler的处理与视图的解析使用了适配器模式，利用反射处理请求入参和返回结果视图。</p><p>这里边，对于@ResponseBody，是在RequestMappingHandlerAdapter中设置了messageConverters的逻辑<br>，根据HTTP头的Accept信息，或默认JSON，通过HttpMessageConverters对消息对象的转化。</p><h2 id="Spring容器启动流程"><a href="#Spring容器启动流程" class="headerlink" title="Spring容器启动流程"></a>Spring容器启动流程</h2><p>部署一个web应用在web容器中，它会提供一个全局的上下文环境，这个上下文就是ServletContext，它为后面的IoC容器提供宿主环境，当web容器启动的时候，会执行web.xml中的ContextLoaderListener监听器初始化contextInitialized方法，调用父类的initWebApplicationContext方法，这个方法里面执行了三个任务：1.创建WebApplicationContext容器，2.加载context-param中spring配置文件，3.初始化配置文件并且创建配置文件中的bean。监听器初始化完毕后，开始初始化web.xml中配置的servlet ，用DispatcherServlet举例，它是一个前端控制器，用来转发、匹配、处理每个servlet 请求。DispatcherServlet上下文在初始化的时候会建立自己的上下文，先从ServletContext 中获取之前的WebApplicationContext作为自己上下文的父类上下文，有了这个父类上下文之后，再初始化自己持有的上下文，创建springmvc相关的bean，初始化处理器映射、视图解析等等，初始化完后，spring把Servlet的相关的属性作为属性key，存到servletcontext中，方便后面使用。这样每个Servlet 都持有自己的上下文，拥有自己独立的bean 空间，各个servlet 共享相同的bean，也就是根上下文定义的那些bean。web容器停止时候会执行ContextLoaderListener的contextDestroyed方法销毁context容器。</p><h2 id="SpringBoot启动流程"><a href="#SpringBoot启动流程" class="headerlink" title="SpringBoot启动流程"></a>SpringBoot启动流程</h2><p>1、new了一个SpringApplication对象，使用SPI机制扫描spring.factories文件，加载所有的初始化器和监听器。</p><p>2、调用run() 方法，准备上下文环境，创建上下文对象，根据环境insert组件，比如说autowired，configuration等 。</p><p>3，最后刷新环境，启动spring容器和serverlet容器。</p><h2 id="Springboot自动装配原理"><a href="#Springboot自动装配原理" class="headerlink" title="Springboot自动装配原理"></a>Springboot自动装配原理</h2><p>主要是SPI机制。Springboot启动时会扫描Import注解找到Selector类，调用selectImports方法，读取所有spring.factories配置文件，根据文件中定义的自动配置类路径，按需将Bean加载到Spring容器中。</p><p>主要依赖类上的@ springbootapplication注解，它由3个分注解组成，@ComponentScan 扫描当前包和子包，@SpringBootConfiguration 代表当前是一个配置类，第三个数自动装配的核心，@EnableAutoConfiguration ，有两个@Import注解实现，第一个批量注册Bean，第二个是扫描系统中所有spring.factories拿到配置类，根据@Condition 配置是否生效。</p><h2 id="Spring-事务传播机制"><a href="#Spring-事务传播机制" class="headerlink" title="Spring 事务传播机制"></a>Spring 事务传播机制</h2><p>Spring有4个事务机制，它们的区别体现在嵌套时的不同传播策略：<br>对于无事务，要么创建事务，要么不创建，要么抛出异常；<br>对于一个创建事务，有嵌套时加入策略，嵌套时挂起并新建事务，嵌套时挂起并非事务运行，嵌套时抛出异常，嵌套时savePoint机制。</p><h2 id="Mybatis-原理"><a href="#Mybatis-原理" class="headerlink" title="Mybatis 原理"></a>Mybatis 原理</h2><p>读取mybatis-config,xml配置文件，加载Mapper.xml映射文件，里面放置了很多SQL语句，然后通过构造一个单例的会话工厂SqlSessionFactory，开启一个会话对象SqlSession，会话有API执行SQL语句，通过执行器Executor真正去与数据库通信，输入和查询结果通过MappedStatement交互。</p><h2 id="Q：Spring-用到了哪些设计模式？"><a href="#Q：Spring-用到了哪些设计模式？" class="headerlink" title="Q：Spring 用到了哪些设计模式？"></a>Q：Spring 用到了哪些设计模式？</h2><p>1、简单工厂模式：<code>BeanFactory</code>就是简单工厂模式的体现，根据传入一个唯一标识来获得 Bean 对象。</p><p>2、工厂方法模式：<code>FactoryBean</code>就是典型的工厂方法模式。spring在使用<code>getBean()</code>调用获得该bean时，会自动调用该bean的<code>getObject()</code>方法。每个 Bean 都会对应一个 <code>FactoryBean</code>，如 <code>SqlSessionFactory</code> 对应 <code>SqlSessionFactoryBean</code>。</p><p>3、单例模式：一个类仅有一个实例，提供一个访问它的全局访问点。Spring 创建 Bean 实例默认是单例的。</p><p>4、适配器模式：SpringMVC中的适配器<code>HandlerAdatper</code>。由于应用会有多个Controller实现，如果需要直接调用Controller方法，那么需要先判断是由哪一个Controller处理请求，然后调用相应的方法。当增加新的 Controller，需要修改原来的逻辑，违反了开闭原则（对修改关闭，对扩展开放）。</p><p>为此，Spring提供了一个适配器接口，每一种 Controller 对应一种 <code>HandlerAdapter</code> 实现类，当请求过来，SpringMVC会调用<code>getHandler()</code>获取相应的Controller，然后获取该Controller对应的 <code>HandlerAdapter</code>，最后调用<code>HandlerAdapter</code>的<code>handle()</code>方法处理请求，实际上调用的是Controller的<code>handleRequest()</code>。每次添加新的 Controller 时，只需要增加一个适配器类就可以，无需修改原有的逻辑。</p><p>常用的处理器适配器：<code>SimpleControllerHandlerAdapter</code>，<code>HttpRequestHandlerAdapter</code>，<code>AnnotationMethodHandlerAdapter</code>。</p><p>5、代理模式：spring 的 aop 使用了动态代理，有两种方式<code>JdkDynamicAopProxy</code>和<code>Cglib2AopProxy</code>。</p><p>6、观察者模式：spring 中 observer 模式常用的地方是 listener 的实现，如<code>ApplicationListener</code>。</p><p>7、模板模式： Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等，就使用到了模板模式。</p><h2 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h2><p>构造器注入，构造器注入会先初始化其依赖对象，而set注入是后初始化其依赖对象；</p><p>字段注入</p><p>Setter注入</p><p>@Autowired是Spring的注解，Autowired默认先按byType，如果发现找到多个bean，则，又按照byName方式比对，如果还有多个，则报出异常；@Resource 是JDK1.6支持的注解，默认按照名称(Byname)进行装配，而@Autowired还要结合@Qualifier注解来使用，且@Resource是jdk的注释，可与Spring解耦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Q：-IOC-和-AOP&quot;&gt;&lt;a href=&quot;#Q：-IOC-和-AOP&quot; class=&quot;headerlink&quot; title=&quot;Q： IOC 和 AOP&quot;&gt;&lt;/a&gt;Q： IOC 和 AOP&lt;/h2&gt;&lt;p&gt;spring 要控制和管理bean，就要从bean的配置，实</summary>
      
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
    <category term="Spring" scheme="https://missionodd.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>面经| 项目面-小公司毕业3年</title>
    <link href="https://missionodd.github.io/2022/01/13/10k-interview-skills/"/>
    <id>https://missionodd.github.io/2022/01/13/10k-interview-skills/</id>
    <published>2022-01-13T07:50:37.000Z</published>
    <updated>2022-03-16T16:35:29.708Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="129d2f5ebb17ed1049f913c43f76e7ab09f1561b3c8f20681069011c8bd90174"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="文章私密：Please enter the password to read.">文章私密：Please enter the password to read.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密的文章,请联系博主获得阅读权限.&lt;/br&gt;</summary>
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="面经" scheme="https://missionodd.github.io/categories/技术/面经/"/>
    
    
    <category term="面经" scheme="https://missionodd.github.io/tags/面经/"/>
    
    <category term="java" scheme="https://missionodd.github.io/tags/java/"/>
    
    <category term="MQ" scheme="https://missionodd.github.io/tags/MQ/"/>
    
    <category term="技术" scheme="https://missionodd.github.io/tags/技术/"/>
    
    <category term="原理" scheme="https://missionodd.github.io/tags/原理/"/>
    
  </entry>
  
  <entry>
    <title>设计栈 |  模拟栈的压入、弹出序列</title>
    <link href="https://missionodd.github.io/2022/01/13/zhan-de-ya-ru-dan-chu-xu-lie-lcof/"/>
    <id>https://missionodd.github.io/2022/01/13/zhan-de-ya-ru-dan-chu-xu-lie-lcof/</id>
    <published>2022-01-13T04:30:37.000Z</published>
    <updated>2022-02-16T12:16:18.359Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/" target="_blank" rel="noopener">the leetcode link</a></p><blockquote><p>剑指 Offer 31. 栈的压入、弹出序列<br>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p></blockquote><blockquote><p>示例 1：<br>输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]<br>输出：true<br>解释：我们可以按以下顺序执行：<br>push(1), push(2), push(3), push(4), pop() -&gt; 4,<br>push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</p></blockquote><blockquote><p>示例 2：<br>输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]<br>输出：false<br>解释：1 不能在 2 之前弹出。</p></blockquote><blockquote><p>提示：<br>0 &lt;= pushed.length == popped.length &lt;= 1000<br>0 &lt;= pushed[i], popped[i] &lt; 1000<br>pushed 是 popped 的排列。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>既然本题需要模栈的压入、弹出序列，就要模拟到底，自己设计一个简单的栈</p><ol><li>设计栈：定义一个长度为pushed.length数组作为栈，定义一个整型变量作为栈顶</li><li>枚举压栈，当栈顶元素和出栈的第一个元素相同，则弹栈，出栈列表指针后移并继续判断。</li><li>最后判断出栈列表指针是否指向出栈列表的末尾。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] stack = <span class="keyword">new</span> <span class="keyword">int</span>[pushed.length];</span><br><span class="line">        <span class="keyword">int</span> top = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pushed.length; i++)&#123;</span><br><span class="line">            stack[top] = pushed[i]; <span class="comment">// push</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(j &lt; popped.length &amp;&amp; top &gt;= <span class="number">0</span> &amp;&amp; stack[top] == popped[j])&#123;</span><br><span class="line">                top--; <span class="comment">// pop</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            top++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> j==popped.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>空间优化：把已经枚举过的pushed[]前部分作为栈</p><h3 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> top = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pushed.length; i++)&#123;</span><br><span class="line">            pushed[top] = pushed[i]; <span class="comment">// push</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(j &lt; popped.length &amp;&amp; top &gt;= <span class="number">0</span> &amp;&amp; pushed[top] == popped[j])&#123;</span><br><span class="line">                top--; <span class="comment">// pop</span></span><br><span class="line">                j++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            top++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> j==popped.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the leetcode link&lt;/a&gt;&lt;/p&gt;
&lt;b</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="模拟" scheme="https://missionodd.github.io/tags/模拟/"/>
    
    <category term="栈" scheme="https://missionodd.github.io/tags/栈/"/>
    
  </entry>
  
  <entry>
    <title>TCP粘包是什么？ 如何解决？</title>
    <link href="https://missionodd.github.io/2022/01/12/zhan-bao/"/>
    <id>https://missionodd.github.io/2022/01/12/zhan-bao/</id>
    <published>2022-01-12T14:15:08.000Z</published>
    <updated>2022-03-17T14:30:45.061Z</updated>
    
    <content type="html"><![CDATA[<p>事情从一个健身教练说起吧。</p><p>李东，自称亚健康终结者，尝试使用互联网+的模式拓展自己的业务。在某款新开发的聊天软件<strong>琛琛</strong>上发布广告。</p><p>键盘说来就来。疯狂发送”李东”，回车发送！，”亚健康终结者”，再回车发送！</p><p>还记得<strong>四层网络协议</strong>长什么样子吗？</p><figure class="image-box">                <img src="v2-3ce2ef6cc4a7f288941ade57c9799450_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>四层网络模型每层各司其职，消息在进入每一层时都会多加一个<strong>报头</strong>，每多一个报头可以理解为<strong>数据报多戴一顶帽子</strong>。这个报头上面记录着消息从哪来，到哪去，以及消息多长等信息。比如，<strong><code>mac头部</code>记录的是硬件的唯一地址，<code>IP头</code>记录的是从哪来和到哪去，传输层头记录到是到达目的主机后具体去哪个进程</strong>。</p><p>在从消息发到网络的时候给消息带上报头，消息和纷繁复杂的网络中通过这些信息在路由器间流转，最后到达目的机器上，接受者再通过这些报头，一步一步还原出发送者最原始要发送的消息。</p><figure class="image-box">                <img src="v2-a74a8e2932a412ffdbcb98f884fc086f_720w.jpg" alt="img" title class>                <p>img</p>            </figure><h3 id="为什么要将数据切片"><a href="#为什么要将数据切片" class="headerlink" title="为什么要将数据切片"></a><strong>为什么要将数据切片</strong></h3><p>软件<strong>琛琛</strong>是属于<strong>应用层</strong>上的。</p><p>而”李东”，”亚健康终结者”这两条消息在进入传输层时使用的是<strong>传输层上的 TCP 协议</strong>。消息在进入<strong>传输层（TCP）</strong>时会被切片为一个个数据包。这个数据包的长度是<code>MSS</code>。</p><p>可以把网络比喻为一个水管，是有一定的<strong>粗细</strong>的，这个粗细由<strong>网络接口层（数据链路层）</strong>提供给<strong>网络层</strong>，一般认为是的<code>MTU</code>（1500），直接传入整个消息，会超过水管的最大承受范围，那么，就需要进行切片，成为一个个数据包，这样消息才能正常通过“水管”。</p><figure class="image-box">                <img src="v2-5db7c25baee72ee2b77ca3bcbee97312_720w.jpg" alt="img" title class>                <p>img</p>            </figure><h3 id="MTU-和-MSS-有什么区别"><a href="#MTU-和-MSS-有什么区别" class="headerlink" title="MTU 和 MSS 有什么区别"></a><strong>MTU 和 MSS 有什么区别</strong></h3><figure class="image-box">                <img src="v2-ce18e60cfc7a9bbe120b85ac4a7077ec_720w.jpg" alt="img" title class>                <p>img</p>            </figure><ul><li><strong>MTU: Maximum Transmit Unit</strong>，最大传输单元。 由<strong>网络接口层（数据链路层）</strong>提供给<strong>网络层</strong>最大一次传输数据的大小；一般 MTU=<strong>1500 Byte</strong>。<br>假设IP层有 &lt;= 1500 byte 需要发送，只需要一个 IP 包就可以完成发送任务；假设 IP 层有&gt; 1500 byte 数据需要发送，需要分片才能完成发送，分片后的 IP Header ID 相同。</li><li><strong>MSS：Maximum Segment Size</strong> 。 TCP 提交给 IP 层最大分段大小，不包含 TCP Header 和 TCP Option，只包含 TCP Payload ，MSS 是 TCP 用来限制应用层最大的发送字节数。<br>假设 MTU= 1500 byte，那么 <strong>MSS = 1500- 20(IP Header) -20 (TCP Header) = 1460 byte</strong>，如果应用层有 <strong>2000 byte</strong> 发送，那么需要两个切片才可以完成发送，第一个 TCP 切片 = 1460，第二个 TCP 切片 = 540。</li></ul><h3 id="什么是粘包"><a href="#什么是粘包" class="headerlink" title="什么是粘包"></a><strong>什么是粘包</strong></h3><p>那么当李东在手机上键入”李东””亚健康终结者”的时候，在 TCP 中把消息分成 MSS 大小后，消息顺着网线顺利发出。</p><figure class="image-box">                <img src="v2-1daa1040cda53b3015f7001a2a72897f_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>网络稳得很，将消息分片传到了对端手机 B 上。经过 TCP 层消息重组。变成”李东亚健康终结者”这样的<strong>字节流（stream）</strong>。</p><figure class="image-box">                <img src="v2-17ecf0e357371feddf343f93b658ec84_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>但由于聊天软件<strong>琛琛</strong>是新开发的，而且开发者叫<strong>小白</strong>，完了，是个<strong>臭名昭著的造 bug 工程师</strong>。经过他的代码，在处理<strong>字节流</strong>的时候消息从”李东”，”亚健康终结者”变成了”李东亚”，”健康终结者”。”李东”作为上一个包的内容与下一个包里的”亚”粘在了一起被错误地当成了一个数据包解析了出来。这就是所谓的<strong>粘包</strong>。</p><figure class="image-box">                <img src="v2-b57e49bce332079e2a62c656b2d422e5_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>一个号称<strong>健康终结者</strong>的健身教练，大概运气也不会很差吧，就祝他客源滚滚吧。</p><h3 id="为什么会出现粘包"><a href="#为什么会出现粘包" class="headerlink" title="为什么会出现粘包"></a><strong>为什么会出现粘包</strong></h3><p>那就要从 TCP 是啥说起。</p><p><strong>TCP，Transmission Control Protocol</strong>。传输控制协议，是一种面向连接的、可靠的、基于<strong>字节流</strong>的传输层通信协议。</p><figure class="image-box">                <img src="v2-e2a59fa4a549dadabd73e202ad0fe6e8_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>其中跟<strong>粘包</strong>关系最大的就是<strong>基于字节流</strong>这个特点。</p><p>字节流可以理解为一个双向的通道里流淌的数据，这个<strong>数据</strong>其实就是我们常说的二进制数据，简单来说就是一大堆 01 串。这些 01 串之间<strong>没有任何边界</strong>。</p><figure class="image-box">                <img src="v2-7b36d6b7eae993081244621846b11704_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>应用层传到 TCP 协议的数据，不是以<strong>消息报为单位</strong>向目的主机发送，而是以<strong>字节流</strong>的方式发送到下游，这些数据可能被<strong>切割和组装</strong>成各种数据包，接收端收到这些数据包后没有正确还原原来的消息，因此出现粘包现象。</p><h3 id="为什么要组装发送的数据"><a href="#为什么要组装发送的数据" class="headerlink" title="为什么要组装发送的数据"></a><strong>为什么要组装发送的数据</strong></h3><p>上面提到 TCP <strong>切割</strong>数据包是为了能顺利通过网络这根水管。相反，还有一个<strong>组装</strong>的情况。如果前后两次 TCP 发的数据都远小于 MSS，比如就几个字节，每次都单独发送这几个字节，就比较<strong>浪费</strong>网络 io 。</p><figure class="image-box">                <img src="image-20220112222810497.png" alt="image-20220112222810497" title class>                <p>image-20220112222810497</p>            </figure><p>比如小白爸让小白出门给买一瓶酱油，小白出去买酱油回来了。小白妈又让小白出门买一瓶醋回来。小白前后结结实实跑了两趟，影响了打游戏的时间。</p><p>优化的方法也比较简单。当小白爸让小白去买酱油的时候，小白先<strong>等待</strong>，继续打会游戏，这时候如果小白妈让小白买瓶醋回来，小白可以一次性带着两个需求出门，再把东西带回来。</p><p>上面说的其实就是<code>TCP</code>的 <strong>Nagle 算法</strong>优化，目的是为了避免发送小的数据包。</p><p>在 Nagle 算法开启的状态下，数据包在以下两个情况会被发送：</p><ul><li>如果包长度达到<code>MSS</code>（或含有<code>Fin</code>包），立刻发送，否则<strong>等待</strong>下一个包到来；如果下一包到来后两个包的总长度超过<code>MSS</code>的话，就会进行拆分发送；</li><li>等待超时（一般为<code>200ms</code>），第一个包没到<code>MSS</code>长度，但是又迟迟等不到第二个包的到来，则立即发送。</li></ul><figure class="image-box">                <img src="v2-495ef2712c3b542cf277a5121cfe3ab4_720w.jpg" alt="img" title class>                <p>img</p>            </figure><ul><li>由于启动了<strong>Nagle算法</strong>， msg1 小于 mss ，此时等待<code>200ms</code>内来了一个 msg2 ，msg1 + msg2 &gt; MSS，因此把 msg2 分为 msg2(1) 和 msg2(2)，msg1 + msg2(1) 包的大小为<code>MSS</code>。此时发送出去。</li><li>剩余的 msg2(2) 也等到了 msg3， 同样 msg2(2) + msg3 &gt; MSS，因此把 msg3 分为 msg3(1) 和 msg3(2)，msg2(2) + msg3(1) 作为一个包发送。</li><li>剩余的 msg3(2) 长度不足<code>mss</code>，同时在<code>200ms</code>内没有等到下一个包，等待超时，直接发送。</li><li>此时三个包虽然在图里<strong>颜色不同</strong>，但是实际场景中，他们都是<strong>一整个 01 串</strong>，如果处理开发者把第一个收到的 msg1 + msg2(1) 就当做是一个完整消息进行处理，就会看上去就<strong>像是两个包粘在一起</strong>，就会导致<strong>粘包问题</strong>。</li></ul><h3 id="关掉-Nagle-算法就不会粘包了吗？"><a href="#关掉-Nagle-算法就不会粘包了吗？" class="headerlink" title="关掉 Nagle 算法就不会粘包了吗？"></a><strong>关掉 Nagle 算法就不会粘包了吗？</strong></h3><p><strong>Nagle</strong> 算法其实是个<strong>有些年代</strong>的东西了，诞生于 1984 年。对于应用程序一次发送一字节数据的场景，如果没有 Nagle 的优化，这样的包立马就发出去了，会导致网络由于太多的包而过载。</p><p>但是今天网络环境比以前好太多，Nagle 的优化帮助就没那么大了。而且它的延迟发送，有时候还可能导致调用延时变大，比如打游戏的时候，你操作如此丝滑，但却因为 Nagle 算法延迟发送导致慢了一拍，就问你难受不难受。</p><p>所以现在<strong>一般也会把它关掉</strong>。</p><p>看起来，Nagle 算法的优化作用貌似不大，还会导致<strong>粘包”问题”</strong>。那么是不是关掉这个算法就可以解决掉这个<strong>粘包”问题”</strong>呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP_NODELAY = 1</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="v2-53dd931a4d8ea89ea1fbc0bbcfa50072_r.jpg" alt="preview" title class>                <p>preview</p>            </figure><ul><li>接受端应用层在收到 <strong>msg1</strong> 时立马就取走了，那此时 <strong>msg1</strong> 没粘包问题</li><li><strong>msg2 </strong>到了后，应用层在忙，没来得及取走，就呆在 <strong>TCP Recv Buffer</strong> 中了</li><li><strong>msg3 </strong>此时也到了，跟 <strong>msg2</strong> 和 <strong>msg3</strong> 一起放在了 <strong>TCP Recv Buffer</strong> 中</li><li>这时候应用层忙完了，来取数据，图里是两个颜色作区分，但实际场景中<strong>都是 01 串</strong>，此时一起取走，发现还是粘包。</li></ul><p>因此，就算关闭 Nagle 算法，接收数据端的应用层没有及时读取 TCP Recv Buffer 中的数据，还是会发生粘包。</p><h3 id="怎么处理粘包"><a href="#怎么处理粘包" class="headerlink" title="怎么处理粘包"></a><strong>怎么处理粘包</strong></h3><p>粘包出现的根本原因是不确定<strong>消息的边界</strong>。接收端在面对<strong>“无边无际”的二进制流</strong>的时候，根本不知道收了多少 01 才算<strong>一个消息</strong>。一不小心拿多了就说是<strong>粘包</strong>。其实粘包根本不是 TCP 的问题，是使用者对于 TCP 的理解有误导致的一个问题。</p><p>只要在发送端每次发送消息的时候给消息<strong>带上识别消息边界的信息</strong>，接收端就可以根据这些信息识别出消息的边界，从而区分出每个消息。</p><p>常见的方法有</p><ul><li>加入特殊标志</li></ul><figure class="image-box">                <img src="image-20220112222646626.png" alt="image-20220112222646626" title class>                <p>image-20220112222646626</p>            </figure><p>可以通过特殊的标志作为头尾，比如当收到了<code>0xfffffe</code>或者回车符，则认为收到了新消息的头，此时继续取数据，直到收到下一个头标志<code>0xfffffe</code>或者尾部标记，才认为是一个完整消息。类似的像 HTTP 协议里当使用 <strong>chunked 编码</strong> 传输时，使用若干个 chunk 组成消息，最后由一个标明长度为 0 的 chunk 结束。</p><ul><li>加入消息长度信息</li></ul><figure class="image-box">                <img src="v2-67108ed6fe1b9f89f4c831882ff9ff1c_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>这个一般配合上面的特殊标志一起使用，在收到头标志时，里面还可以带上消息长度，以此表明在这之后多少 byte 都是属于这个消息的。如果在这之后正好有符合长度的 byte，则取走，作为一个完整消息给应用层使用。在实际场景中，HTTP 中的<code>Content-Length</code>就起了类似的作用，当接收端收到的消息长度小于 Content-Length 时，说明还有些消息没收到。那接收端会一直等，直到拿够了消息或超时。</p><p>可能这时候会有朋友会问，采用<code>0xfffffe</code>标志位，用来标志一个数据包的开头，你就不怕你发的某个数据里正好有这个内容吗？</p><p>是的，<strong>怕</strong>，所以一般除了这个标志位，发送端在发送时还会加入各种校验字段（<code>校验和</code>或者对整段完整数据进行 <code>CRC</code> 之后获得的数据）放在标志位后面，在接收端拿到整段数据后校验下确保它就是发送端发来的完整数据。</p><figure class="image-box">                <img src="v2-a12fe05290289991e6d3fc4ed2137664_720w.jpg" alt="img" title class>                <p>img</p>            </figure><h3 id="UDP-会粘包吗"><a href="#UDP-会粘包吗" class="headerlink" title="UDP 会粘包吗"></a><strong>UDP 会粘包吗</strong></h3><p>跟 <code>TCP</code> 同为传输层的另一个协议，<strong>UDP，User Datagram Protocol</strong>。用户数据包协议，是面向无连接，不可靠的，基于<strong>数据报</strong>的传输层通信协议。</p><figure class="image-box">                <img src="v2-cb14cd4ee7817c81e0140fb0466e26ce_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>基于<strong>数据报</strong>是指无论应用层交给 UDP 多长的报文，UDP 都照样发送，即一次发送一个报文。至于如果数据包太长，需要分片，那也是IP层的事情，大不了效率低一些。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。而接收方在接收数据报的时候，也不会像面对 TCP 无穷无尽的二进制流那样不清楚啥时候能结束。正因为<strong>基于数据报</strong>和<strong>基于字节流</strong>的差异，<strong>TCP 发送端发 10 次字节流数据，而这时候接收端可以分 100 次去取数据，每次取数据的长度可以根据处理能力作调整；但 UDP 发送端发了 10 次数据报，那接收端就要在 10 次收完，且发了多少，就取多少，确保每次都是一个完整的数据报。</strong></p><p>我们先看下<strong>IP报头</strong></p><figure class="image-box">                <img src="v2-8d684c81269540bc81237b343755f7fc_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>注意这里面是有一个 16 位的总长度的，意味着 IP 报头里记录了整个 IP 包的总长度。接着我们再看下 <strong>UDP 的报头</strong>。</p><figure class="image-box">                <img src="v2-a62f8fa5871ce69211fa809032e633b6_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>在报头中有<code>16bit</code>用于指示 <strong>UDP 数据报文的长度</strong>，假设这个长度是 n ，以此作为<strong>数据边界</strong>。因此在接收端的应用层能清晰地将不同的数据报文区分开，从报头开始取 n 位，就是一个<strong>完整的</strong>数据报，从而避免粘包和拆包的问题。</p><p>当然，就算没有这个位（<strong>16位 UDP 长度</strong>），因为 IP 的头部已经包含了数据的<strong>总长度</strong>信息，此时如果 IP 包（网络层）里放的数据使用的协议是 UDP（传输层），那么这个<strong>总长度</strong>其实就包含了 UDP 的头部和 UDP 的数据。</p><p>因为 UDP 的头部长度固定为 8 字节（ 1 字节= 8 位，8 字节= 64 位，上图中除了<code>数据和选项</code>以外的部分），那么这样就很容易的算出 UDP 的数据的长度了。因此说 UDP 的长度信息其实是冗余的。</p><figure class="image-box">                <img src="v2-0640a5a91302b68c71aafde8aeae2722_720w.jpg" alt="img" title class>                <p>img</p>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UDP Data 的长度 = IP 总长度 - IP Header 长度 - UDP Header 长度</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="v2-4fdde9161d9f6be4fe2a372c1ff6d49b_720w.jpg" alt="img" title class>                <p>img</p>            </figure><p>TCP首部里是没有长度这个信息的，跟UDP类似，同样可以通过下面的公式获得当前包的TCP数据长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP Data 的长度 = IP 总长度 - IP Header 长度 - TCP Header 长度。</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="image-20220112223526763.png" alt="img" title class>                <p>img</p>            </figure><p>跟 UDP 不同在于，TCP 发送端在发的时候就<strong>不保证发的是一个完整的数据报</strong>，仅仅看成一连串无结构的字节流，这串字节流在接收端收到时哪怕知道长度也没用，因为它很可能只是某个完整消息的一部分。</p><h3 id="为什么长度字段冗余还要加到-UDP-首部中"><a href="#为什么长度字段冗余还要加到-UDP-首部中" class="headerlink" title="为什么长度字段冗余还要加到 UDP 首部中"></a><strong>为什么长度字段冗余还要加到 UDP 首部中</strong></h3><p>关于这一点，查了很多资料，<code>《 TCP-IP 详解（卷2）》</code>里说可能是因为要用于计算校验和。也有的说是因为UDP底层使用的可以不是IP协议，毕竟 IP 头里带了总长度，正好可以用于计算 UDP 数据的长度，万一 UDP 的底层不是IP层协议，而是其他网络层协议，就不能继续这么计算了。</p><p>但我觉得，最重要的原因是，IP 层是网络层的，而 UDP 是传输层的，到了传输层，数据包就已经不存在IP头信息了，那么此时的UDP数据会被放在 UDP 的 <code>Socket Buffer</code> 中。当应用层来不及取这个 UDP 数据报，那么两个数据报在数据层面其实都是一堆 01 串。此时读取第一个数据报的时候，会先读取到 UDP 头部，<strong>如果这时候 UDP 头不含 UDP 长度信息，那么应用层应该取多少数据才算完整的一个数据报呢</strong>？</p><p>因此 UDP 头的这个长度其实跟 TCP 为了防止粘包而在消息体里加入的边界信息是起一样的作用的。</p><figure class="image-box">                <img src="image-20220112223547322.png" alt="image-20220112223547322" title class>                <p>image-20220112223547322</p>            </figure><p>面试的时候咱就把这些全说出去，<strong>显得</strong>咱好像经过了深深的思考一样，面试官可能会觉得咱特别爱思考，<strong>加分加分</strong>。</p><p>如果我说错了，请把我的这篇文章转发给更多的人，让大家记住这个满嘴胡话的人，在关注之后狠狠的私信骂我，拜托了！</p><h3 id="IP-层有粘包问题吗"><a href="#IP-层有粘包问题吗" class="headerlink" title="IP 层有粘包问题吗"></a><strong>IP 层有粘包问题吗</strong></h3><p>IP 层会对大包进行切片，是不是也有粘包问题？</p><p>先说结论，不会。首先前文提到了，粘包其实是由于使用者无法正确区分消息边界导致的一个问题。</p><p>先看看 IP 层的切片分包是怎么回事。</p><figure class="image-box">                <img src="v2-1f597892a79da54e5830c2e64c2fcb4a_720w.jpg" alt="img" title class>                <p>img</p>            </figure><ul><li>如果消息过长，<code>IP层</code>会按 <strong>MTU 长度</strong>把消息分成 <strong>N 个切片</strong>，每个切片带有自身在<strong>包里的位置（offset）</strong>和<strong>同样的IP头信息</strong>。</li><li>各个切片在网络中进行传输。每个数据包切片可以在不同的路由中流转，然后<strong>在最后的终点汇合后再组装</strong>。</li><li>在接收端收到第一个切片包时会申请一块新内存，创建IP包的数据结构，等待其他切片分包数据到位。</li><li>等消息全部到位后就把整个消息包给到上层（传输层）进行处理。</li></ul><p>可以看出整个过程，<code>IP 层</code>从按长度切片到把切片组装成一个数据包的过程中，都只管运输，都不需要在意消息的边界和内容，都不在意消息内容了，那就不会有粘包一说了。</p><p><code>IP 层</code>表示：我只管把发送端给我的数据传到接收端就完了，我也不了解里头放了啥东西。</p><p>听起来就像 “<strong>我不管产品的需求傻不傻X，我实现了就行，我不问，也懒得争了</strong>”，这思路值得每一位优秀的划水程序员学习，<strong>respect</strong>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>粘包这个问题的根因是由于开发人员没有正确理解 TCP 面向字节流的数据传输方式，本身并不是 TCP 的问题，是开发者的问题。</p><ul><li>TCP 不管发送端要发什么，都基于字节流把数据发到接收端。这个字节流里可能包含上一次想要发的数据的部分信息。接收端根据需要在消息里加上识别消息边界的信息。不加就可能出现粘包问题。</li><li>TCP 粘包跟Nagle算法有关系，但关闭 Nagle 算法并不解决粘包问题。</li><li>UDP 是基于数据报的传输协议，不会有粘包问题。</li><li>IP 层也切片，但是因为不关心消息里有啥，因此有不会有粘包问题。</li><li><code>TCP</code> 发送端可以发 <code>10 次</code>字节流数据，接收端可以分 <code>100 次</code>去取；<code>UDP</code> 发送端发了 <code>10 次</code>数据报，那接收端就要在 <code>10 次</code>收完。</li></ul><p>数据包也只是按着 TCP 的方式进行组装和拆分，<strong>如果数据包有错，那数据包也只是犯了每个数据包都会犯的错而已</strong>。</p>]]></content>
    
    
    <summary type="html">转载自：https://zhuanlan.zhihu.com/p/359177898</summary>
    
    
    
    <category term="技术" scheme="https://missionodd.github.io/categories/技术/"/>
    
    <category term="计算机网络" scheme="https://missionodd.github.io/categories/技术/计算机网络/"/>
    
    
    <category term="TCP/IP" scheme="https://missionodd.github.io/tags/TCP-IP/"/>
    
    <category term="粘包" scheme="https://missionodd.github.io/tags/粘包/"/>
    
  </entry>
  
  <entry>
    <title>完全背包思路| 剪绳子 （java）</title>
    <link href="https://missionodd.github.io/2022/01/12/jian-sheng-zi-lcof/"/>
    <id>https://missionodd.github.io/2022/01/12/jian-sheng-zi-lcof/</id>
    <published>2022-01-12T04:30:37.000Z</published>
    <updated>2022-02-16T10:08:41.017Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/" target="_blank" rel="noopener">the leetcode link</a></p><blockquote><p>剑指 Offer 14- I. 剪绳子<br>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]<em>k[1]</em>…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p></blockquote><blockquote><p>输入: 2<br>输出: 1<br>解释: 2 = 1 + 1, 1 × 1 = 1</p></blockquote><blockquote><p>示例 2:<br>输入: 10<br>输出: 36<br>解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</p></blockquote><blockquote><p>提示：<br>2 &lt;= n &lt;= 58</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code> 完全背包问题对于大于等于4的数，拆成每个数都越靠近e，收益越大，由于是整数，那么，拆成2或3收益最大比如：n=4，收益最大[2,2]n=5, 收益最大[2,3]n=6, 收益最大[3,3]n=7, 收益最大[2,2,3]n=8, 收益最大[2,3,3]...我们抽象出来，得到：物品重量：2，3物品价值：2，3背包容量：n最大价值：最大乘积</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     完全背包问题</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">4</span>) <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里dp最大乘积，包括不剪绳子的情况，这是等于原值，不是等于0</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">3</span>]=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">2</span>;w&lt;=<span class="number">3</span>;w++)&#123; <span class="comment">// 遍历物品</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)&#123; <span class="comment">// 遍历背包</span></span><br><span class="line">                dp[i] = Math.max(dp[i], dp[i-w]*w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/jian-sheng-zi-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the leetcode link&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;剑</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="完全背包" scheme="https://missionodd.github.io/tags/完全背包/"/>
    
  </entry>
  
  <entry>
    <title>01背包 | 分割等和子集</title>
    <link href="https://missionodd.github.io/2022/01/09/partition-equal-subset-sum/"/>
    <id>https://missionodd.github.io/2022/01/09/partition-equal-subset-sum/</id>
    <published>2022-01-09T04:30:37.000Z</published>
    <updated>2022-02-16T10:06:49.531Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener">the leetcode link</a></p><blockquote><ol start="416"><li>分割等和子集<br>给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</li></ol></blockquote><blockquote><p>示例 1：<br>输入：nums = [1,5,11,5]<br>输出：true<br>解释：数组可以分割成 [1, 5, 5] 和 [11] 。</p></blockquote><blockquote><p>示例 2：<br>输入：nums = [1,2,3,5]<br>输出：false<br>解释：数组不能分割成两个元素和相等的子集。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>转成01背包问题:</strong></p><ul><li>物品重量：数组元素各数值， 如[1,5,11,5]</li><li>物品价值：数组元素各数值， 如[1,5,11,5]</li><li>背包容量：target = sum / 2</li><li>求：是否存在背包正好装满的情况，存在则说明找到了总和为 sum / 2 的子集</li><li>递推公式：dp[j] = max(dp[j], dp[j-num] + num);</li></ul><p><strong>步骤：</strong></p><ol><li><p>定义dp一维滚动数组<br>01背包中，dp[j] 表示：背包容量为j的背包，所背的物品价值可以最大为dp[j]。</p></li><li><p>确定递推公式<br>01背包的递推公式为：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>该题的物品i的重量是nums[i]，其价值也是nums[i]。<br>所以递推公式：dp[j] = max(dp[j], dp[j-num] + num);<br>3.dp数组如何初始化<br>由于题目给的价值都是正整数那么非0下标都初始化为0；<br>如果题目给的价值有负数，那么非0下标就要初始化为负无穷。<br><strong>这样才能让dp数组在递归公式的过程中取的最大的价值，而不是被初始值覆盖</strong>。</p></li><li><p>确定遍历顺序<br>01背包一维滚动数组：先遍历物品，再遍历背包</p></li><li>确定返回结果<br>dp[j]的数值一定是小于等于j的。<br>如果dp[target] == target， 说明存在背包正好装满的价值总和，存在则说明找到了总和为 sum / 2 的子集。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        转成01背包问题:</span></span><br><span class="line"><span class="comment">        物品重量：数组元素各数值， 如[1,5,11,5]</span></span><br><span class="line"><span class="comment">        物品价值：数组元素各数值， 如[1,5,11,5]</span></span><br><span class="line"><span class="comment">        背包容量：target = sum / 2</span></span><br><span class="line"><span class="comment">        求：是否存在背包正好装满的情况，说明找到了总和为 sum / 2 的子集</span></span><br><span class="line"><span class="comment">        递推公式：dp[j] = max(dp[j], dp[j-num] + num);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//总和为奇数，不能平分</span></span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = target; j &gt;= num; j--)&#123; <span class="comment">//倒叙保证使用1次物品，正序会覆盖上一层左侧值</span></span><br><span class="line">                <span class="comment">//物品 i 的重量是 nums[i]，其价值也是 nums[i]</span></span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j-num] + num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target] == target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/partition-equal-subset-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the leetcode link&lt;/a&gt;&lt;/p&gt;
&lt;blockquo</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="01背包" scheme="https://missionodd.github.io/tags/01背包/"/>
    
  </entry>
  
  <entry>
    <title>动态规划 |  双串题 | 不同的子序列</title>
    <link href="https://missionodd.github.io/2022/01/05/distinct-subsequences/"/>
    <id>https://missionodd.github.io/2022/01/05/distinct-subsequences/</id>
    <published>2022-01-05T07:50:37.000Z</published>
    <updated>2022-02-08T01:49:22.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/distinct-subsequences/" target="_blank" rel="noopener">the leetcode link</a></p><blockquote><ol start="115"><li>不同的子序列<br>给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。</li></ol><p>字符串的一个 子序列 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，”ACE” 是 “ABCDE” 的一个子序列，而 “AEC” 不是）</p><p>题目数据保证答案符合 32 位带符号整数范围。</p></blockquote><blockquote><p>示例 1：<br>输入：s = “rabbbit”, t = “rabbit”<br>输出：3<br>解释：<br>如下图所示, 有 3 种可以从 s 中得到 “rabbit” 的方案。<br>rabbbit<br>rabbbit<br>rabbbit</p></blockquote><blockquote><p>示例 2：<br>输入：s = “babgbag”, t = “bag”<br>输出：5<br>解释：<br>如下图所示, 有 5 种可以从 s 中得到 “bag” 的方案。<br>babgbag<br>babgbag<br>babgbag<br>babgbag<br>babgbag</p></blockquote><blockquote><p>提示：<br>0 &lt;= s.length, t.length &lt;= 1000<br>s 和 t 由英文字母组成</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>s, t引入头部””空字符；定义m、n分别是s、t长度，定义二维数组dp[m+1][n+1]，值表示s[0：i]可以组成t[0：j]的子序列最大数量；<br><code>（i，j泛指符合题目不超边界的相关变量，[0：i]表示枚举从0到i）</code></li><li>初始化</li></ol><ul><li>s[0：i]全部删除取得子序列“”，成功组成t[0]即“” ，所以dp[0：m][0] = 1</li><li>s[0]是“”，无法组成非“”字符串t[1：i] ，所以dp[0][1：n] = 0，默认已初始化</li></ul><ol start="3"><li>递推过程</li></ol><ul><li>结尾字符相等，取两种情况的结合<br>第一种，用到s[i-1]的结尾字符，则数量与dp[i-1][j-1]相等<br>第二种，不用到s[i-1]的结尾字符，则数量与dp[i-1][j]相等</li><li>结尾字符不相等，不用到s[i-1]的结尾字符, 则等于dp[i-1][j]<br><code>tips：由于引入“”的关系，s的当前字符指针是i-1，t的当前字符指针是j-1，与dp的i-1，j-1区别开</code></li></ul><ol start="4"><li>剪枝优化，限制t[0：j]长度不可能大于s[0：i]</li><li>返回结果</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length();</span><br><span class="line">        <span class="keyword">int</span> n = t.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//s[0：i]全部删除取得子序列“”，成功组成t[0]“” ，所以dp[0：m][0] = 1</span></span><br><span class="line">        <span class="comment">//s[0]是“”，无法组成非“”字符串t[1：i] ，所以dp[0][1：n] = 0，默认已初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=Math.min(i,n);j++)&#123; <span class="comment">// 剪枝操作，t[0：j]长度不可能大于s[0：i]</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==t.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="comment">// 结尾字符相等，取两种情况的结合</span></span><br><span class="line">                    <span class="comment">//第一种，用到s[i-1]的结尾字符，则数量与dp[i-1][j-1]相等</span></span><br><span class="line">                    <span class="comment">//第二种，不用到s[i-1]的结尾字符，则数量与dp[i-1][j]相等</span></span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结尾字符不相等，不用到s[i-1]的结尾字符, 则等于dp[i-1][j]</span></span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/distinct-subsequences/&quot; targ</summary>
      
    
    
    
    <category term="算法" scheme="https://missionodd.github.io/categories/算法/"/>
    
    
    <category term="算法" scheme="https://missionodd.github.io/tags/算法/"/>
    
    <category term="动态规划" scheme="https://missionodd.github.io/tags/动态规划/"/>
    
  </entry>
  
</feed>
